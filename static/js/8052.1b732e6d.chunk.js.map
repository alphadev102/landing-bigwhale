{"version":3,"file":"static/js/8052.1b732e6d.chunk.js","mappings":"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","sources":["../node_modules/@toruslabs/solana-embed/node_modules/buffer/index.js","../node_modules/@web3auth/base-solana-adapter/src/baseSolanaAdapter.ts","../node_modules/@web3auth/base-solana-adapter/node_modules/base-x/src/index.js","../node_modules/@web3auth/base-solana-adapter/node_modules/bs58/index.js","../node_modules/@toruslabs/solana-embed/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/account.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/layout.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/loader.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/node_modules/fast-stable-stringify/index.js","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/errors.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/connection.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@toruslabs/solana-embed/node_modules/@solana/web3.js/src/index.ts","../node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/src/basePostMessageStream.ts","../node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/src/safeEventEmitter.ts","../node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/src/serializableError.ts","../node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/src/jrpc.ts","../node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/src/jrpcEngine.ts","../node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/src/substream.ts","../node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/src/mux.ts","../../../src/messages.ts","../../../src/interfaces.ts","../../../src/config.ts","../../../src/loglevel.ts","../../../src/utils.ts","../../../src/baseProvider.ts","../../../src/embedUtils.ts","../../../src/PopupHandler.ts","../../../src/communicationProvider.ts","../../../src/inPageProvider.ts","../../../src/siteMetadata.ts","../../../src/embed.ts","../node_modules/@web3auth/torus-solana-adapter/src/solanaWalletAdapter.ts","../node_modules/fast-deep-equal/index.js","../node_modules/is-stream/index.js"],"sourcesContent":["/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nexport abstract class BaseSolanaAdapter<T> extends BaseAdapter<T> {\n  public clientId: string;\n\n  constructor(params: { clientId?: string } = {}) {\n    super();\n    this.clientId = params.clientId;\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request<Uint8Array>({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\",\n        },\n      });\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        bs58.encode(signedMessage as Uint8Array),\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = 2n ** 64n - 1n;\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(url.startsWith('https:') /* useHttps */);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta, version}) => ({\n        meta,\n        transaction: {\n          ...transaction,\n          message: versionedMessageFromResponse(version, transaction.message),\n        },\n        version,\n      })),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","import { Duplex } from \"readable-stream\";\n\nfunction noop(): void {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\n\nexport default class BasePostMessageStream extends Duplex {\n  _init: boolean;\n\n  _haveSyn: boolean;\n\n  _name: string;\n\n  _target: string;\n\n  _targetWindow: Window;\n\n  _targetOrigin: string;\n\n  _onMessage: any;\n\n  _synIntervalId: number;\n\n  constructor({\n    name,\n    target,\n    targetWindow = window,\n    targetOrigin = \"*\",\n  }: {\n    name: string;\n    target: string;\n    targetWindow?: Window;\n    targetOrigin?: string;\n  }) {\n    super({\n      objectMode: true,\n    });\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n\n    window.addEventListener(\"message\", this._onMessage, false);\n    this._handShake();\n  }\n\n  _break(): void {\n    this.cork();\n    this._write(BRK, null, noop);\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake(): void {\n    this._write(SYN, null, noop);\n    this.cork();\n  }\n\n  _onData(data: unknown): void {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data: unknown): void {\n    const originConstraint = this._targetOrigin;\n    this._targetWindow.postMessage(\n      {\n        target: this._target,\n        data,\n      },\n      originConstraint\n    );\n  }\n\n  onMessage(event: MessageEvent): void {\n    const message = event.data;\n\n    // validate message\n    if (\n      (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin) ||\n      event.source !== this._targetWindow ||\n      typeof message !== \"object\" ||\n      message.target !== this._name ||\n      !message.data\n    ) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read(): void {\n    return undefined;\n  }\n\n  _write(data: unknown, _, cb: () => void): void {\n    this._postMessage(data);\n    cb();\n  }\n\n  _destroy(): void {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n}\n","import { EventEmitter } from \"events\";\n\ntype Handler = (...args: any[]) => void;\ninterface EventMap {\n  [k: string]: Handler | Handler[] | undefined;\n}\n\nfunction safeApply<T, A extends any[]>(handler: (this: T, ...handlerArgs: A) => void, context: T, args: A): void {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone<T>(arr: T[]): T[] {\n  const n = arr.length;\n  const copy = new Array(n);\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n  return copy;\n}\n\nexport default class SafeEventEmitter extends EventEmitter {\n  emit(type: string, ...args: any[]): boolean {\n    let doError = type === \"error\";\n\n    const events: EventMap = (this as any)._events;\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (doError) {\n      let er;\n      if (args.length > 0) {\n        [er] = args;\n      }\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      }\n      // At least give some kind of context to the user\n      const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n      (err as any).context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n}\n","import stringify from \"fast-safe-stringify\";\n\nexport default class SerializableError<T> extends Error {\n  public code: number;\n\n  public data: T;\n\n  constructor({ code, message, data }: { code: number; message: string; data?: T }) {\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString(): string {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack,\n    });\n  }\n}\n","import { randomId } from \"@toruslabs/openlogin-utils\";\nimport { Duplex } from \"readable-stream\";\n\nimport SafeEventEmitter from \"./safeEventEmitter\";\nimport SerializableError from \"./serializableError\";\n\nexport type Json = boolean | number | string | null | { [property: string]: Json } | Json[];\n\nexport type JRPCVersion = \"2.0\";\nexport type JRPCId = number | string | void;\n\nexport type ConsoleLike = Pick<Console, \"log\" | \"warn\" | \"error\" | \"debug\" | \"info\" | \"trace\">;\nexport interface JRPCBase {\n  jsonrpc?: JRPCVersion;\n  id?: JRPCId;\n}\n\nexport interface JRPCResponse<T> extends JRPCBase {\n  result?: T;\n  error?: any;\n}\n\nexport const getRpcPromiseCallback =\n  (resolve: (value?: any) => void, reject: (error?: Error) => void, unwrapResult = true) =>\n  (error: Error, response: JRPCResponse<unknown>): void => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n\nexport interface JRPCRequest<T> extends JRPCBase {\n  method: string;\n  params?: T;\n}\n\nexport type JRPCEngineNextCallback = (cb?: (done: (error?: Error) => void) => void) => void;\nexport type JRPCEngineEndCallback = (error?: Error) => void;\nexport type JRPCEngineReturnHandler = (done: (error?: Error) => void) => void;\n\ninterface IdMapValue {\n  req: JRPCRequest<unknown>;\n  res: JRPCResponse<unknown>;\n  next: JRPCEngineNextCallback;\n  end: JRPCEngineEndCallback;\n}\n\ninterface IdMap {\n  [requestId: string]: IdMapValue;\n}\n\nexport type JRPCMiddleware<T, U> = (req: JRPCRequest<T>, res: JRPCResponse<U>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => void;\n\nexport function createErrorMiddleware(log: ConsoleLike): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({ code: -32603, message: \"invalid method\" });\n        end();\n        return;\n      }\n      next((done) => {\n        const { error } = res;\n        if (!error) {\n          return done();\n        }\n        log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n        return done();\n      });\n    } catch (error) {\n      log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n      res.error = new SerializableError({ code: -32603, message: error.message });\n      end();\n    }\n  };\n}\n\nexport function createStreamMiddleware(): { events: SafeEventEmitter; middleware: JRPCMiddleware<unknown, unknown>; stream: Duplex } {\n  const idMap: IdMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res: JRPCResponse<unknown>) {\n    const context = idMap[res.id as unknown as string];\n    if (!context) {\n      throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n    }\n\n    delete idMap[res.id as unknown as string];\n    // copy whole res onto original res\n    Object.assign(context.res, res);\n    // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n    setTimeout(context.end);\n  }\n\n  function processNotification(res: JRPCRequest<unknown>) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res: JRPCResponse<unknown>, _encoding: unknown, cb: (error?: Error | null) => void) {\n    let err;\n    try {\n      const isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res as unknown as JRPCRequest<unknown>);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    }\n    // continue processing stream\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage,\n  });\n\n  const middleware: JRPCMiddleware<unknown, unknown> = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req);\n    // register request on id map\n    idMap[req.id as unknown as string] = { req, res, next, end };\n  };\n\n  return { events, middleware, stream };\n}\n\ntype ScaffoldMiddlewareHandler<T, U> = JRPCMiddleware<T, U> | Json;\n\nexport function createScaffoldMiddleware(handlers: {\n  [methodName: string]: ScaffoldMiddlewareHandler<unknown, unknown>;\n}): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method];\n    // if no handler, return\n    if (handler === undefined) {\n      return next();\n    }\n    // if handler is fn, call as middleware\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    }\n    // if handler is some other value, use as result\n    res.result = handler;\n    return end();\n  };\n}\n\nexport function createIdRemapMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next((done) => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\n\nexport function createLoggerMiddleware(logger: ConsoleLike): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\n\nexport type AsyncJRPCEngineNextCallback = () => Promise<void>;\n\ntype Maybe<T> = Partial<T> | null | undefined;\n\nexport interface JRPCSuccess<T> extends JRPCBase {\n  result: Maybe<T>;\n}\n\nexport interface JRPCError {\n  code: number;\n  message: string;\n  data?: unknown;\n  stack?: string;\n}\n\nexport interface PendingJRPCResponse<T> extends JRPCBase {\n  result?: T;\n  error?: Error | JRPCError;\n}\n\nexport interface JRPCFailure extends JRPCBase {\n  error: JRPCError;\n}\n\nexport type AsyncJRPCMiddleware<T, U> = (req: JRPCRequest<T>, res: PendingJRPCResponse<U>, next: AsyncJRPCEngineNextCallback) => Promise<void>;\n\ntype ReturnHandlerCallback = (error: null | Error) => void;\n\nexport function createAsyncMiddleware<T, U>(asyncMiddleware: AsyncJRPCMiddleware<T, U>): JRPCMiddleware<T, U> {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise: () => void;\n    const nextPromise = new Promise<void>((resolve) => {\n      resolveNextPromise = resolve;\n    });\n\n    let returnHandlerCallback: unknown = null;\n    let nextWasCalled = false;\n\n    // This will be called by the consumer's async middleware.\n    const asyncNext = async () => {\n      nextWasCalled = true;\n\n      // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next((runReturnHandlersCallback) => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n        (returnHandlerCallback as ReturnHandlerCallback)(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        (returnHandlerCallback as ReturnHandlerCallback)(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n","import { serializeError } from \"eth-rpc-errors\";\nimport { Duplex } from \"readable-stream\";\n\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCEngineReturnHandler, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"./jrpc\";\nimport SafeEventEmitter from \"./safeEventEmitter\";\nimport SerializableError from \"./serializableError\";\n\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nexport class JRPCEngine extends SafeEventEmitter {\n  private _middleware: JRPCMiddleware<unknown, unknown>[];\n\n  constructor() {\n    super();\n    this._middleware = [];\n  }\n\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n  private static async _runAllMiddleware(\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<unknown>,\n    middlewareStack: JRPCMiddleware<unknown, unknown>[]\n  ): Promise<\n    [\n      unknown, // error\n      boolean, // isComplete\n      JRPCEngineReturnHandler[]\n    ]\n  > {\n    const returnHandlers: JRPCEngineReturnHandler[] = [];\n    let error = null;\n    let isComplete = false;\n\n    // Go down stack of middleware, call and collect optional returnHandlers\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n      if (isComplete) {\n        break;\n      }\n    }\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n  private static _runMiddleware(\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<unknown>,\n    middleware: JRPCMiddleware<unknown, unknown>,\n    returnHandlers: JRPCEngineReturnHandler[]\n  ): Promise<[unknown, boolean]> {\n    return new Promise((resolve) => {\n      const end: JRPCEngineEndCallback = (err?: unknown) => {\n        const error = err || res.error;\n        if (error) {\n          res.error = serializeError(error);\n        }\n        // True indicates that the request should end\n        resolve([error, true]);\n      };\n\n      const next: JRPCEngineNextCallback = (returnHandler?: JRPCEngineReturnHandler) => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({ code: -32603, message: \"JRPCEngine: 'next' return handlers must be functions\" }));\n            }\n            returnHandlers.push(returnHandler);\n          }\n\n          // False indicates that the request should not end\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n  private static async _runReturnHandlers(handlers: JRPCEngineReturnHandler[]): Promise<void> {\n    for (const handler of handlers) {\n      await new Promise<void>((resolve, reject) => {\n        handler((err) => (err ? reject(err) : resolve()));\n      });\n    }\n  }\n\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n  private static _checkForCompletion(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>, isComplete: boolean): void {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({ code: -32603, message: \"Response has no error or result for request\" });\n    }\n    if (!isComplete) {\n      throw new SerializableError({ code: -32603, message: \"Nothing ended request\" });\n    }\n  }\n\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n  push<T, U>(middleware: JRPCMiddleware<T, U>): void {\n    this._middleware.push(middleware as JRPCMiddleware<unknown, unknown>);\n  }\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @param callback - An error-first callback that will receive the response.\n   */\n  handle<T, U>(request: JRPCRequest<T>, callback: (error: unknown, response: JRPCResponse<U>) => void): void;\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @param callback - An error-first callback that will receive the array of\n   * responses.\n   */\n  handle<T, U>(requests: JRPCRequest<T>[], callback: (error: unknown, responses: JRPCResponse<U>[]) => void): void;\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @returns A promise that resolves with the response, or rejects with an\n   * error.\n   */\n  handle<T, U>(request: JRPCRequest<T>): Promise<JRPCResponse<U>>;\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @returns A promise that resolves with the array of responses, or rejects\n   * with an error.\n   */\n  handle<T, U>(requests: JRPCRequest<T>[]): Promise<JRPCResponse<U>[]>;\n\n  handle(req: unknown, cb?: any) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req as JRPCRequest<unknown>, cb);\n    }\n    return this._promiseHandle(req as JRPCRequest<unknown>);\n  }\n\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n  asMiddleware(): JRPCMiddleware<unknown, unknown> {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError as Error);\n        }\n\n        return next(async (handlerCallback) => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n  private _handleBatch(reqs: JRPCRequest<unknown>[]): Promise<JRPCResponse<unknown>[]>;\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n  private _handleBatch(reqs: JRPCRequest<unknown>[], cb: (error: unknown, responses?: JRPCResponse<unknown>[]) => void): Promise<void>;\n\n  private async _handleBatch(\n    reqs: JRPCRequest<unknown>[],\n    cb?: (error: unknown, responses?: JRPCResponse<unknown>[]) => void\n  ): Promise<JRPCResponse<unknown>[] | void> {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all(\n        // 1. Begin executing each request in the order received\n        reqs.map(this._promiseHandle.bind(this))\n      );\n\n      // 3. Return batch response\n      if (cb) {\n        return cb(null, responses);\n      }\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * A promise-wrapped _handle.\n   */\n  private _promiseHandle(req: JRPCRequest<unknown>): Promise<JRPCResponse<unknown>> {\n    return new Promise((resolve) => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n  private async _handle(callerReq: JRPCRequest<unknown>, cb: (error: unknown, response: JRPCResponse<unknown>) => void): Promise<void> {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({ code: -32603, message: \"request must be plain object\" });\n      return cb(error, { id: undefined, jsonrpc: \"2.0\", error });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({ code: -32603, message: \"method must be string\" });\n      return cb(error, { id: callerReq.id, jsonrpc: \"2.0\", error });\n    }\n\n    const req: JRPCRequest<unknown> = { ...callerReq };\n    const res: JRPCResponse<unknown> = {\n      id: req.id,\n      jsonrpc: req.jsonrpc,\n    };\n    let error: Error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n\n    return cb(error, res as JRPCResponse<unknown>);\n  }\n\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n  private async _processRequest(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n    // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n    JRPCEngine._checkForCompletion(req, res, isComplete);\n\n    // The return handlers should run even if an error was encountered during\n    // middleware processing.\n    await JRPCEngine._runReturnHandlers(returnHandlers);\n\n    // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n    if (error) {\n      throw error;\n    }\n  }\n}\n\nexport function mergeMiddleware(middlewareStack: JRPCMiddleware<unknown, unknown>[]): JRPCMiddleware<unknown, unknown> {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach((middleware) => engine.push(middleware));\n  return engine.asMiddleware();\n}\n\nexport interface EngineStreamOptions {\n  engine: JRPCEngine;\n}\n\nexport function createEngineStream(opts: EngineStreamOptions): Duplex {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const { engine } = opts;\n  // eslint-disable-next-line prefer-const\n  let stream: Duplex;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req: JRPCRequest<unknown>, _encoding: unknown, cb: (error?: Error | null) => void) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({ objectMode: true, read, write });\n\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", (message) => {\n      stream.push(message);\n    });\n  }\n  return stream;\n}\n","import { BufferEncoding } from \"@toruslabs/openlogin-utils\";\nimport { Duplex } from \"readable-stream\";\n\nexport default class Substream extends Duplex {\n  private readonly _parent: any;\n\n  private readonly _name: string;\n\n  constructor({ parent, name }: { parent: any; name: string }) {\n    super({ objectMode: true });\n    this._parent = parent;\n    this._name = name;\n  }\n\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n  _read(): void {\n    return undefined;\n  }\n\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n  _write(chunk: unknown, _encoding: BufferEncoding, callback: (error?: Error | null) => void): void {\n    this._parent.push({\n      name: this._name,\n      data: chunk,\n    });\n    callback();\n  }\n}\n","import { BufferEncoding } from \"@toruslabs/openlogin-utils\";\nimport eos from \"end-of-stream\";\nimport once from \"once\";\nimport pump from \"pump\";\nimport { Duplex } from \"readable-stream\";\nimport type { Readable, Writable } from \"stream\";\n\nimport Substream from \"./substream\";\n\nexport const IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\n\nexport type Stream = Readable | Writable;\n\ninterface Chunk {\n  name: string;\n  data: unknown;\n}\n\nexport class ObjectMultiplex extends Duplex {\n  public _substreams: Record<string, Substream | typeof IGNORE_SUBSTREAM>;\n\n  getStream: (name: string) => Substream | symbol;\n\n  constructor(opts: Record<string, unknown> = {}) {\n    super({\n      ...opts,\n      objectMode: true,\n    });\n    this._substreams = {};\n  }\n\n  createStream(name: string): Substream {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n\n    // create substream\n    const substream = new Substream({ parent: this, name });\n    this._substreams[name] = substream;\n\n    // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    anyStreamEnd(this, (_error?: Error | null) => substream.destroy(_error || undefined));\n\n    return substream;\n  }\n\n  // ignore streams (dont display orphaned data warning)\n  ignoreStream(name: string): void {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n    // set\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read(): void {\n    return undefined;\n  }\n\n  _write(chunk: Chunk, _encoding: BufferEncoding, callback: (error?: Error | null) => void): void {\n    const { name, data } = chunk;\n\n    if (!name) {\n      window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n      return callback();\n    }\n\n    // get corresponding substream\n    const substream = this._substreams[name];\n    if (!substream) {\n      window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n      return callback();\n    }\n\n    // push data into substream\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n}\n\n// util\nfunction anyStreamEnd(stream: ObjectMultiplex, _cb: (error?: Error | null) => void) {\n  const cb = once(_cb);\n  eos(stream as unknown as Stream, { readable: false }, cb);\n  eos(stream as unknown as Stream, { writable: false }, cb);\n}\n\nexport function setupMultiplex(stream: Duplex): ObjectMultiplex {\n  const mux = new ObjectMultiplex();\n  mux.getStream = function streamHelper(name: string) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n    return this.createStream(name);\n  };\n\n  pump(stream as unknown as Stream, mux as unknown as Stream, stream as unknown as Stream, (err) => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,"import Torus, { NetworkInterface, TorusCtorArgs, TorusLoginParams, TorusParams } from \"@toruslabs/solana-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { ITorusWalletProvider, TorusInjectedProvider } from \"@web3auth/solana-provider\";\n\nexport interface SolanaWalletOptions {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: TorusLoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n  clientId?: string;\n}\n\nexport class SolanaWalletAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_SOLANA;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: TorusLoginParams = {};\n\n  private solanaProvider: TorusInjectedProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(params: SolanaWalletOptions) {\n    super(params);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n    this.sessionTime = params.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      return this.solanaProvider?.provider || null;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    let network: NetworkInterface;\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const { blockExplorer, displayName, ticker, tickerName, rpcTarget, chainId } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, ticker, tickerName, logo: \"\" };\n    } else {\n      const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n    }\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init({ showTorusButton: false, ...this.initParams, network });\n\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig as CustomChainConfig,\n      },\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_SOLANA });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      try {\n        const torusInpageProvider = this.torusInstance.provider as unknown as ITorusWalletProvider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error: unknown) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n          const network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_SOLANA, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await super.disconnect();\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n}\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","'use strict';\n\nconst isStream = stream =>\n\tstream !== null &&\n\ttypeof stream === 'object' &&\n\ttypeof stream.pipe === 'function';\n\nisStream.writable = stream =>\n\tisStream(stream) &&\n\tstream.writable !== false &&\n\ttypeof stream._write === 'function' &&\n\ttypeof stream._writableState === 'object';\n\nisStream.readable = stream =>\n\tisStream(stream) &&\n\tstream.readable !== false &&\n\ttypeof stream._read === 'function' &&\n\ttypeof stream._readableState === 'object';\n\nisStream.duplex = stream =>\n\tisStream.writable(stream) &&\n\tisStream.readable(stream);\n\nisStream.transform = stream =>\n\tisStream.duplex(stream) &&\n\ttypeof stream._transform === 'function';\n\nmodule.exports = isStream;\n"],"names":["base64","require","ieee754","customInspectSymbol","Symbol","exports","Buffer","K_MAX_LENGTH","createBuffer","length","RangeError","buf","Uint8Array","Object","setPrototypeOf","prototype","arg","encodingOrOffset","TypeError","allocUnsafe","from","value","string","encoding","isEncoding","byteLength","actual","write","slice","fromString","ArrayBuffer","isView","arrayView","isInstance","copy","fromArrayBuffer","buffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","b","obj","isBuffer","len","checked","undefined","numberIsNaN","type","Array","isArray","data","fromObject","toPrimitive","assertSize","size","array","i","toString","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","start","end","this","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","m","bidirectionalIndexOf","val","dir","arrayIndexOf","indexOf","call","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","push","charCodeAt","asciiToBytes","base64Write","ucs2Write","units","c","hi","lo","utf16leToBytes","fromByteArray","Math","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","e","typedArraySupport","console","error","defineProperty","enumerable","get","poolSize","alloc","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","set","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","Error","toJSON","_arr","ret","out","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","code","errors","E","sym","getMessage","Base","writable","configurable","name","stack","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","floor","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","abs","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","split","base64clean","src","dst","constructor","alphabet","table","i16","fn","BufferBigIntNotDefined","BaseSolanaAdapter","_inherits","params","_classCallCheck","_this","_defineProperty","clientId","_createClass","key","_authenticateUser","provider","chainConfig","chainId","_context","WalletLoginError","_this$chainConfig2","chainNamespace","status","ADAPTER_STATUS","request","method","accounts","existingToken","getSavedToken","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","version","nonce","random","issuedAt","Date","toISOString","signChallenge","challenge","encodedMessage","TextEncoder","encode","display","signedMessage","verifySignedChallenge","bs58","sessionTime","saveToken","_disconnect","_context2","clearToken","BaseAdapter","module","ALPHABET","BASE_MAP","charAt","xc","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","b256","carry","it3","it4","vch","pbegin","pend","b58","it1","it2","repeat","decode","basex","ed25519","sha512","concatBytes","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","isOnCurve","sign","verify","toBuffer","Struct","properties","assign","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Map","PUBLIC_KEY_LENGTH","PublicKey","_bn","isPublicKeyData","decoded","BN","eq","toBase58","toBytes","toArrayLike","zeroPad","fromPublicKey","seed","programId","publicKeyBytes","sha256","seeds","forEach","createProgramAddressSync","seedsWithNonce","err","findProgramAddressSync","pubkeyData","default","kind","fields","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","signature","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","property","BufferLayout","rustString","rsl","_decode","bind","_encode","rslShim","chars","span","getAlloc","getItemAlloc","item","field","elementLayout","layout","decodeLength","elem","shift","encodeLength","rem_len","Message","args","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","map","account","ix","programIdIndex","accountKeyIndexes","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","Layout","transaction","keys","signData","accountCount","dataSlice","condition","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","opts","pubkey","isSigner","isWritable","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","hasOwnProperty","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","warn","accountMetas","accountMeta","uniqueMetas","pubkeyString","uniqueIndex","findIndex","sort","localeCompare","feePayerIndex","splice","payerMeta","unshift","signedKeys","unsignedKeys","compiledInstructions","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","sendTransaction","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","u64","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","freeze","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","authorizedPubkey","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","ceil","chunkSize","payer","program","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","all","globalThis","fetch","PublicKeyFromString","coerce","instance","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","createRpcResult","result","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","slot","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetEpochInfoResult","nullable","epoch","effectiveSlot","amount","postBalance","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","boolean","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","logs","rentEpoch","unitsConsumed","returnData","byIdentity","firstSlot","lastSlot","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","ParsedAccountDataResult","AccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","ProgramAccountInfoResult","state","active","inactive","memo","blockTime","subscription","SlotInfoResult","parent","root","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","VoteAccountInfoResult","gossip","tpu","rpc","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","ConfirmationStatus","current","delinquent","SignatureStatusResponse","confirmations","confirmationStatus","AddressTableLookupStruct","accountKey","writableIndexes","readonlyIndexes","ConfirmedTransactionResult","addressTableLookups","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","readonly","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","PerfSampleResult","previousBlockhash","parentSlot","rewards","rewardType","feeCalculator","lamportsPerSignature","numTransactions","numSlots","samplePeriodSecs","LogsResult","Keypair","process","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","authority","recentSlot","lookupTableAddress","bumpSeed","lookupTable","addresses","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","assert","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","fromSecretKey","createInstructionWithPublicKey","secp256k1","h","hmac","msgs","update","digest","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","ethAddressOffset","ethAddressInstructionIndex","msgHash","privKey","pkey","messageHash","der","recovered","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","stakePubkey","lockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","VoteProgram","Voter","voteInit","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","noop","ACK","BasePostMessageStream","_ref","targetWindow","targetOrigin","objectMode","_init","_haveSyn","_name","_target","_targetWindow","_targetOrigin","_onMessage","onMessage","_synIntervalId","addEventListener","_handShake","_break","cork","_write","_onData","emit","uncork","_postMessage","originConstraint","postMessage","event","_read","cb","_destroy","removeEventListener","Duplex","safeApply","handler","Reflect","arrayClone","SafeEventEmitter","doError","events","_events","er","listeners","EventEmitter","SerializableError","getRpcPromiseCallback","reject","unwrapResult","response","createStreamMiddleware","idMap","stream","_encoding","processNotification","processResponse","_err","middleware","req","next","JRPCEngine","_middleware","handle","_handleBatch","_handle","_promiseHandle","asMiddleware","_runAllMiddleware","middlewareError","isComplete","returnHandlers","_runReturnHandlers","handlerCallback","reqs","responses","callerReq","_processRequest","serializeError","_checkForCompletion","middlewareStack","_runMiddleware","reverse","returnHandler","handlers","Substream","_parent","chunk","callback","IGNORE_SUBSTREAM","ObjectMultiplex","_substreams","createStream","substream","_cb","once","eos","readable","anyStreamEnd","_error","destroy","ignoreStream","disconnected","permanentlyDisconnected","unsupportedSync","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","connected","TORUS_BUILD_ENV","BUTTON_POSITION","supportedVerifierList","api","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","prodTorusUrl","localStorageKey","hostname","loglevel","getWindowId","getTorusUrl","buildEnv","torusUrl","logLevel","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","getPopupFeatures","w","dualScreenLeft","screenLeft","screenX","dualScreenTop","screenTop","screenY","innerWidth","document","documentElement","clientWidth","screen","innerHeight","clientHeight","left","top","BaseProvider","connectionStream","jsonRpcStreamName","isDuplexStream","messages","isTorus","setMaxListeners","_handleConnect","_handleDisconnect","_handleStreamDisconnect","_rpcRequest","_initializeState","sendAsync","mux","pump","jsonRpcConnection","rpcEngine","_end","originalId","newId","randomId","done","ethErrors","createLoggerMiddleware","_rpcEngine","jsonRpcConnectionEvents","send","streamName","remoteLabel","emitter","warningMsg","listenerCount","logStreamDisconnectWarning","handleEvent","eventName","handlerArgs","handlerWrapper","documentReady","readyState","htmlToElement","html","template","createElement","trimmedHtml","innerHTML","content","firstChild","PopupHandler","url","features","windowTimer","iClosedWindow","_setupTimer","setInterval","closed","clearInterval","open","_this$window","focus","close","redirect","locationReplaceOnRedirect","TorusCommunicationProvider","_state","_defaultState","dappStorageKey","languageTranslations","configuration","userLanguage","navigator","language","userLanguages","getUserLanguage","embedTranslations","windowRefs","on","isConnected","COMMUNICATION_NOTIFICATIONS","isFullScreen","rid","_displayIframe","isFull","windowId","_createPopupBlockAlert","_handleCloseWindow","currentLoginProvider","isLoggedIn","isIFrameFullScreen","torusAlertContainer","torusIframe","COMMUNICATION_JRPC_METHODS","info","initialized","_handleWindow","finalUrl","URL","hash","handledWindow","style","right","bottom","torusWidgetVisibility","buttonPosition","hideTorusButton","showTorusButton","_payload","tryWindowHandle","debug","isRecoverable","errorMessage","isPermanentlyDisconnected","EthereumRpcError","logoUrl","getLogoUrl","torusAlert","successAlert","btnContainer","appendChild","bindOnLoad","remove","children","attachOnLoad","hasEmittedConnection","TorusInPageProvider","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","PROVIDER_NOTIFICATIONS","PROVIDER_JRPC_METHODS","isUnlocked","isInternal","isEthAccounts","finalAccounts","dequal","imgExists","img","onload","onerror","getSiteName","siteName","querySelector","metaTitle","title","getSiteIcon","icon","querySelectorAll","find","_icon","Boolean","getSiteMetadata","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","isLocalStorageAvailable","storage","setItem","removeItem","storageAvailable","torusIframeHtml","crossOrigin","rel","relList","supports","head","Torus","modalZIndex","isInitialized","requestedLoginProvider","alertZIndex","communicationProvider","whiteLabel","enableLogging","network","useLocalStorage","apiKey","extraParams","setAPIKey","enableAll","setDefaultLevel","disableAll","handleDappStorageKey","torusIframeUrl","pathname","endsWith","hashParams","URLSearchParams","append","styleLink","handleSetup","body","dappMetadata","contentWindow","_setupWeb3","topupHide","isTopupHidden","torus","loginProvider","login_hint","loginParams","userInfo","success","logout","clearInit","isElement","element","Element","Document","contains","path","instanceId","finalPath","searchParams","userInfoResponse","topupResponse","messageOnly","parse","tx","idx","storedKey","localStorage","getItem","generatedKey","providerParams","providerStream","communicationStream","inPageProvider","detectAccountRequestPrototypeModifier","originalMethod","self","login","then","catch","proxiedInPageProvider","Proxy","deleteProperty","proxiedCommunicationProvider","SolanaWalletAdapter","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","torusWalletOptions","adapterSettings","loginSettings","solanaProvider","_this$solanaProvider","_get","blockExplorer","displayName","rpcTarget","ticker","tickerName","blockExplorerUrl","logo","getChainConfig","_this$chainConfig","torusInstance","init","TorusInjectedProvider","ADAPTER_EVENTS","autoConnect","rehydrated","connect","_connect","WalletInitializationError","adapter","torusInpageProvider","signAllTransactions","signMessage","signTransaction","setupProvider","Web3AuthError","_this$chainConfig3","setProvider","reconnected","_args3","cleanup","_context3","_getUserInfo","_context4","getUserInfo","equal","RegExp","flags","isStream","pipe","_writableState","_readableState","duplex","transform","_transform"],"sourceRoot":""}