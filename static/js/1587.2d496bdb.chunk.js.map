{"version":3,"file":"static/js/1587.2d496bdb.chunk.js","mappings":"scAoBMA,EAAS,I,SAAIC,ICpBI,gBDsBjBC,EAAIC,EAAAA,GAAAA,KAAe,sEAInBC,GAAeC,EAAAA,EAAAA,IAAY,gBAE3BC,EAAc,WAGpB,SAASC,EAAaC,GACnB,OAAS,GAAKA,GAAQ,GAAO,EAAIA,CACpC,CAOA,SAASC,EAAQC,GACb,OAAOC,EAAAA,EAAAA,KAAWC,EAAAA,EAAAA,IAAQF,GAAQ,GACtC,CAEA,SAASG,EAAYC,GACjB,OAAOC,EAAAA,GAAAA,QAAcC,EAAAA,EAAAA,IAAO,CAAEF,GAAMG,EAAAA,EAAAA,KAAaC,EAAAA,EAAAA,KAAOA,EAAAA,EAAAA,IAAOJ,IAAQ,EAAG,KAC9E,CAEA,SAASK,EAAYC,GACjB,GAAgB,MAAZA,EACA,OAAOC,EAAAA,EAAAA,GAGX,GAAyB,kBAAdD,EAAwB,CAC/B,IAAME,EAAQD,EAAAA,EAAUD,GAIxB,OAHa,MAATE,GACAtB,EAAOuB,mBAAmB,iBAAkB,WAAYH,GAErDE,C,CAGX,OAAOF,CACX,CAEA,IAAMI,EAAyB,CAAC,EAEnBC,EAAc,mBAQdC,EAAM,WAwBf,WAAYC,EAAuBC,EAAoBC,EAAmBC,EAA2BC,EAAmBC,EAAeC,EAAeC,GAElJ,IAFmL,eAE/KP,IAAqBH,EACrB,MAAM,IAAIW,MAAM,gDAGpB,GAAIP,EAAY,CACZ,IAAMQ,EAAa,IAAIC,EAAAA,GAAWT,IAClCU,EAAAA,EAAAA,IAAeC,KAAM,aAAcH,EAAWR,aAC9CU,EAAAA,EAAAA,IAAeC,KAAM,YAAaH,EAAWI,oB,MAE7CF,EAAAA,EAAAA,IAAeC,KAAM,aAAc,OACnCD,EAAAA,EAAAA,IAAeC,KAAM,aAAa3B,EAAAA,EAAAA,IAAQiB,KAG9CS,EAAAA,EAAAA,IAAeC,KAAM,oBAAqBT,IAC1CQ,EAAAA,EAAAA,IAAeC,KAAM,eAAetB,EAAAA,EAAAA,KAAawB,EAAAA,EAAAA,KAAUvB,EAAAA,EAAAA,IAAOqB,KAAKV,YAAa,EAAG,KAEvFS,EAAAA,EAAAA,IAAeC,KAAM,WAAWG,EAAAA,EAAAA,IAAeH,KAAKV,aAEpDS,EAAAA,EAAAA,IAAeC,KAAM,YAAaR,IAElCO,EAAAA,EAAAA,IAAeC,KAAM,QAASP,IAC9BM,EAAAA,EAAAA,IAAeC,KAAM,QAASN,GAER,MAAlBC,IAEAI,EAAAA,EAAAA,IAAeC,KAAM,WAAY,OACjCD,EAAAA,EAAAA,IAAeC,KAAM,OAAQ,OAEK,kBAApBL,IAEdI,EAAAA,EAAAA,IAAeC,KAAM,WAAY,OACjCD,EAAAA,EAAAA,IAAeC,KAAM,OAAQL,MAI7BI,EAAAA,EAAAA,IAAeC,KAAM,WAAYL,IACjCI,EAAAA,EAAAA,IAAeC,KAAM,OAAQL,EAAeS,MAEpD,CAsKC,OAtKA,iCAED,WAOI,GAAIJ,KAAKN,OAAS,IAAO,MAAM,IAAIE,MAAM,oBAEzC,OAAOtB,GAAYG,EAAAA,EAAAA,IAAO,CACD,MAAnBuB,KAAKX,WAAsB,aAAc,cAC3ChB,EAAAA,EAAAA,IAAQ2B,KAAKN,OACbM,KAAKT,mBACLnB,EAAAA,EAAAA,KAAWC,EAAAA,EAAAA,IAAQ2B,KAAKP,OAAQ,GAChCO,KAAKR,UACgB,MAAnBQ,KAAKX,YAAsBZ,EAAAA,EAAAA,IAAO,CAAE,OAAQuB,KAAKX,aAAeW,KAAKV,YAE/E,GAAC,oBAED,WACI,OAAO,IAAIH,EAAOF,EAAmB,KAAMe,KAAKV,UAAWU,KAAKT,kBAAmBS,KAAKR,UAAWQ,KAAKP,MAAOO,KAAKN,MAAOM,KAAKI,KACpI,GAAC,qBAEO,SAAQX,GACZ,GAAIA,EAAQ,WAAc,MAAM,IAAIG,MAAM,mBAAqBS,OAAOZ,IAGtE,IAAIW,EAAOJ,KAAKI,KACZA,IAAQA,GAAQ,KAAe,WAARX,IAE3B,IAAMlB,EAAO,IAAI+B,WAAW,IAE5B,GAAIb,EAAQ1B,EAAa,CACrB,IAAKiC,KAAKX,WACN,MAAM,IAAIO,MAAM,wCAIpBrB,EAAKgC,KAAIC,EAAAA,EAAAA,IAASR,KAAKX,YAAa,GAGhCe,IAAQA,GAAQ,I,MAIpB7B,EAAKgC,KAAIC,EAAAA,EAAAA,IAASR,KAAKV,YAI3B,IAAK,IAAImB,EAAI,GAAIA,GAAK,EAAGA,GAAK,EAAKlC,EAAK,IAAMkC,GAAK,IAAQhB,GAAU,GAAKgB,EAAM,IAEhF,IAAMC,GAAIF,EAAAA,EAAAA,KAASG,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,OAA2BZ,KAAKR,UAAWjB,IACpEsC,EAAKH,EAAEI,MAAM,EAAG,IAChBC,EAAKL,EAAEI,MAAM,IAGfE,EAAa,KAGbC,EAAa,KAEbjB,KAAKX,WACL2B,EAAK9C,EAAQN,EAAAA,GAAAA,KAAeiD,GAAIK,IAAIlB,KAAKX,YAAY8B,IAAIxD,IAGzDsD,EADW,IAAInB,EAAAA,IAAWzB,EAAAA,EAAAA,IAAQwC,IAC1BO,UAAUpB,KAAKV,WAG3B,IAAIK,EAAoCS,EAElCiB,EAAerB,KAAKsB,SAS1B,OARID,IACA1B,EAAiB4B,OAAOC,OAAO,CAC3BC,OAAQJ,EAAYI,OACpBrB,KAAMA,EACNsB,OAASL,EAAYK,QAAU,QAIhC,IAAIvC,EAAOF,EAAmB+B,EAAIC,EAAIjB,KAAK2B,YAAazD,EAAQ6C,GAAKtB,EAAOO,KAAKN,MAAQ,EAAGC,EACvG,GAAC,wBAED,SAAWS,GACP,IAAMwB,EAAaxB,EAAKyB,MAAM,KAE9B,GAA0B,IAAtBD,EAAWE,QAAmC,MAAlBF,EAAW,IAA6B,IAAf5B,KAAKN,MAC1D,MAAM,IAAIE,MAAM,kBAAoBQ,GAGlB,MAAlBwB,EAAW,IAAcA,EAAWG,QAGxC,IADA,IAAIC,EAAiBhC,KACZS,EAAI,EAAGA,EAAImB,EAAWE,OAAQrB,IAAK,CACxC,IAAMwB,EAAYL,EAAWnB,GAC7B,GAAIwB,EAAUC,MAAM,aAAc,CAC9B,IAAMzC,EAAQ0C,SAASF,EAAUG,UAAU,EAAGH,EAAUH,OAAS,IACjE,GAAIrC,GAAS1B,EAAe,MAAM,IAAI6B,MAAM,wBAA0BqC,GACtED,EAASA,EAAOK,QAAQtE,EAAc0B,E,KACnC,KAAIwC,EAAUC,MAAM,YAKvB,MAAM,IAAItC,MAAM,4BAA8BqC,GAJ9C,IAAMxC,EAAQ0C,SAASF,GACvB,GAAIxC,GAAS1B,EAAe,MAAM,IAAI6B,MAAM,wBAA0BqC,GACtED,EAASA,EAAOK,QAAQ5C,E,EAMhC,OAAOuC,CACX,IAAC,wBAGD,SAAiBM,EAAiBhB,GAC9B,IAAMiB,GAAwB/B,EAAAA,EAAAA,IAAS8B,GACvC,GAAIC,EAAUT,OAAS,IAAMS,EAAUT,OAAS,GAAM,MAAM,IAAIlC,MAAM,gBAEtE,IAAMc,GAAgBF,EAAAA,EAAAA,KAASG,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,OAA2B/C,EAAc0E,IAEpF,OAAO,IAAIpD,EAAOF,EAAmBf,EAAQwC,EAAEI,MAAM,EAAG,KAAM,KAAM,aAAc5C,EAAQwC,EAAEI,MAAM,KAAM,EAAG,EAAGQ,EAClH,GAAC,0BAED,SAAoBA,EAAkBkB,EAAmB3D,GAQrD,OAFAyC,EAAWmB,EAAkBC,EAAkBpB,EAH/CzC,EAAWD,EAAYC,IAG6CA,GAE7DM,EAAOwD,UAAUC,EAAetB,EAAUkB,GAAW,CACxDf,OAAQH,EACRlB,KAAM,IACNsB,OAAQ7C,EAAS6C,QAEzB,GAAC,sBAED,SAAgBY,GACZ,OAAOnD,EAAOwD,UAAUL,EAAM,KAClC,GAAC,6BAED,SAAuBO,GACnB,IAAMC,EAAQtE,EAAAA,GAAAA,OAAcqE,GAEP,KAAjBC,EAAMhB,QAAiBxD,EAAYwE,EAAMhC,MAAM,EAAG,OAAS+B,GAC3DpF,EAAOuB,mBAAmB,uBAAwB,cAAe,cAGrE,IAAMU,EAAQoD,EAAM,GACdvD,GAAoBlB,EAAAA,EAAAA,IAAQyE,EAAMhC,MAAM,EAAG,IAC3CrB,EAAQ0C,UAAS9D,EAAAA,EAAAA,IAAQyE,EAAMhC,MAAM,EAAG,KAAKsB,UAAU,GAAI,IAC3D5C,GAAYnB,EAAAA,EAAAA,IAAQyE,EAAMhC,MAAM,GAAI,KACpCiC,EAAMD,EAAMhC,MAAM,GAAI,IAE5B,QAAQzC,EAAAA,EAAAA,IAAQyE,EAAMhC,MAAM,EAAG,KAE3B,IAAK,aAAc,IAAK,aACpB,OAAO,IAAI3B,EAAOF,EAAmB,MAAMZ,EAAAA,EAAAA,IAAQ0E,GAAMxD,EAAmBC,EAAWC,EAAOC,EAAO,MAGzG,IAAK,aAAc,IAAK,cACpB,GAAe,IAAXqD,EAAI,GAAY,MACpB,OAAO,IAAI5D,EAAOF,GAAmBZ,EAAAA,EAAAA,IAAQ0E,EAAIjC,MAAM,IAAK,KAAMvB,EAAmBC,EAAWC,EAAOC,EAAO,MAGtH,OAAOjC,EAAOuB,mBAAmB,uBAAwB,cAAe,aAC5E,KAAC,EAtOc,GAyOb,SAAU4D,EAAetB,EAAkBkB,GACxCA,IAAYA,EAAW,IAE5B,IAAMQ,GAAOlF,EAAAA,EAAAA,IAAY,WAAa0E,EAAUS,EAAAA,GAAAA,MAEhD,OAAOC,EAAAA,EAAAA,IAAOpF,EAAAA,EAAAA,IAAYwD,EAAU2B,EAAAA,GAAAA,MAAgCD,EAAM,KAAM,GAAI,SACxF,CAEM,SAAUN,EAAkBpB,EAAkBzC,GAChDA,EAAWD,EAAYC,GAEvBpB,EAAO0F,iBAEP,IAAMpE,EAAQF,EAASgD,MAAMP,GAC7B,GAAKvC,EAAM+C,OAAS,IAAO,EAAK,MAAM,IAAIlC,MAAM,oBAKhD,IAHA,IAAMwD,GAAU5C,EAAAA,EAAAA,IAAS,IAAIF,WAAW+C,KAAKC,KAAK,GAAKvE,EAAM+C,OAAS,KAElEyB,EAAS,EACJ9C,EAAI,EAAGA,EAAI1B,EAAM+C,OAAQrB,IAAK,CACnC,IAAIhB,EAAQZ,EAAS2E,aAAazE,EAAM0B,GAAGgD,UAAU,SACrD,IAAe,IAAXhE,EAAgB,MAAM,IAAIG,MAAM,oBAEpC,IAAK,IAAI8D,EAAM,EAAGA,EAAM,GAAIA,IACpBjE,EAAS,GAAM,GAAKiE,IACpBN,EAAQG,GAAU,IAAO,GAAM,EAAKA,EAAS,GAEjDA,G,CAIR,IAAMI,EAAc,GAAK5E,EAAM+C,OAAS,EAGlC8B,EAAe5F,EADAe,EAAM+C,OAAS,GAKpC,KAFiBtB,EAAAA,EAAAA,KAAS7B,EAAAA,EAAAA,IAAOyE,EAAQtC,MAAM,EAAG6C,EAAc,KAAK,GAAKC,MAExDR,EAAQA,EAAQtB,OAAS,GAAK8B,GAC5C,MAAM,IAAIhE,MAAM,oBAGpB,OAAOvB,EAAAA,EAAAA,IAAQ+E,EAAQtC,MAAM,EAAG6C,EAAc,GAClD,CAEM,SAAUlB,EAAkBW,EAAoBvE,GAKlD,GAJAA,EAAWD,EAAYC,IAEvBuE,GAAU5C,EAAAA,EAAAA,IAAS4C,IAENtB,OAAS,IAAO,GAAKsB,EAAQtB,OAAS,IAAMsB,EAAQtB,OAAS,GACtE,MAAM,IAAIlC,MAAM,mBAMpB,IAHA,IAAMiE,EAAyB,CAAE,GAE7BC,EAAgB,GACXrD,EAAI,EAAGA,EAAI2C,EAAQtB,OAAQrB,IAG5BqD,EAAgB,GAChBD,EAAQA,EAAQ/B,OAAS,KAAO,EAChC+B,EAAQA,EAAQ/B,OAAS,IAAMsB,EAAQ3C,GAEvCqD,GAAiB,IAIjBD,EAAQA,EAAQ/B,OAAS,KAAOgC,EAChCD,EAAQA,EAAQ/B,OAAS,IAAMsB,EAAQ3C,IAAO,EAAIqD,EAGlDD,EAAQE,KAAKX,EAAQ3C,IAtVtB,GAsVwC,EAAIqD,GAtV/B,GAwVZA,GAAiB,GAKzB,IAAME,EAAeZ,EAAQtB,OAAS,EAChCmC,GAAWzD,EAAAA,EAAAA,KAAS7B,EAAAA,EAAAA,IAAOyE,IAAU,GAAKpF,EAAagG,GAM7D,OAHAH,EAAQA,EAAQ/B,OAAS,KAAOkC,EAChCH,EAAQA,EAAQ/B,OAAS,IAAOmC,GAAa,EAAID,EAE1CnF,EAASqF,KAAKL,EAAQM,KAAI,SAAC1E,GAAK,OAAgBZ,EAAUuF,QAAQ3E,EAAM,IACnF,CAEM,SAAU4E,EAAgB/C,EAAkBzC,GAC9C,IAEI,OADA6D,EAAkBpB,EAAUzC,IACrB,CACM,CAAf,MAAOyF,GAAQ,CACjB,OAAO,CACX,CAEM,SAAUC,EAAe9E,GAI3B,OAHsB,kBAAXA,GAAuBA,EAAQ,GAAKA,GAAS1B,GAAe0B,EAAQ,IAC3EhC,EAAOuB,mBAAmB,wBAAyB,QAASS,GAEzD,aAAP,OAAqBA,EAAM,QAC/B,C,kFEpZM,SAAUyD,EAAOV,EAAqBQ,EAAiBwB,EAAoBC,EAAgBC,GAG7F,IAAIC,EAFJnC,GAAWhC,EAAAA,EAAAA,IAASgC,GACpBQ,GAAOxC,EAAAA,EAAAA,IAASwC,GAEhB,IAMI4B,EACAC,EAPAC,EAAI,EACFC,EAAK,IAAIzE,WAAWmE,GACpBO,EAAS,IAAI1E,WAAW0C,EAAKlB,OAAS,GAC5CkD,EAAOzE,IAAIyC,GAMX,IAAK,IAAIvC,EAAI,EAAGA,GAAKqE,EAAGrE,IAAK,CAEzBuE,EAAOhC,EAAKlB,QAAWrB,GAAK,GAAM,IAClCuE,EAAOhC,EAAKlB,OAAS,GAAMrB,GAAK,GAAM,IACtCuE,EAAOhC,EAAKlB,OAAS,GAAMrB,GAAK,EAAK,IACrCuE,EAAOhC,EAAKlB,OAAS,GAAS,IAAJrB,EAG1B,IAAIwE,GAAIzE,EAAAA,EAAAA,KAASG,EAAAA,EAAAA,IAAgC+D,EAAelC,EAAUwC,IAErEL,IACDA,EAAOM,EAAEnD,OACT+C,EAAI,IAAIvE,WAAWqE,GAEnBC,EAAIH,IADJK,EAAIzB,KAAKC,KAAKmB,EAASE,IACL,GAAKA,GAI3BE,EAAEtE,IAAI0E,GAGN,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAYU,IAAK,CAEjCD,GAAIzE,EAAAA,EAAAA,KAASG,EAAAA,EAAAA,IAAgC+D,EAAelC,EAAUyC,IACtE,IAAK,IAAIE,EAAI,EAAGA,EAAIR,EAAMQ,IAAKN,EAAEM,IAAMF,EAAEE,E,CAI7C,IAAMC,GAAW3E,EAAI,GAAKkE,EACpBU,EAAO5E,IAAMqE,EAAIF,EAAID,EAE3BI,EAAGxE,KAAIC,EAAAA,EAAAA,IAASqE,GAAG/D,MAAM,EAAGuE,GAAMD,E,CAGtC,OAAO/G,EAAAA,EAAAA,IAAQ0G,EACnB,C,kFC/CMtH,EAAS,IAAIC,EAAAA,GCNI,gBDmBvB,IAAM4H,EAPN,WACE,GAAoB,qBAATC,KAAwB,OAAOA,KAC1C,GAAsB,qBAAXC,OAA0B,OAAOA,OAC5C,GAAsB,qBAAXC,EAAAA,EAA0B,OAAOA,EAAAA,EAC5C,MAAM,IAAI7F,MAAM,iCAClB,CAEkB8F,GAEdC,EAAcL,EAAUK,QAAUL,EAAUM,SAc1C,SAAUC,EAAY/D,IACpBA,GAAU,GAAKA,EAAS,MAASA,EAAS,GAAMA,GAAUA,IAC1DrE,EAAOuB,mBAAmB,iBAAkB,SAAU8C,GAG1D,IAAME,EAAS,IAAI1B,WAAWwB,GAE9B,OADA6D,EAAOG,gBAAgB9D,IAChBxB,EAAAA,EAAAA,IAASwB,EACpB,CArBK2D,GAAWA,EAAOG,kBAEnBrI,EAAOsI,KAAK,gDAEZJ,EAAS,CACLG,gBAAiB,SAASE,GACtB,OAAOvI,EAAOwI,WAAW,oCAAqCvI,EAAAA,GAAAA,OAAAA,sBAAqC,CAC/FwI,UAAW,0BAEnB,G,mHErBKzI,EAAS,IAAIC,EAAAA,GCVH,mBDYDyI,EAAQ,WAG1B,WAAYzE,IAAc,eACtBjE,EAAO2I,cAAc,gBAAD,0BAAaD,IACjCpG,EAAAA,EAAAA,IAAeC,KAAM,SAAU0B,EACnC,CAwCC,OAnCD,6BACA,SAAMJ,GACF,OAAOA,EAAS+E,cAAcxE,MAAM,MACxC,GAEA,kBACA,SAAK9C,GACD,OAAOA,EAAMmF,KAAK,IACtB,IAAC,oBAED,SAAarF,GAET,IADA,IAAME,EAAQ,GACL0B,EAAI,EAAGA,EAAI,KAAMA,IAAK,CAC3B,IAAM6F,EAAOzH,EAASuF,QAAQ3D,GAE9B,GAAIA,IAAM5B,EAAS2E,aAAa8C,GAAS,MAAO,KAChDvH,EAAMgF,KAAKuC,E,CAEf,OAAOC,EAAAA,EAAAA,IAAGxH,EAAMmF,KAAK,MAAQ,KACjC,GAAC,sBAED,SAAgBsC,EAAgBC,GACvBA,IAAQA,EAAOD,EAAK9E,OAa7B,KAAC,EA9CyB,E,mHEL1B7C,EAA0B,KAG9B,SAAS6H,EAAUF,GACf,GAAgB,MAAZ3H,IACJA,EAPU,+zVAOO8H,QAAQ,WAAY,OAAON,cAAcjE,UAAU,GAAGP,MAAM,KAIhD,uEAAzBsE,EAAAA,EAAAA,MAAeK,IAEf,MADA3H,EAAW,KACL,IAAIe,MAAM,yCAExB,CAAC,IAkBKgH,EAAS,IAhBF,0CACT,+CACU,KACV,CAUC,OAVA,+BAED,SAAQnH,GAEJ,OADAiH,EAAU1G,MACHnB,EAASY,EACpB,GAAC,0BAED,SAAa6G,GAET,OADAI,EAAU1G,MACHnB,EAASgI,QAAQP,EAC5B,KAAC,EAbQ,CAAQH,EAAAA,IAiBrBA,EAAAA,EAAAA,SAAkBS,GC5BX,IAAM9H,EAA8C,CACzDgI,GAAIA,E","sources":["../node_modules/@ethersproject/hdnode/src.ts/index.ts","../node_modules/@ethersproject/hdnode/src.ts/_version.ts","../node_modules/@ethersproject/pbkdf2/src.ts/browser-pbkdf2.ts","../node_modules/@ethersproject/random/src.ts/browser-random.ts","../node_modules/@ethersproject/random/src.ts/_version.ts","../node_modules/@ethersproject/wordlists/src.ts/wordlist.ts","../node_modules/@ethersproject/wordlists/src.ts/_version.ts","../node_modules/@ethersproject/wordlists/src.ts/lang-en.ts","../node_modules/@ethersproject/wordlists/src.ts/browser-wordlists.ts"],"sourcesContent":["\"use strict\";\n\n// See: https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n// See: https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\n\n\nimport { ExternallyOwnedAccount } from \"@ethersproject/abstract-signer\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { arrayify, BytesLike, concat, hexDataSlice, hexZeroPad, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from \"@ethersproject/strings\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { Wordlist, wordlists } from \"@ethersproject/wordlists\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst N = BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n\n\n// \"Bitcoin seed\"\nconst MasterSecret = toUtf8Bytes(\"Bitcoin seed\");\n\nconst HardenedBit = 0x80000000;\n\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits: number): number {\n   return ((1 << bits) - 1) << (8 - bits);\n}\n\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits: number): number {\n   return (1 << bits) - 1;\n}\n\nfunction bytes32(value: BigNumber | Uint8Array): string {\n    return hexZeroPad(hexlify(value), 32);\n}\n\nfunction base58check(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nfunction getWordlist(wordlist: string | Wordlist): Wordlist {\n    if (wordlist == null) {\n        return wordlists[\"en\"];\n    }\n\n    if (typeof(wordlist) === \"string\") {\n        const words = wordlists[wordlist];\n        if (words == null) {\n            logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n        }\n        return words;\n    }\n\n    return wordlist;\n}\n\nconst _constructorGuard: any = {};\n\nexport const defaultPath = \"m/44'/60'/0'/0/0\";\n\nexport interface Mnemonic {\n    readonly phrase: string;\n    readonly path: string;\n    readonly locale: string;\n};\n\nexport class HDNode implements ExternallyOwnedAccount {\n    readonly privateKey: string;\n    readonly publicKey: string;\n\n    readonly fingerprint: string;\n    readonly parentFingerprint: string;\n\n    readonly address: string;\n\n    readonly mnemonic?: Mnemonic;\n    readonly path: string;\n\n    readonly chainCode: string;\n\n    readonly index: number;\n    readonly depth: number;\n\n    /**\n     *  This constructor should not be called directly.\n     *\n     *  Please use:\n     *   - fromMnemonic\n     *   - fromSeed\n     */\n    constructor(constructorGuard: any, privateKey: string, publicKey: string, parentFingerprint: string, chainCode: string, index: number, depth: number, mnemonicOrPath: Mnemonic | string) {\n        /* istanbul ignore if */\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"HDNode constructor cannot be called directly\");\n        }\n\n        if (privateKey) {\n            const signingKey = new SigningKey(privateKey);\n            defineReadOnly(this, \"privateKey\", signingKey.privateKey);\n            defineReadOnly(this, \"publicKey\", signingKey.compressedPublicKey);\n        } else {\n            defineReadOnly(this, \"privateKey\", null);\n            defineReadOnly(this, \"publicKey\", hexlify(publicKey));\n        }\n\n        defineReadOnly(this, \"parentFingerprint\", parentFingerprint);\n        defineReadOnly(this, \"fingerprint\", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));\n\n        defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n\n        defineReadOnly(this, \"chainCode\", chainCode);\n\n        defineReadOnly(this, \"index\", index);\n        defineReadOnly(this, \"depth\", depth);\n\n        if (mnemonicOrPath == null) {\n            // From a source that does not preserve the path (e.g. extended keys)\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", null);\n\n        } else if (typeof(mnemonicOrPath) === \"string\") {\n            // From a source that does not preserve the mnemonic (e.g. neutered)\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", mnemonicOrPath);\n\n        } else {\n            // From a fully qualified source\n            defineReadOnly(this, \"mnemonic\", mnemonicOrPath);\n            defineReadOnly(this, \"path\", mnemonicOrPath.path);\n        }\n    }\n\n    get extendedKey(): string {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n\n        if (this.depth >= 256) { throw new Error(\"Depth too large!\"); }\n\n        return base58check(concat([\n            ((this.privateKey != null) ? \"0x0488ADE4\": \"0x0488B21E\"),\n            hexlify(this.depth),\n            this.parentFingerprint,\n            hexZeroPad(hexlify(this.index), 4),\n            this.chainCode,\n            ((this.privateKey != null) ? concat([ \"0x00\", this.privateKey ]): this.publicKey),\n        ]));\n    }\n\n    neuter(): HDNode {\n        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n    }\n\n    private _derive(index: number): HDNode {\n        if (index > 0xffffffff) { throw new Error(\"invalid index - \" + String(index)); }\n\n        // Base path\n        let path = this.path;\n        if (path) { path += \"/\" + (index & ~HardenedBit); }\n\n        const data = new Uint8Array(37);\n\n        if (index & HardenedBit) {\n            if (!this.privateKey) {\n                throw new Error(\"cannot derive child of neutered node\");\n            }\n\n            // Data = 0x00 || ser_256(k_par)\n            data.set(arrayify(this.privateKey), 1);\n\n            // Hardened path\n            if (path) { path += \"'\"; }\n\n        } else {\n            // Data = ser_p(point(k_par))\n            data.set(arrayify(this.publicKey));\n        }\n\n        // Data += ser_32(i)\n        for (let i = 24; i >= 0; i -= 8) { data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff); }\n\n        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));\n        const IL = I.slice(0, 32);\n        const IR = I.slice(32);\n\n        // The private key\n        let ki: string = null\n\n        // The public key\n        let Ki: string = null;\n\n        if (this.privateKey) {\n            ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));\n        } else {\n            const ek = new SigningKey(hexlify(IL));\n            Ki = ek._addPoint(this.publicKey);\n        }\n\n        let mnemonicOrPath: Mnemonic | string = path;\n\n        const srcMnemonic =  this.mnemonic;\n        if (srcMnemonic) {\n            mnemonicOrPath = Object.freeze({\n                phrase: srcMnemonic.phrase,\n                path: path,\n                locale: (srcMnemonic.locale || \"en\")\n            });\n        }\n\n        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n    }\n\n    derivePath(path: string): HDNode {\n        const components = path.split(\"/\");\n\n        if (components.length === 0 || (components[0] === \"m\" && this.depth !== 0)) {\n            throw new Error(\"invalid path - \" + path);\n        }\n\n        if (components[0] === \"m\") { components.shift(); }\n\n        let result: HDNode = this;\n        for (let i = 0; i < components.length; i++) {\n            const component = components[i];\n            if (component.match(/^[0-9]+'$/)) {\n                const index = parseInt(component.substring(0, component.length - 1));\n                if (index >= HardenedBit) { throw new Error(\"invalid path index - \" + component); }\n                result = result._derive(HardenedBit + index);\n            } else if (component.match(/^[0-9]+$/)) {\n                const index = parseInt(component);\n                if (index >= HardenedBit) { throw new Error(\"invalid path index - \" + component); }\n                result = result._derive(index);\n            } else {\n                throw new Error(\"invalid path component - \" + component);\n            }\n        }\n\n        return result;\n    }\n\n\n    static _fromSeed(seed: BytesLike, mnemonic: Mnemonic): HDNode {\n        const seedArray: Uint8Array = arrayify(seed);\n        if (seedArray.length < 16 || seedArray.length > 64) { throw new Error(\"invalid seed\"); }\n\n        const I: Uint8Array = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));\n\n        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n    }\n\n    static fromMnemonic(mnemonic: string, password?: string, wordlist?: string | Wordlist): HDNode {\n\n        // If a locale name was passed in, find the associated wordlist\n        wordlist = getWordlist(wordlist);\n\n        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n\n        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n            phrase: mnemonic,\n            path: \"m\",\n            locale: wordlist.locale\n        });\n    }\n\n    static fromSeed(seed: BytesLike): HDNode {\n        return HDNode._fromSeed(seed, null);\n    }\n\n    static fromExtendedKey(extendedKey: string): HDNode {\n        const bytes = Base58.decode(extendedKey);\n\n        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n            logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n        }\n\n        const depth = bytes[4];\n        const parentFingerprint = hexlify(bytes.slice(5, 9));\n        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = hexlify(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n\n        switch (hexlify(bytes.slice(0, 4))) {\n            // Public Key\n            case \"0x0488b21e\": case \"0x043587cf\":\n                return new HDNode(_constructorGuard, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);\n\n            // Private Key\n            case \"0x0488ade4\": case \"0x04358394 \":\n                if (key[0] !== 0) { break; }\n                return new HDNode(_constructorGuard, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n        }\n\n        return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    }\n}\n\nexport function mnemonicToSeed(mnemonic: string, password?: string): string {\n    if (!password) { password = \"\"; }\n\n    const salt = toUtf8Bytes(\"mnemonic\" + password, UnicodeNormalizationForm.NFKD);\n\n    return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\n\nexport function mnemonicToEntropy(mnemonic: string, wordlist?: string | Wordlist): string {\n    wordlist = getWordlist(wordlist);\n\n    logger.checkNormalize();\n\n    const words = wordlist.split(mnemonic);\n    if ((words.length % 3) !== 0) { throw new Error(\"invalid mnemonic\"); }\n\n    const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n\n    let offset = 0;\n    for (let i = 0; i < words.length; i++) {\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        if (index === -1) { throw new Error(\"invalid mnemonic\"); }\n\n        for (let bit = 0; bit < 11; bit++) {\n            if (index & (1 << (10 - bit))) {\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\n            }\n            offset++;\n        }\n    }\n\n    const entropyBits = 32 * words.length / 3;\n\n    const checksumBits = words.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n\n    const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\n    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n        throw new Error(\"invalid checksum\");\n    }\n\n    return hexlify(entropy.slice(0, entropyBits / 8));\n}\n\nexport function entropyToMnemonic(entropy: BytesLike, wordlist?: string | Wordlist): string {\n    wordlist = getWordlist(wordlist);\n\n    entropy = arrayify(entropy);\n\n    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {\n        throw new Error(\"invalid entropy\");\n    }\n\n    const indices: Array<number> = [ 0 ];\n\n    let remainingBits = 11;\n    for (let i = 0; i < entropy.length; i++) {\n\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n\n            remainingBits -= 8;\n\n        // This byte will complete an 11-bit index\n        } else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n\n            remainingBits += 3;\n        }\n    }\n\n    // Compute the checksum bits\n    const checksumBits = entropy.length / 4;\n    const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\n\n    return wordlist.join(indices.map((index) => (<Wordlist>wordlist).getWord(index)));\n}\n\nexport function isValidMnemonic(mnemonic: string, wordlist?: Wordlist): boolean {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n        return true;\n    } catch (error) { }\n    return false;\n}\n\nexport function getAccountPath(index: number): string {\n    if (typeof(index) !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n        logger.throwArgumentError(\"invalid account index\", \"index\", index);\n    }\n    return `m/44'/60'/${ index }'/0/0`;\n}\n","export const version = \"hdnode/5.7.0\";\n","\"use strict\";\n\nimport { arrayify, BytesLike, hexlify } from \"@ethersproject/bytes\";\nimport { computeHmac, SupportedAlgorithm } from \"@ethersproject/sha2\";\n\nexport function pbkdf2(password: BytesLike, salt: BytesLike, iterations: number, keylen: number, hashAlgorithm: string): string {\n    password = arrayify(password);\n    salt = arrayify(salt);\n    let hLen;\n    let l = 1;\n    const DK = new Uint8Array(keylen)\n    const block1 = new Uint8Array(salt.length + 4)\n    block1.set(salt);\n    //salt.copy(block1, 0, 0, salt.length)\n\n    let r: number;\n    let T: Uint8Array;\n\n    for (let i = 1; i <= l; i++) {\n        //block1.writeUInt32BE(i, salt.length)\n        block1[salt.length] = (i >> 24) & 0xff;\n        block1[salt.length + 1] = (i >> 16) & 0xff;\n        block1[salt.length + 2] = (i >> 8) & 0xff;\n        block1[salt.length + 3] = i & 0xff;\n\n        //let U = createHmac(password).update(block1).digest();\n        let U = arrayify(computeHmac(<SupportedAlgorithm>hashAlgorithm, password, block1));\n\n        if (!hLen) {\n            hLen = U.length\n            T = new Uint8Array(hLen)\n            l = Math.ceil(keylen / hLen)\n            r = keylen - (l - 1) * hLen\n        }\n\n        //U.copy(T, 0, 0, hLen)\n        T.set(U);\n\n\n        for (let j = 1; j < iterations; j++) {\n            //U = createHmac(password).update(U).digest();\n            U = arrayify(computeHmac(<SupportedAlgorithm>hashAlgorithm, password, U));\n            for (let k = 0; k < hLen; k++) T[k] ^= U[k]\n        }\n\n\n        const destPos = (i - 1) * hLen\n        const len = (i === l ? r : hLen)\n        //T.copy(DK, destPos, 0, len)\n        DK.set(arrayify(T).slice(0, len), destPos);\n    }\n\n    return hexlify(DK)\n}\n\n","\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\nfunction getGlobal(): any {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n\nconst anyGlobal = getGlobal();\n\nlet crypto: any = anyGlobal.crypto || anyGlobal.msCrypto;\nif (!crypto || !crypto.getRandomValues) {\n\n    logger.warn(\"WARNING: Missing strong random number source\");\n\n    crypto = {\n        getRandomValues: function(buffer: Uint8Array): Uint8Array {\n            return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"crypto.getRandomValues\"\n            });\n        }\n    };\n}\n\nexport function randomBytes(length: number): Uint8Array {\n    if (length <= 0 || length > 1024 || (length % 1) || length != length) {\n        logger.throwArgumentError(\"invalid length\", \"length\", length);\n    }\n\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return arrayify(result);\n};\n","export const version = \"random/5.7.0\";\n","\"use strict\";\n\n// This gets overridden by rollup\nconst exportWordlist = false;\n\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport const logger = new Logger(version);\n\nexport abstract class Wordlist {\n    readonly locale: string;\n\n    constructor(locale: string) {\n        logger.checkAbstract(new.target, Wordlist);\n        defineReadOnly(this, \"locale\", locale);\n    }\n\n    abstract getWord(index: number): string;\n    abstract getWordIndex(word: string): number;\n\n    // Subclasses may override this\n    split(mnemonic: string): Array<string> {\n        return mnemonic.toLowerCase().split(/ +/g)\n    }\n\n    // Subclasses may override this\n    join(words: Array<string>): string {\n        return words.join(\" \");\n    }\n\n    static check(wordlist: Wordlist): string {\n        const words = [];\n        for (let i = 0; i < 2048; i++) {\n            const word = wordlist.getWord(i);\n            /* istanbul ignore if */\n            if (i !== wordlist.getWordIndex(word)) { return \"0x\"; }\n            words.push(word);\n        }\n        return id(words.join(\"\\n\") + \"\\n\");\n    }\n\n    static register(lang: Wordlist, name?: string): void {\n        if (!name) { name = lang.locale; }\n\n        /* istanbul ignore if */\n        if (exportWordlist) {\n            try {\n                const anyGlobal = (window as any)\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n                    if (!anyGlobal._ethers.wordlists[name]) {\n                         defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n                    }\n                }\n            } catch (error) { }\n        }\n    }\n\n}\n\n","export const version = \"wordlists/5.7.0\";\n","\"use strict\";\n\nimport { Wordlist } from \"./wordlist\";\n\n\nconst words = \"AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo\";\n\nlet wordlist: Array<string> = null;\n\n\nfunction loadWords(lang: Wordlist): void {\n    if (wordlist != null) { return; }\n    wordlist = words.replace(/([A-Z])/g, \" $1\").toLowerCase().substring(1).split(\" \");\n\n    // Verify the computed list matches the official list\n    /* istanbul ignore if */\n    if (Wordlist.check(lang) !== \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\") {\n        wordlist = null;\n        throw new Error(\"BIP39 Wordlist for en (English) FAILED\");\n    }\n}\n\nclass LangEn extends Wordlist {\n    constructor() {\n        super(\"en\");\n    }\n\n    getWord(index: number): string {\n        loadWords(this);\n        return wordlist[index];\n    }\n\n    getWordIndex(word: string): number {\n        loadWords(this);\n        return wordlist.indexOf(word);\n    }\n}\n\nconst langEn = new LangEn();\nWordlist.register(langEn);\n\nexport { langEn };\n","\"use strict\";\n\n// Wordlists\n// See: https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md\n\n// Browser; only include English by default\n\nimport { Wordlist } from \"./wordlist\";\n\nimport { langEn as en } from \"./lang-en\";\n\nexport const wordlists: { [ locale: string ]: Wordlist } = {\n  en: en\n}\n"],"names":["logger","Logger","N","BigNumber","MasterSecret","toUtf8Bytes","HardenedBit","getUpperMask","bits","bytes32","value","hexZeroPad","hexlify","base58check","data","Base58","concat","hexDataSlice","sha256","getWordlist","wordlist","wordlists","words","throwArgumentError","_constructorGuard","defaultPath","HDNode","constructorGuard","privateKey","publicKey","parentFingerprint","chainCode","index","depth","mnemonicOrPath","Error","signingKey","SigningKey","defineReadOnly","this","compressedPublicKey","ripemd160","computeAddress","path","String","Uint8Array","set","arrayify","i","I","computeHmac","SupportedAlgorithm","IL","slice","IR","ki","Ki","add","mod","_addPoint","srcMnemonic","mnemonic","Object","freeze","phrase","locale","fingerprint","components","split","length","shift","result","component","match","parseInt","substring","_derive","seed","seedArray","password","entropyToMnemonic","mnemonicToEntropy","_fromSeed","mnemonicToSeed","extendedKey","bytes","key","salt","UnicodeNormalizationForm","pbkdf2","checkNormalize","entropy","Math","ceil","offset","getWordIndex","normalize","bit","entropyBits","checksumMask","indices","remainingBits","push","checksumBits","checksum","join","map","getWord","isValidMnemonic","error","getAccountPath","iterations","keylen","hashAlgorithm","hLen","r","T","l","DK","block1","U","j","k","destPos","len","anyGlobal","self","window","global","getGlobal","crypto","msCrypto","randomBytes","getRandomValues","warn","buffer","throwError","operation","Wordlist","checkAbstract","toLowerCase","word","id","lang","name","loadWords","replace","langEn","indexOf","en"],"sourceRoot":""}