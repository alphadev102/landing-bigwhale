{"version":3,"file":"static/js/2368.5dfb6b16.chunk.js","mappings":";uIAoIa,kNAEb,eAYA,SAAgBA,EAAgBC,GAC9B,KAAMA,aAAaC,YACjB,MAAM,IAAIC,UAAU,yBAExB,CAKA,SAAgBC,EAAmBH,GAEjC,OADAD,EAAgBC,GACTI,EAAAA,OAAOC,KAAKL,EAAEM,OAAQN,EAAEO,WAAYP,EAAEQ,OAC/C,CAEA,IAgBsBC,EAAM,WAK1B,WAAYC,EAAcC,GACxB,GADyC,WACpCC,OAAOC,UAAUH,GACpB,MAAM,IAAIR,UAAU,2BAYtB,KAAKQ,KAAOA,EAUZ,KAAKC,SAAWA,CAClB,CA+HC,OA7HD,wCAeA,WACE,MAAO,EACT,GAwCA,qBAgBA,SAAQX,EAAgBc,GACtB,GAAI,EAAI,KAAKJ,KACX,MAAM,IAAIK,WAAW,sBAEvB,OAAO,KAAKL,IACd,GAEA,uBAgBA,SAAUC,GACR,IAAMK,EAAKC,OAAOC,OAAO,KAAKC,YAAYC,WAG1C,OAFAH,OAAOI,OAAOL,EAAI,MAClBA,EAAGL,SAAWA,EACPK,CACT,GAEA,uBAoBA,SAAUM,GAEV,KAAC,EA7JyB,GAqK5B,SAAgBC,EAAiBC,EAAcC,GAC7C,OAAIA,EAAGd,SACEa,EAAO,IAAMC,EAAGd,SAAW,IAE7Ba,CACT,CA6DA,IAqBsBE,EAAe,oFAclC,OAdkC,0BAYnC,WACE,MAAM,IAAIC,MAAM,6BAClB,KAAC,EAdkC,CAAQlB,GAiB7C,IAeamB,EAAY,8BAGvB,aAA8C,MAAlCC,EAAW,uDAAG,EAAGlB,EAAiB,uCAC5C,GAD4C,WACtCC,OAAOC,UAAUgB,IAAkB,GAAKA,EAC5C,MAAM,IAAI3B,UAAU,4CAOS,OAL/B,eAAO,EAAGS,IAKLkB,YAAcA,EAAY,CACjC,CAiBC,OAfD,0BACA,WACE,OAAO,CACT,GAEA,oBACA,SAAO7B,GAAyB,IAAVc,EAAM,uDAAG,EAC7Bf,EAAgBC,GAChB,IAAM8B,EAAM9B,EAAEQ,OAASM,EACvB,OAAOiB,KAAKC,MAAMF,EAAM,KAAKD,YAC/B,GAEA,oBACA,SAAOI,EAAajC,EAAec,GACjC,OAAO,CACT,KAAC,EA9BsB,CAAQY,GAiCjC,IAoBaQ,EAAa,8BAGxB,WAAYC,GAAqD,MAA7BrB,EAAM,uDAAG,EAAGH,EAAiB,uCAC/D,GAD+D,YACzDwB,aAAkB1B,GACtB,MAAM,IAAIP,UAAU,2BAGtB,IAAKU,OAAOC,UAAUC,GACpB,MAAM,IAAIZ,UAAU,uCAcD,OAXrB,cAAMiC,EAAOzB,KAAMC,GAAYwB,EAAOxB,WAGjCwB,OAASA,EAQd,EAAKrB,OAASA,EAAO,CACvB,CAgBC,OAdD,0BACA,WACE,OAAS,KAAKqB,kBAAkBC,GACpB,KAAKD,kBAAkBE,CACrC,GAEA,oBACA,SAAOrC,GAAyB,IAAVc,EAAM,uDAAG,EAC7B,OAAO,KAAKqB,OAAOG,OAAOtC,EAAGc,EAAS,KAAKA,OAC7C,GAEA,oBACA,SAAOmB,EAAajC,GAAyB,IAAVc,EAAM,uDAAG,EAC1C,OAAO,KAAKqB,OAAOI,OAAON,EAAKjC,EAAGc,EAAS,KAAKA,OAClD,KAAC,EAxCuB,CAAQY,GA2ClC,IAgBaU,EAAK,8BAChB,WAAY1B,EAAcC,GAAiB,MAEzC,GAFyC,UAErC,GADJ,cAAMD,EAAMC,IACCD,KACX,MAAM,IAAIK,WAAW,gCACtB,QACH,CAWC,OATD,yBACA,SAAOf,GAAyB,IAAVc,EAAM,uDAAG,EAC7B,OAAOX,EAAmBH,GAAGwC,WAAW1B,EAAQ,KAAKJ,KACvD,GAEA,oBACA,SAAOuB,EAAajC,GAAyB,IAAVc,EAAM,uDAAG,EAE1C,OADAX,EAAmBH,GAAGyC,YAAYR,EAAKnB,EAAQ,KAAKJ,MAC7C,KAAKA,IACd,KAAC,EAjBe,CAAQD,GAoB1B,IAgBa4B,EAAO,8BAClB,WAAY3B,EAAcC,GAAiB,MAEzC,GAFyC,UAErC,GADJ,cAAMD,EAAMC,IACCD,KACX,MAAM,IAAIK,WAAW,gCACtB,QACH,CAWC,OATD,yBACA,SAAOf,GAAyB,IAAVc,EAAM,uDAAG,EAC7B,OAAOX,EAAmBH,GAAG0C,WAAW5B,EAAQ,KAAKJ,KACvD,GAEA,oBACA,SAAOuB,EAAajC,GAAyB,IAAVc,EAAM,uDAAG,EAE1C,OADAX,EAAmBH,GAAG2C,YAAYV,EAAKnB,EAAQ,KAAKJ,MAC7C,KAAKA,IACd,KAAC,EAjBiB,CAAQD,GAoB5B,IAgBamC,EAAI,8BACf,WAAYlC,EAAcC,GAAiB,MAEzC,GAFyC,UAErC,GADJ,cAAMD,EAAMC,IACCD,KACX,MAAM,IAAIK,WAAW,gCACtB,QACH,CAWC,OATD,yBACA,SAAOf,GAAyB,IAAVc,EAAM,uDAAG,EAC7B,OAAOX,EAAmBH,GAAG6C,UAAU/B,EAAQ,KAAKJ,KACtD,GAEA,oBACA,SAAOuB,EAAajC,GAAyB,IAAVc,EAAM,uDAAG,EAE1C,OADAX,EAAmBH,GAAG8C,WAAWb,EAAKnB,EAAQ,KAAKJ,MAC5C,KAAKA,IACd,KAAC,EAjBc,CAAQD,GAoBzB,IAgBasC,EAAM,8BACjB,WAAYrC,EAAcC,GAAiB,MAEzC,GAFyC,UAErC,GADJ,cAAMD,EAAMC,IACCD,KACX,MAAM,IAAIK,WAAW,gCACtB,QACH,CAWC,OATD,yBACA,SAAOf,GAAyB,IAAVc,EAAM,uDAAG,EAC7B,OAAOX,EAAmBH,GAAGgD,UAAUlC,EAAQ,KAAKJ,KACtD,GAEA,oBACA,SAAOuB,EAAajC,GAAyB,IAAVc,EAAM,uDAAG,EAE1C,OADAX,EAAmBH,GAAGiD,WAAWhB,EAAKnB,EAAQ,KAAKJ,MAC5C,KAAKA,IACd,KAAC,EAjBgB,CAAQD,GAoB3B,IAAMyC,EAAQnB,KAAKoB,IAAI,EAAG,IAI1B,SAASC,EAAYnB,GACnB,IAAMoB,EAAOtB,KAAKC,MAAMC,EAAMiB,GAE9B,MAAO,CAACG,KAAAA,EAAMC,KADDrB,EAAOoB,EAAOH,EAE7B,CAEA,SAASK,EAAaF,EAAcC,GAClC,OAAOD,EAAOH,EAAQI,CACxB,CAEA,IAWaE,EAAW,8BACtB,WAAY7C,GAAiB,6BACrB,EAAGA,EACX,CAiBC,OAfD,yBACA,SAAOX,GAAyB,IAAVc,EAAM,uDAAG,EACvBR,EAASH,EAAmBH,GAC5BsD,EAAOhD,EAAOmD,aAAa3C,GAC3BuC,EAAO/C,EAAOmD,aAAa3C,EAAS,GAC1C,OAAOyC,EAAaF,EAAMC,EAC5B,GAEA,oBACA,SAAOrB,EAAajC,GAAyB,IAAVc,EAAM,uDAAG,EACpC4C,EAAQN,EAAYnB,GACpB3B,EAASH,EAAmBH,GAGlC,OAFAM,EAAOqD,cAAcD,EAAMJ,KAAMxC,GACjCR,EAAOqD,cAAcD,EAAML,KAAMvC,EAAS,GACnC,CACT,KAAC,EApBqB,CAAQL,GAuBhC,IAWamD,EAAa,8BACxB,WAAYjD,GAAiB,6BACrB,EAAGA,EACX,CAiBC,OAfD,yBACA,SAAOX,GAAyB,IAAVc,EAAM,uDAAG,EACvBR,EAASH,EAAmBH,GAC5BqD,EAAO/C,EAAOuD,aAAa/C,GAC3BwC,EAAOhD,EAAOuD,aAAa/C,EAAS,GAC1C,OAAOyC,EAAaF,EAAMC,EAC5B,GAEA,oBACA,SAAOrB,EAAajC,GAAyB,IAAVc,EAAM,uDAAG,EACpC4C,EAAQN,EAAYnB,GACpB3B,EAASH,EAAmBH,GAGlC,OAFAM,EAAOwD,cAAcJ,EAAML,KAAMvC,GACjCR,EAAOwD,cAAcJ,EAAMJ,KAAMxC,EAAS,GACnC,CACT,KAAC,EApBuB,CAAQL,GAuBlC,IAWasD,EAAU,8BACrB,WAAYpD,GAAiB,6BACrB,EAAGA,EACX,CAiBC,OAfD,yBACA,SAAOX,GAAyB,IAAVc,EAAM,uDAAG,EACvBR,EAASH,EAAmBH,GAC5BsD,EAAOhD,EAAOmD,aAAa3C,GAC3BuC,EAAO/C,EAAO0D,YAAYlD,EAAS,GACzC,OAAOyC,EAAaF,EAAMC,EAC5B,GAEA,oBACA,SAAOrB,EAAajC,GAAyB,IAAVc,EAAM,uDAAG,EACpC4C,EAAQN,EAAYnB,GACpB3B,EAASH,EAAmBH,GAGlC,OAFAM,EAAOqD,cAAcD,EAAMJ,KAAMxC,GACjCR,EAAO2D,aAAaP,EAAML,KAAMvC,EAAS,GAClC,CACT,KAAC,EApBoB,CAAQL,GAuB/B,IAWayD,EAAY,8BACvB,WAAYvD,GAAiB,6BACrB,EAAGA,EACX,CAiBC,OAfD,yBACA,SAAOX,GAAyB,IAAVc,EAAM,uDAAG,EACvBR,EAASH,EAAmBH,GAC5BqD,EAAO/C,EAAO6D,YAAYrD,GAC1BwC,EAAOhD,EAAOuD,aAAa/C,EAAS,GAC1C,OAAOyC,EAAaF,EAAMC,EAC5B,GAEA,oBACA,SAAOrB,EAAajC,GAAyB,IAAVc,EAAM,uDAAG,EACpC4C,EAAQN,EAAYnB,GACpB3B,EAASH,EAAmBH,GAGlC,OAFAM,EAAO8D,aAAaV,EAAML,KAAMvC,GAChCR,EAAOwD,cAAcJ,EAAMJ,KAAMxC,EAAS,GACnC,CACT,KAAC,EApBsB,CAAQL,GAuBjC,IAUa4D,EAAM,8BACjB,WAAY1D,GAAiB,6BACrB,EAAGA,EACX,CAWC,OATD,yBACA,SAAOX,GAAyB,IAAVc,EAAM,uDAAG,EAC7B,OAAOX,EAAmBH,GAAGsE,YAAYxD,EAC3C,GAEA,oBACA,SAAOmB,EAAajC,GAAyB,IAAVc,EAAM,uDAAG,EAE1C,OADAX,EAAmBH,GAAGuE,aAAatC,EAAKnB,GACjC,CACT,KAAC,EAdgB,CAAQL,GAiB3B,IAUa+D,EAAQ,8BACnB,WAAY7D,GAAiB,6BACrB,EAAGA,EACX,CAWC,OATD,yBACA,SAAOX,GAAyB,IAAVc,EAAM,uDAAG,EAC7B,OAAOX,EAAmBH,GAAGyE,YAAY3D,EAC3C,GAEA,oBACA,SAAOmB,EAAajC,GAAyB,IAAVc,EAAM,uDAAG,EAE1C,OADAX,EAAmBH,GAAG0E,aAAazC,EAAKnB,GACjC,CACT,KAAC,EAdkB,CAAQL,GAiB7B,IAUakE,EAAO,8BAClB,WAAYhE,GAAiB,6BACrB,EAAGA,EACX,CAWC,OATD,yBACA,SAAOX,GAAyB,IAAVc,EAAM,uDAAG,EAC7B,OAAOX,EAAmBH,GAAG4E,aAAa9D,EAC5C,GAEA,oBACA,SAAOmB,EAAajC,GAAyB,IAAVc,EAAM,uDAAG,EAE1C,OADAX,EAAmBH,GAAG6E,cAAc5C,EAAKnB,GAClC,CACT,KAAC,EAdiB,CAAQL,GAiB5B,IAUaqE,EAAS,8BACpB,WAAYnE,GAAiB,6BACrB,EAAGA,EACX,CAWC,OATD,yBACA,SAAOX,GAAyB,IAAVc,EAAM,uDAAG,EAC7B,OAAOX,EAAmBH,GAAG+E,aAAajE,EAC5C,GAEA,oBACA,SAAOmB,EAAajC,GAAyB,IAAVc,EAAM,uDAAG,EAE1C,OADAX,EAAmBH,GAAGgF,cAAc/C,EAAKnB,GAClC,CACT,KAAC,EAdmB,CAAQL,GAiB9B,IAiBawE,EAAY,8BAIvB,WAAYC,EAA0BC,EAAgCxE,GAAiB,MACrF,GADqF,YAC/EuE,aAAyBzE,GAC7B,MAAM,IAAIP,UAAU,kCAEtB,KAAQiF,aAAiBzD,GAAmByD,EAAMC,WACxCxE,OAAOC,UAAUsE,IAAW,GAAKA,GACzC,MAAM,IAAIjF,UAAU,4EAGtB,IAAIQ,GAAQ,EAgBO,QAfZyE,aAAiBzD,IAChB,EAAIwD,EAAcxE,OACxBA,EAAOyE,EAAQD,EAAcxE,OAG/B,cAAMA,EAAMC,IAGPuE,cAAgBA,EAOrB,EAAKC,MAAQA,EAAM,CACrB,CA2DC,OAzDD,0BACA,SAAQnF,GAAyB,IAAVc,EAAM,uDAAG,EAC9B,GAAI,GAAK,KAAKJ,KACZ,OAAO,KAAKA,KAEd,IAAIA,EAAO,EACPyE,EAAQ,KAAKA,MAIjB,GAHIA,aAAiBzD,IACnByD,EAAQA,EAAM7C,OAAOtC,EAAGc,IAEtB,EAAI,KAAKoE,cAAcxE,KACzBA,EAAOyE,EAAQ,KAAKD,cAAcxE,UAGlC,IADA,IAAI2E,EAAM,EACHA,EAAMF,GACXzE,GAAQ,KAAKwE,cAAcI,QAAQtF,EAAGc,EAASJ,KAC7C2E,EAGN,OAAO3E,CACT,GAEA,oBACA,SAAOV,GAAyB,IAAVc,EAAM,uDAAG,EACvBE,EAAU,GACZuE,EAAI,EACJJ,EAAQ,KAAKA,MAIjB,IAHIA,aAAiBzD,IACnByD,EAAQA,EAAM7C,OAAOtC,EAAGc,IAEnByE,EAAIJ,GACTnE,EAAGwE,KAAK,KAAKN,cAAc5C,OAAOtC,EAAGc,IACrCA,GAAU,KAAKoE,cAAcI,QAAQtF,EAAGc,GACxCyE,GAAK,EAEP,OAAOvE,CACT,GAEA,oBAUA,SAAOiB,EAAUjC,GAAyB,IAAVc,EAAM,uDAAG,EACjC2E,EAAM,KAAKP,cACXxE,EAAeuB,EAAIyD,QAAO,SAAChF,EAAMiF,GACrC,OAAOjF,EAAO+E,EAAIlD,OAAOoD,EAAG3F,EAAGc,EAASJ,EAC1C,GAAG,GAIH,OAHI,KAAKyE,iBAAiBzD,GACxB,KAAKyD,MAAM5C,OAAON,EAAIzB,OAAQR,EAAGc,GAE5BJ,CACT,KAAC,EAzFsB,CAAQD,GA4FjC,IAgCamF,EAAa,8BAIxB,WAAYC,EAA8BlF,EAAmBmF,GAAwB,MACnF,GADmF,WAC7EC,MAAMC,QAAQH,KACXA,EAAOH,QAAO,SAACO,EAAKN,GAAC,OAAKM,GAAQN,aAAalF,CAAO,IAAE,GAC/D,MAAM,IAAIP,UAAU,4CAEjB,mBAAqBS,QAClBuF,IAAcJ,IACpBA,EAAiBnF,EACjBA,OAAWuF,GAGb,IACuB,EADvB,IACiBL,GAAM,IAAvB,2BAAyB,KAAdM,EAAE,QACX,GAAK,EAAIA,EAAGzF,WACJwF,IAAcC,EAAGxF,SACvB,MAAM,IAAIgB,MAAM,wDAEnB,+BAED,IAAIjB,GAAQ,EACZ,IACEA,EAAOmF,EAAOH,QAAO,SAAChF,EAAMyF,GAAE,OAAKzF,EAAOyF,EAAGb,SAAS,GAAE,EAExD,CADA,MAAOc,GACP,CAyBqC,OAvBvC,cAAM1F,EAAMC,IAYPkF,OAASA,EAWd,EAAKC,iBAAmBA,EAAe,CACzC,CAiIC,OA/HD,0BACA,SAAQ9F,GAAyB,IAAVc,EAAM,uDAAG,EAC9B,GAAI,GAAK,KAAKJ,KACZ,OAAO,KAAKA,KAEd,IAAIA,EAAO,EACX,IACEA,EAAO,KAAKmF,OAAOH,QAAO,SAAChF,EAAMyF,GAC/B,IAAME,EAAMF,EAAGb,QAAQtF,EAAGc,GAE1B,OADAA,GAAUuF,EACH3F,EAAO2F,CAChB,GAAG,GACH,MAAOD,GACP,MAAM,IAAIrF,WAAW,sBAEvB,OAAOL,CACT,GAEA,oBACA,SAAOV,GAAyB,IAAVc,EAAM,uDAAG,EAC7Bf,EAAgBC,GAChB,IAC4B,EADtBsG,EAAO,KAAKC,wBAA6B,IAC9B,KAAKV,QAAM,IAA5B,2BAA8B,KAAnBM,EAAE,QAKX,QAJID,IAAcC,EAAGxF,WACnB2F,EAAKH,EAAGxF,UAAuBwF,EAAG7D,OAAOtC,EAAGc,IAE9CA,GAAUqF,EAAGb,QAAQtF,EAAGc,GACpB,KAAKgF,gBACD9F,EAAEQ,SAAWM,EACnB,MAEH,+BACD,OAAOwF,CACT,GAEA,oBAKA,SAAOrE,EAAQjC,GAAyB,IAIV,EAJAc,EAAM,uDAAG,EAC/B0F,EAAc1F,EAChB2F,EAAa,EACbC,EAAY,EAAE,IACD,KAAKb,QAAM,IAA5B,2BAA8B,KAAnBM,EAAE,QACPzF,EAAOyF,EAAGzF,KAEd,GADAgG,EAAa,EAAIhG,EAAQA,EAAO,OAC5BwF,IAAcC,EAAGxF,SAAU,CAC7B,IAAMgG,EAAK1E,EAAIkE,EAAGxF,eACduF,IAAcS,IAChBD,EAAYP,EAAG5D,OAAOoE,EAAI3G,EAAGc,GACzB,EAAIJ,IAGNA,EAAOyF,EAAGb,QAAQtF,EAAGc,KAI3B2F,EAAa3F,EACbA,GAAUJ,EAEZ,+BAIA,OAAQ+F,EAAaC,EAAaF,CACpC,GAEA,uBACA,SAAUlF,GACR,IAC4B,EADtBgF,EAAO,KAAKC,wBAAwB,IACzB,KAAKV,QAAM,IAA5B,2BAA8B,KAAnBM,EAAE,aACND,IAAcC,EAAGxF,UACd,EAAIW,EAAOd,SACjB8F,EAAKH,EAAGxF,UAAYW,EAAOsF,SAE9B,+BACD,OAAON,CACT,GAEA,uBAQA,SAAU3F,GACR,GAAI,kBAAoBA,EACtB,MAAM,IAAIT,UAAU,2BACrB,IAC2B,EAD3B,IACgB,KAAK2F,QAAM,IAA5B,2BAA8B,KAAnBM,EAAE,QACX,GAAIA,EAAGxF,WAAaA,EAClB,OAAOwF,EAEV,+BAEH,GAEA,sBAWA,SAASxF,GACP,GAAI,kBAAoBA,EACtB,MAAM,IAAIT,UAAU,2BAEtB,IAC4B,EADxBY,EAAS,EAAE,IACE,KAAK+E,QAAM,IAA5B,2BAA8B,KAAnBM,EAAE,QACX,GAAIA,EAAGxF,WAAaA,EAClB,OAAOG,EAEL,EAAIqF,EAAGzF,KACTI,GAAU,EACD,GAAKA,IACdA,GAAUqF,EAAGzF,MAEhB,+BAEH,KAAC,EAtLuB,CAAQD,GAyLlC,IAcaoG,EAAkB,WAE7B,WAAYlG,GAAgB,UAK1B,KAAKA,SAAWA,CAClB,CAgBC,OAdD,yBAIA,SAAOX,EAAgBc,GACrB,MAAM,IAAIa,MAAM,iCAClB,GAEA,oBAIA,SAAOM,EAAQjC,EAAec,GAC5B,MAAM,IAAIa,MAAM,iCAClB,KAAC,EAxB4B,GA2B/B,IAiBamF,EAAyB,8BAEpC,WAAY3E,EAAwBxB,GAAiB,MACnD,GADmD,YAC5CwB,aAAkBT,GAChBS,EAAOiD,WACd,MAAM,IAAIlF,UAAU,qDAOD,OAJrB,cAAMS,GAAYwB,EAAOxB,UAAY,YAIhCwB,OAASA,EAAO,CACvB,CAUC,OARD,yBACA,SAAOnC,EAAec,GACpB,OAAO,KAAKqB,OAAOG,OAAOtC,EAAGc,EAC/B,GAEA,oBACA,SAAOmB,EAAajC,EAAec,GACjC,OAAO,KAAKqB,OAAOI,OAAON,EAAKjC,EAAGc,EACpC,KAAC,EAvBmC,CAAQ+F,GA0B9C,IA2DaE,EAAM,8BAYjB,WACIC,EACAC,EACAtG,GAAgB,MAEduG,EACJ,GAHkB,UAGbF,aAAiB5E,GACd4E,aAAiB3E,EACvB6E,EAAgB,IAAIJ,EAAyB,IAAI5E,EAAa8E,SACzD,GAAKA,aAAiBtF,GACfsF,EAAM5B,UAClB8B,EAAgB,IAAIJ,EAAyBE,OACxC,MAAMA,aAAiBH,GAC5B,MAAM,IAAI3G,UAAU,oEAGpBgH,EAAgBF,EAKlB,QAHId,IAAce,IAChBA,EAAgB,QAEX,OAASA,GACNA,aAAyBxG,GACjC,MAAM,IAAIP,UAAU,0CAEtB,GAAI,OAAS+G,EAAe,CAC1B,GAAI,EAAIA,EAAcvG,KACpB,MAAM,IAAIiB,MAAM,8CAEduE,IAAce,EAActG,WAC9BsG,EAAgBA,EAAcE,UAAU,YAQ5C,IAAIzG,GAAQ,EACRuG,GAEG,IADLvG,EAAOuG,EAAcvG,QACAsG,aAAiB5E,GAC9B4E,aAAiB3E,KACvB3B,GAASwG,EAA2C/E,OAAOzB,OAG/D,cAAMA,EAAMC,IAUPuG,cAAgBA,EAOrB,EAAKE,wBAA2BJ,aAAiB5E,GACzC4E,aAAiB3E,EASzB,EAAK4E,cAAgBA,EAYrB,EAAKI,SAAW,GAGhB,IAAIC,EAAwB,EAAKC,wBAAwBC,KAAI,MAkC3D,OAnBF,EAAKC,iBAAmB,SAASxF,GAC/B,OAAOqF,EAAsBrF,EAC/B,EAeA,EAAKyF,uBAAyB,SAASC,GACrCL,EAAwBK,EAAIH,KAAK,KACnC,EAAE,CACJ,CAmKC,OAjKD,0BACA,SAAQxH,GAAyB,IAAVc,EAAM,uDAAG,EAC9B,GAAI,GAAK,KAAKJ,KACZ,OAAO,KAAKA,KAKd,IAAMkH,EAAM,KAAKC,WAAW7H,EAAGc,GAC/B,IAAK8G,EACH,MAAM,IAAIjG,MAAM,qDAElB,OAAOiG,EAAItC,QAAQtF,EAAGc,EACxB,GAEA,qCA6BA,SAAwBmB,GACtB,GAAIhB,OAAOG,UAAU0G,eAAeC,KAAK9F,EAAK,KAAKiF,cAAcvG,UAAW,CAC1E,GAAI,KAAKsG,eAAiB,KAAKA,cAActG,UACtCM,OAAOG,UAAU0G,eAAeC,KAAK9F,EAAK,KAAKgF,cAActG,UAClE,OAEF,IAAMiH,EAAM,KAAKP,SAASpF,EAAI,KAAKiF,cAAcvG,WACjD,GAAIiH,KACMA,EAAIzF,QACFyF,EAAIjH,UAAYM,OAAOG,UAAU0G,eAAeC,KAAK9F,EAAK2F,EAAIjH,WACxE,OAAOiH,OAGT,IAAK,IAAMI,KAAO,KAAKX,SAAU,CAC/B,IAAMO,EAAM,KAAKP,SAASW,GAC1B,GAAIJ,EAAIjH,UAAYM,OAAOG,UAAU0G,eAAeC,KAAK9F,EAAK2F,EAAIjH,UAChE,OAAOiH,EAIb,MAAM,IAAIjG,MAAM,8BAClB,GAEA,oBAMA,SAAO3B,GAAyB,IAC1BsG,EADgBxF,EAAM,uDAAG,EAEvBmH,EAAM,KAAKf,cACXF,EAAQiB,EAAI3F,OAAOtC,EAAGc,GACtBoH,EAAM,KAAKb,SAASL,GAC1B,QAAId,IAAcgC,EAAK,CACrB,IAAMjB,EAAgB,KAAKA,cACvBkB,EAAgB,EAChB,KAAKf,0BACPe,EAAiBF,EAAiC9F,OAAOzB,OAE3D4F,EAAO,KAAKC,yBACP0B,EAAItH,UAAYqG,EAGrBV,EAAKW,EAAetG,UAAasG,EAAe3E,OAAOtC,EAAGc,EAASqH,QAEnE7B,EAAO4B,EAAI5F,OAAOtC,EAAGc,GAEvB,OAAOwF,CACT,GAEA,oBAMA,SAAOrE,EAAmBjC,GAAyB,IAAVc,EAAM,uDAAG,EAC1C8G,EAAM,KAAKH,iBAAiBxF,GAClC,QAAIiE,IAAc0B,EAAK,CACrB,IAAMK,EAAM,KAAKf,cAGXgB,EAAM,KAAKjB,cACbkB,EAAgB,EAOpB,OANI,KAAKf,0BACPe,EAAiBF,EAAiC9F,OAAOzB,MAE3DuH,EAAI1F,OAAON,EAAIgG,EAAItH,UAAWX,EAAGc,GAG1BqH,EAAgBD,EAAI3F,OAAON,EAAIiG,EAAIvH,UAAYX,EAAGc,EAASqH,GAEpE,OAAOP,EAAIrF,OAAON,EAAKjC,EAAGc,EAC5B,GAEA,wBAaA,SAAWsH,EAAiBjG,EAA8BxB,GACxD,IAAMK,EAAK,IAAIqH,EAAc,KAAMD,EAASjG,EAAQxB,GAEpD,OADA,KAAK0G,SAASe,GAAWpH,EAClBA,CACT,GAEA,wBAcA,SAAWsH,GAAmC,IACxCF,EAD8BtH,EAAM,uDAAG,EAO3C,OAJEsH,EADEE,aAAcrI,WACN,KAAKiH,cAAc5E,OAAOgG,EAAIxH,GAE9BwH,EAEL,KAAKjB,SAASe,EACvB,KAAC,EA1SgB,CAAQ3H,GA6S3B,IA6Ba4H,EAAc,8BAOzB,WAAYE,EAAcH,EAAiBjG,EAAqCxB,GAAgB,MAC9F,GAD8F,YACxF4H,aAAiBxB,GACrB,MAAM,IAAI7G,UAAU,yBAEtB,IAAMU,OAAOC,UAAUuH,IAAc,EAAIA,EACvC,MAAM,IAAIlI,UAAU,4CAOtB,GALK,kBAAoBiC,QACjB+D,IAAcvF,IACpBA,EAAWwB,EACXA,EAAS,MAEPA,EAAQ,CACV,KAAMA,aAAkB1B,GACtB,MAAM,IAAIP,UAAU,2BAEtB,GAAK,OAASqI,EAAMtB,eACZ,GAAK9E,EAAOzB,MACZyB,EAAOzB,KAAO6H,EAAMtB,cAAcvG,KACxC,MAAM,IAAIiB,MAAM,iDAElB,GAAI,kBAAoBhB,EACtB,MAAM,IAAIT,UAAU,uCAGxB,IAAIQ,EAAO6H,EAAM7H,KAqBY,OApBzB,EAAI6H,EAAM7H,MAEP,IADLA,EAAOyB,EAASA,EAAOzB,KAAO,IACX6H,EAAMnB,0BACvB1G,GAAS6H,EAAMrB,cAA2C/E,OAAOzB,OAGrE,cAAMA,EAAMC,IAGP4H,MAAQA,EAKb,EAAKH,QAAUA,EAMf,EAAKjG,OAASA,GAAU,KAAK,CAC/B,CAuEC,OArED,0BACA,SAAQnC,GAAyB,IAAVc,EAAM,uDAAG,EAC9B,GAAI,GAAK,KAAKJ,KAGZ,OAAO,KAAKA,KAEd,IAAIyH,EAAgB,EAChB,KAAKI,MAAMnB,0BACbe,EAAiB,KAAKI,MAAMrB,cAA2C/E,OAAOzB,MAGhF,IAAIA,EAAO,EAIX,OAHI,KAAKyB,SACPzB,EAAO,KAAKyB,OAAOmD,QAAQtF,EAAGc,EAASqH,IAElCA,EAAgBzH,CACzB,GAEA,oBACA,SAAOV,GAAyB,IAAVc,EAAM,uDAAG,EACvBwF,EAAO,KAAKC,wBAClB,GAAI,OAAS,KAAKgC,MAAMV,WAAW7H,EAAGc,GACpC,MAAM,IAAIa,MAAM,oBAElB,IAAIwG,EAAgB,EAWpB,OAVI,KAAKI,MAAMnB,0BACbe,EAAiB,KAAKI,MAAMrB,cAA2C/E,OAAOzB,MAE5E,KAAKyB,OACPmE,EAAK,KAAK3F,UAAY,KAAKwB,OAAOG,OAAOtC,EAAGc,EAASqH,GAC5C,KAAKxH,SACd2F,EAAK,KAAK3F,WAAY,EACb,KAAK4H,MAAMnB,0BACpBd,EAAK,KAAKiC,MAAMrB,cAAcvG,UAAY,KAAKyH,SAE1C9B,CACT,GAEA,oBACA,SAAOrE,EAAmBjC,GAAyB,IAAVc,EAAM,uDAAG,EAC5CqH,EAAgB,EAIpB,GAHI,KAAKI,MAAMnB,0BACbe,EAAiB,KAAKI,MAAMrB,cAA2C/E,OAAOzB,MAE5E,KAAKyB,SACAlB,OAAOG,UAAU0G,eAAeC,KAAK9F,EAAK,KAAKtB,UACtD,MAAM,IAAIT,UAAU,0BAA4B,KAAKS,UAEvD,KAAK4H,MAAMrB,cAAc3E,OAAO,KAAK6F,QAASpI,EAAGc,GACjD,IAAIJ,EAAOyH,EACX,GAAI,KAAKhG,SACP,KAAKA,OAAOI,OAAON,EAAI,KAAKtB,UAAWX,EAAGc,EAASqH,GACnDzH,GAAQ,KAAKyB,OAAOmD,QAAQtF,EAAGc,EAASqH,GACnC,GAAK,KAAKI,MAAM7H,MACbA,EAAO,KAAK6H,MAAM7H,MACxB,MAAM,IAAIiB,MAAM,6CAGpB,OAAOjB,CACT,GAEA,uBAEA,SAAUY,GACR,GAAI,KAAKa,OACP,OAAO,KAAKA,OAAOqG,UAAUlH,EAGjC,KAAC,EA7HwB,CAAQb,GAsInC,SAASgI,EAAiB9C,GAIxB,OAHI,EAAIA,IACNA,GAAK,YAEAA,CACT,CAEA,IA+Ba+C,EAAa,8BAQxB,WAAYC,EAAqBC,EAAuBjI,GAAiB,MACvE,GADuE,YAChEgI,aAAgBvG,GACbuG,aAAgBtG,GACxB,MAAM,IAAInC,UAAU,wCAOtB,GALK,kBAAoB0I,QACjB1C,IAAcvF,IACpBA,EAAWiI,EACXA,GAAM,GAEJ,EAAID,EAAKjI,KACX,MAAM,IAAIK,WAAW,+BAEvB,cAAM4H,EAAKjI,KAAMC,IAKZgI,KAAOA,EASZ,EAAKC,MAAQA,EAQb,EAAK/C,OAAS,GAKd,IAAIgD,EAAQ,EAOV,OANF,EAAKC,gBAAkB,SAASnD,GAE9B,OADAkD,EAAQJ,EAAiB9C,GAClB,IACT,EACA,EAAKoD,gBAAkB,WACrB,OAAOF,CACT,EAAE,CACJ,CAmFC,OAjFD,yBACA,SAAO7I,GAAyB,IAAVc,EAAM,uDAAG,EACvBwF,EAAO,KAAKC,wBACZsC,EAAQ,KAAKF,KAAKrG,OAAOtC,EAAGc,GAClC,KAAKgI,gBAAgBD,GAAO,IACA,EADA,IACX,KAAKhD,QAAM,IAA5B,2BAA8B,KAAnBM,EAAE,aACPD,IAAcC,EAAGxF,WACnB2F,EAAKH,EAAGxF,UAAYwF,EAAG7D,OAAOtC,IAEjC,+BACD,OAAOsG,CACT,GAEA,oBAKA,SAAOrE,EAAmBjC,GAAyB,IAAVc,EAAM,uDAAG,EAC1C+H,EAAQ,KAAKF,KAAKrG,OAAOtC,EAAGc,GAClC,KAAKgI,gBAAgBD,GAAO,IACA,EADA,IACX,KAAKhD,QAAM,IAA5B,2BAA8B,KAAnBM,EAAE,QACX,QAAID,IAAcC,EAAGxF,SAAU,CAC7B,IAAMgG,EAAK1E,EAAIkE,EAAGxF,eACduF,IAAcS,GAChBR,EAAG5D,OAAOoE,IAGf,+BACD,OAAO,KAAKgC,KAAKpG,OAAO,KAAKwG,kBAAmB/I,EAAGc,EACrD,GAEA,sBASA,SAASkI,EAAcrI,GACrB,IAAMsI,EAAK,IAAIC,EAAS,KAAMF,EAAMrI,GAEpC,OADA,KAAKkF,OAAOL,KAAKyD,GACVA,CACT,GAUA,wBACA,SAAWtI,GAET,IAAMsI,EAAK,IAAIE,EAAQ,KAAMxI,GAE7B,OADA,KAAKkF,OAAOL,KAAKyD,GACVA,CACT,GAEA,sBAQA,SAAStI,GACP,GAAI,kBAAoBA,EACtB,MAAM,IAAIT,UAAU,2BACrB,IAC2B,EAD3B,IACgB,KAAK2F,QAAM,IAA5B,2BAA8B,KAAnBM,EAAE,QACX,GAAIA,EAAGxF,WAAaA,EAClB,OAAOwF,EAEV,+BAEH,KAAC,EA3IuB,CAAQ1F,GA8IlC,IAoBayI,EAAQ,WAOnB,WAAYE,EAAyBJ,EAAcrI,GACjD,GADiE,YAC3DyI,aAAqBV,GACzB,MAAM,IAAIxI,UAAU,oCAEtB,IAAMU,OAAOC,UAAUmI,IAAW,GAAKA,EACrC,MAAM,IAAI9I,UAAU,iCAEtB,IAAMmJ,EAAY,EAAID,EAAU1I,KAC1B4I,EAAWF,EAAUvD,OAAOH,QAAO,SAAC6D,EAAKpD,GAAE,OAAKoD,EAAMpD,EAAG6C,IAAI,GAAE,GACrE,GAAKA,EAAOM,EAAYD,EACtB,MAAM,IAAI1H,MAAM,sCACG0H,EAAYC,GAAY,OACzBD,EAAY,YAKhC,KAAKD,UAAYA,EAGjB,KAAKJ,KAAOA,EAOZ,KAAKQ,WAAa,GAAKR,GAAQ,EAC3B,KAAOA,IACT,KAAKQ,UAAY,YAMnB,KAAKC,MAAQH,EACT,KAAKF,UAAUR,MACjB,KAAKa,MAAQJ,EAAYC,EAAWN,GAKtC,KAAKU,SAAWjB,EAAiB,KAAKe,WAAa,KAAKC,OAYxD,KAAK9I,SAAWA,CAClB,CA2BC,OAzBD,yBAEA,SAAOX,EAAgBc,GAIrB,OAFkB2H,EADL,KAAKW,UAAUL,kBACc,KAAKW,YACnB,KAAKD,KAEnC,GAEA,oBAKA,SAAOZ,GACL,GAAI,kBAAoBA,IAChBjI,OAAOC,UAAUgI,IACjBA,IAAUJ,EAAiBI,EAAQ,KAAKW,WAC9C,MAAM,IAAItJ,UAAUqB,EAAiB,kBAAmB,MAClC,wCAA0C,KAAKiI,WAEvE,IAAMb,EAAO,KAAKS,UAAUL,kBACtBY,EAAYlB,EAAiBI,GAAS,KAAKY,OACjD,KAAKL,UAAUN,gBAAgBL,EAAiBE,GAAQ,KAAKe,UAC5BC,EACnC,KAAC,EAzFkB,GA4GrB,IACaR,EAAQ,8BACnB,WAAYC,EAAyBzI,GAAgB,6BAC7CyI,EAAW,EAAGzI,EACtB,CAgBC,OAdD,yBAGA,SAAOX,EAAgBc,GACrB,QAAQ,0CAAcd,EAAGc,EAC3B,GAEA,oBACA,SAAO+H,GACD,mBAAqBA,IAEvBA,GAASA,GAEX,0CAAaA,EACf,KAAC,EAnBkB,CAAQK,GAuB7B,IAcaU,EAAK,8BAEhB,WAAYpJ,EAAiCG,GAAiB,MAC5D,GAD4D,YACpDH,aAAkBkB,GAAmBlB,EAAO4E,WAC1CxE,OAAOC,UAAUL,IAAY,GAAKA,GAC1C,MAAM,IAAIN,UAAU,yEAItB,IAAIQ,GAAQ,EAWS,OAVfF,aAAkBkB,IACtBhB,EAAOF,IAET,cAAME,EAAMC,IAOPH,OAASA,EAAO,CACvB,CA2CC,OAzCD,0BACA,SAAQR,EAAec,GACrB,IAAIJ,EAAO,KAAKA,KAIhB,OAHI,EAAIA,IACNA,EAAQ,KAAKF,OAA0B8B,OAAOtC,EAAGc,IAE5CJ,CACT,GAEA,oBACA,SAAOV,GAAyB,IAAVc,EAAM,uDAAG,EACzBJ,EAAO,KAAKA,KAIhB,OAHI,EAAIA,IACNA,EAAQ,KAAKF,OAA0B8B,OAAOtC,EAAGc,IAE5CX,EAAmBH,GAAG6J,MAAM/I,EAAQA,EAASJ,EACtD,GAEA,oBAKA,SAAOuB,EAAiBjC,EAAec,GACrC,IAAIJ,EAAO,KAAKF,OAIhB,GAHI,KAAKA,kBAAkBkB,IACzBhB,EAAOuB,EAAIzB,UAEPyB,aAAehC,YAAcS,IAASuB,EAAIzB,QAC9C,MAAM,IAAIN,UAAUqB,EAAiB,cAAe,MAC9B,qBAAuBb,EAAO,uBAEtD,GAAKI,EAASJ,EAAQV,EAAEQ,OACtB,MAAM,IAAIO,WAAW,gCAEvB,IAAM+I,EAAY3J,EAAmB8B,GAKrC,OAJA9B,EAAmBH,GAAG+J,MAAMD,EAAUE,SAAS,OAAQlJ,EAAQJ,EAAM,OACjE,KAAKF,kBAAkBkB,GACzB,KAAKlB,OAAO+B,OAAO7B,EAAMV,EAAGc,GAEvBJ,CACT,KAAC,EAhEe,CAAQD,GAmE1B,IAaawJ,EAAQ,8BACnB,WAAYtJ,GAAiB,8BACpB,EAAGA,EACZ,CAmCC,OAjCD,0BACA,SAAQX,GAAyB,IAAVc,EAAM,uDAAG,EAC9Bf,EAAgBC,GAEhB,IADA,IAAIqF,EAAMvE,EACFuE,EAAMrF,EAAEQ,QAAY,IAAMR,EAAEqF,IAClCA,GAAO,EAET,OAAO,EAAIA,EAAMvE,CACnB,GAEA,oBACA,SAAOd,GAAyB,IAAVc,EAAM,uDAAG,EACvBJ,EAAO,KAAK4E,QAAQtF,EAAGc,GAC7B,OAAOX,EAAmBH,GAAG6J,MAAM/I,EAAQA,EAASJ,EAAO,GAAGsJ,SAAS,QACzE,GAEA,oBACA,SAAO/H,EAAajC,GAAyB,IAAVc,EAAM,uDAAG,EAItC,kBAAoBmB,IACtBA,EAAMiI,OAAOjI,IAEf,IAAMkI,EAAO/J,EAAAA,OAAOC,KAAK4B,EAAK,QACxBvB,EAAOyJ,EAAK3J,OAClB,GAAKM,EAASJ,EAAQV,EAAEQ,OACtB,MAAM,IAAIO,WAAW,4BAEvB,IAAMT,EAASH,EAAmBH,GAGlC,OAFAmK,EAAKC,KAAK9J,EAAQQ,GAClBR,EAAOQ,EAASJ,GAAQ,EACjBA,EAAO,CAChB,KAAC,EAtCkB,CAAQD,GAyC7B,IAmBa4J,EAAK,8BAEhB,WAAYC,EAA2B3J,GAAiB,MAKtD,GALsD,UACjD,kBAAoB2J,QAAapE,IAAcvF,IAClDA,EAAW2J,EACXA,OAAUpE,QAERA,IAAcoE,EAChBA,GAAW,OACN,IAAK1J,OAAOC,UAAUyJ,GAC3B,MAAM,IAAIpK,UAAU,8BAaW,OAVjC,eAAO,EAAGS,IAUL2J,QAAUA,EAAkB,CACnC,CAqCC,OAnCD,0BACA,SAAQtK,GAAyB,IAAVc,EAAM,uDAAG,EAE9B,OADAf,EAAgBC,GACTA,EAAEQ,OAASM,CACpB,GAEA,oBACA,SAAOd,GAAyB,IAAVc,EAAM,uDAAG,EACvBJ,EAAO,KAAK4E,QAAQtF,EAAGc,GAC7B,GAAK,GAAK,KAAKwJ,SACP,KAAKA,QAAU5J,EACrB,MAAM,IAAIK,WAAW,+BAEvB,OAAOZ,EAAmBH,GAAG6J,MAAM/I,EAAQA,EAASJ,GAAMsJ,SAAS,QACrE,GAEA,oBACA,SAAO/H,EAA4BjC,GAAyB,IAAVc,EAAM,uDAAG,EAIrD,kBAAoBmB,IACtBA,EAAMiI,OAAOjI,IAEf,IAAMkI,EAAO/J,EAAAA,OAAOC,KAAK4B,EAAK,QACxBvB,EAAOyJ,EAAK3J,OAClB,GAAK,GAAK,KAAK8J,SACP,KAAKA,QAAU5J,EACrB,MAAM,IAAIK,WAAW,+BAEvB,GAAKD,EAASJ,EAAQV,EAAEQ,OACtB,MAAM,IAAIO,WAAW,4BAGvB,OADAoJ,EAAKC,KAAKjK,EAAmBH,GAAIc,GAC1BJ,CACT,KAAC,EA7De,CAAQD,GAgE1B,IAmBa8J,EAAY,8BAEvB,WAAY1B,EAAUlI,GAAiB,MAYlB,OAZkB,WACrC,cAAM,EAAGA,IAWJkI,MAAQA,EAAM,CACrB,CAWC,OATD,yBACA,SAAO7I,EAAgBc,GACrB,OAAO,KAAK+H,KACd,GAEA,oBACA,SAAO5G,EAAQjC,EAAgBc,GAE7B,OAAO,CACT,KAAC,EA1BsB,CAAQL,GAiCpB+J,EAAAA,GAAU,SAACrI,EAAwBrB,EAAiBH,GAAiB,OAC9E,IAAIuB,EAAaC,EAAQrB,EAAQH,EAAS,EAIjC6J,EAAAA,GAAM,SAAC7J,GAAiB,OAAW,IAAIyB,EAAK,EAAGzB,EAAS,EAIxD6J,EAAAA,GAAO,SAAC7J,GAAiB,OAAW,IAAIyB,EAAK,EAAGzB,EAAS,EAQzD6J,EAAAA,GAAO,SAAC7J,GAAiB,OAAW,IAAIyB,EAAK,EAAGzB,EAAS,EAYzD6J,EAAAA,GAAQ,SAAC7J,GAAiB,OAAiB,IAAI6C,EAAW7C,EAAS,EAoDnE6J,EAAAA,GAAQ,SAAC7J,GAAiB,OAAgB,IAAIoD,EAAUpD,EAAS,EAuCjE6J,EAAAA,GAAU,SAAI3E,EAA8BlF,EAAmBmF,GAAwB,OAChG,IAAIF,EAAaC,EAAQlF,EAAUmF,EAAe,EAOzC0E,EAAAA,GAAO,SAAItF,EAA0BC,EAAgCxE,GAAiB,OAC/F,IAAIsE,EAAYC,EAAeC,EAAOxE,EAAS,EAYtC6J,EAAAA,GAAQ,SAAChK,EAAiCG,GAAiB,OAAW,IAAIiJ,EAAKpJ,EAAQG,EAAS,+WC/jF7G,obAPO8J,EAAmC,GAA1BC,EAA8B,GAAnBC,EAAuB,GAC5CC,EAAMC,OAAO,GACbC,EAAMD,OAAO,GACbE,EAAMF,OAAO,GACbG,EAAMH,OAAO,GACbI,EAAQJ,OAAO,KACfK,EAASL,OAAO,KACbM,EAAQ,EAAGC,EAAIN,EAAKO,GAAI,EAAGC,GAAI,EAAGH,EAAQ,GAAIA,IAAS,CAC5D,OACS,CAACG,IAAI,EAAID,GAAI,EAAIC,IAAK,GAA9BD,GAAC,MAAEC,GAAC,MACLb,EAAQjF,KAAK,GAAK,EAAI8F,GAAID,KAE1BX,EAAUlF,MAAQ2F,EAAQ,IAAMA,EAAQ,GAAM,EAAK,IAGnD,IADA,IAAII,GAAIX,EACCY,GAAI,EAAGA,GAAI,EAAGA,MACnBJ,GAAMA,GAAKN,GAASM,GAAKJ,GAAOE,GAAWD,GACnCF,IACJQ,IAAKT,IAASA,GAAOD,OAAOW,KAAMV,GAE1CH,EAAWnF,KAAK+F,GACpB,CACA,OAAmCE,EAAAA,GAAAA,MAAUd,GAAY,GAAK,iBAAvDe,GAAW,MAAEC,GAAW,MAEzBC,GAAQ,SAACC,EAAGC,EAAGC,GAAC,OAAKA,EAAI,GAAKN,EAAAA,GAAAA,OAAWI,EAAGC,EAAGC,GAAKN,EAAAA,GAAAA,OAAWI,EAAGC,EAAGC,EAAE,EACvEC,GAAQ,SAACH,EAAGC,EAAGC,GAAC,OAAKA,EAAI,GAAKN,EAAAA,GAAAA,OAAWI,EAAGC,EAAGC,GAAKN,EAAAA,GAAAA,OAAWI,EAAGC,EAAGC,EAAE,EA+CtE,IAAME,GAAM,0CAEf,WAAYC,EAAUC,EAAQC,GAA2C,MAAhCC,EAAY,UAAH,8CAAUC,EAAS,UAAH,6CAAG,GAcjE,IAdmE,gBACnE,gBACKJ,SAAWA,EAChB,EAAKC,OAASA,EACd,EAAKC,UAAYA,EACjB,EAAKC,UAAYA,EACjB,EAAKC,OAASA,EACd,EAAKC,IAAM,EACX,EAAKC,OAAS,EACd,EAAKC,UAAW,EAChB,EAAKC,WAAY,EAEjBC,EAAAA,GAAAA,OAAcP,GAEV,GAAK,EAAKF,UAAY,EAAKA,UAAY,IACvC,MAAM,IAAIvK,MAAM,4CAEW,OAD/B,EAAKiL,MAAQ,IAAI3M,WAAW,KAC5B,EAAK4M,SAAUC,EAAAA,EAAAA,IAAI,EAAKF,OAAO,CACnC,CAuFC,OAvFA,8BACD,YAlEG,SAAiBb,GAGpB,IAHoC,IAAbO,EAAS,UAAH,6CAAG,GAC1BS,EAAI,IAAIC,YAAY,IAEjB7B,EAAQ,GAAKmB,EAAQnB,EAAQ,GAAIA,IAAS,CAE/C,IAAK,IAAIE,EAAI,EAAGA,EAAI,GAAIA,IACpB0B,EAAE1B,GAAKU,EAAEV,GAAKU,EAAEV,EAAI,IAAMU,EAAEV,EAAI,IAAMU,EAAEV,EAAI,IAAMU,EAAEV,EAAI,IAC5D,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAOzB,IANA,IAAM4B,GAAQ5B,EAAI,GAAK,GACjB6B,GAAQ7B,EAAI,GAAK,GACjB8B,EAAKJ,EAAEG,GACPE,EAAKL,EAAEG,EAAO,GACdG,EAAKzB,GAAMuB,EAAIC,EAAI,GAAKL,EAAEE,GAC1BK,EAAKtB,GAAMmB,EAAIC,EAAI,GAAKL,EAAEE,EAAO,GAC9B3B,EAAI,EAAGA,EAAI,GAAIA,GAAK,GACzBS,EAAEV,EAAIC,IAAM+B,EACZtB,EAAEV,EAAIC,EAAI,IAAMgC,EAMxB,IAFA,IAAIC,EAAOxB,EAAE,GACTyB,EAAOzB,EAAE,GACJR,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAM3E,EAAQ8D,EAAUa,GAClB8B,EAAKzB,GAAM2B,EAAMC,EAAM5G,GACvB0G,EAAKtB,GAAMuB,EAAMC,EAAM5G,GACvB6G,EAAKhD,EAAQc,GACnBgC,EAAOxB,EAAE0B,GACTD,EAAOzB,EAAE0B,EAAK,GACd1B,EAAE0B,GAAMJ,EACRtB,EAAE0B,EAAK,GAAKH,CAChB,CAEA,IAAK,IAAIhC,EAAI,EAAGA,EAAI,GAAIA,GAAK,GAAI,CAC7B,IAAK,IAAID,EAAI,EAAGA,EAAI,GAAIA,IACpB0B,EAAE1B,GAAKU,EAAET,EAAID,GACjB,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,IACpBU,EAAET,EAAID,KAAO0B,GAAG1B,EAAI,GAAK,IAAM0B,GAAG1B,EAAI,GAAK,GACnD,CAEAU,EAAE,IAAML,GAAYP,GACpBY,EAAE,IAAMJ,GAAYR,EACxB,CACA4B,EAAEW,KAAK,EACX,CAuBQC,CAAQC,KAAKf,QAASe,KAAKtB,QAC3BsB,KAAKpB,OAAS,EACdoB,KAAKrB,IAAM,CACf,GAAC,oBACD,SAAOsB,GACHlB,EAAAA,GAAAA,OAAciB,MAId,IAHA,IAAQ1B,EAAoB0B,KAApB1B,SAAUU,EAAUgB,KAAVhB,MAEZkB,GADND,GAAOE,EAAAA,EAAAA,IAAQF,IACErN,OACR+L,EAAM,EAAGA,EAAMuB,GAAM,CAE1B,IADA,IAAME,EAAOjM,KAAKkM,IAAI/B,EAAW0B,KAAKrB,IAAKuB,EAAMvB,GACxChH,EAAI,EAAGA,EAAIyI,EAAMzI,IACtBqH,EAAMgB,KAAKrB,QAAUsB,EAAKtB,KAC1BqB,KAAKrB,MAAQL,GACb0B,KAAKM,QACb,CACA,OAAON,IACX,GAAC,oBACD,WACI,IAAIA,KAAKnB,SAAT,CAEAmB,KAAKnB,UAAW,EAChB,IAAQG,EAAiCgB,KAAjChB,MAAOT,EAA0ByB,KAA1BzB,OAAQI,EAAkBqB,KAAlBrB,IAAKL,EAAa0B,KAAb1B,SAE5BU,EAAML,IAAQJ,EACU,KAAV,IAATA,IAAwBI,IAAQL,EAAW,GAC5C0B,KAAKM,SACTtB,EAAMV,EAAW,IAAM,IACvB0B,KAAKM,QARK,CASd,GAAC,uBACD,SAAUC,GACNxB,EAAAA,GAAAA,OAAciB,MAAM,GACpBjB,EAAAA,GAAAA,MAAawB,GACbP,KAAKQ,SAGL,IAFA,IAAMC,EAAYT,KAAKhB,MACfV,EAAa0B,KAAb1B,SACCK,EAAM,EAAGuB,EAAMK,EAAI3N,OAAQ+L,EAAMuB,GAAM,CACxCF,KAAKpB,QAAUN,GACf0B,KAAKM,SACT,IAAMF,EAAOjM,KAAKkM,IAAI/B,EAAW0B,KAAKpB,OAAQsB,EAAMvB,GACpD4B,EAAIG,IAAID,EAAUE,SAASX,KAAKpB,OAAQoB,KAAKpB,OAASwB,GAAOzB,GAC7DqB,KAAKpB,QAAUwB,EACfzB,GAAOyB,CACX,CACA,OAAOG,CACX,GAAC,qBACD,SAAQA,GAEJ,IAAKP,KAAKvB,UACN,MAAM,IAAI1K,MAAM,yCACpB,OAAOiM,KAAKY,UAAUL,EAC1B,GAAC,iBACD,SAAIM,GAEA,OADA9B,EAAAA,GAAAA,OAAc8B,GACPb,KAAKc,QAAQ,IAAIzO,WAAWwO,GACvC,GAAC,wBACD,SAAWN,GAEP,GADAxB,EAAAA,GAAAA,OAAcwB,EAAKP,MACfA,KAAKnB,SACL,MAAM,IAAI9K,MAAM,+BAGpB,OAFAiM,KAAKY,UAAUL,GACfP,KAAKe,UACER,CACX,GAAC,oBACD,WACI,OAAOP,KAAKgB,WAAW,IAAI3O,WAAW2N,KAAKxB,WAC/C,GAAC,qBACD,WACIwB,KAAKlB,WAAY,EACjBkB,KAAKhB,MAAMc,KAAK,EACpB,GAAC,wBACD,SAAWmB,GACP,IAAQ3C,EAAmD0B,KAAnD1B,SAAUC,EAAyCyB,KAAzCzB,OAAQC,EAAiCwB,KAAjCxB,UAAWE,EAAsBsB,KAAtBtB,OAAQD,EAAcuB,KAAdvB,UAY7C,OAXAwC,IAAOA,EAAK,IAAI5C,EAAOC,EAAUC,EAAQC,EAAWC,EAAWC,IAC/DuC,EAAGhC,QAAQyB,IAAIV,KAAKf,SACpBgC,EAAGtC,IAAMqB,KAAKrB,IACdsC,EAAGrC,OAASoB,KAAKpB,OACjBqC,EAAGpC,SAAWmB,KAAKnB,SACnBoC,EAAGvC,OAASA,EAEZuC,EAAG1C,OAASA,EACZ0C,EAAGzC,UAAYA,EACfyC,EAAGxC,UAAYA,EACfwC,EAAGnC,UAAYkB,KAAKlB,UACbmC,CACX,KAAC,EA3Gc,CAASC,EAAAA,IA6GtBC,GAAM,SAAC5C,EAAQD,EAAUE,GAAS,OAAK4C,EAAAA,EAAAA,KAAgB,kBAAM,IAAI/C,GAAOC,EAAUC,EAAQC,EAAU,GAAC,EAc9F6C,IAbWF,GAAI,EAAM,IAAK,IAKfA,GAAI,EAAM,IAAK,IACfA,GAAI,EAAM,IAAK,IACfA,GAAI,EAAM,GAAI,IACZA,GAAI,EAAM,IAAK,IAKfA,GAAI,EAAM,IAAK,KAGnCG,IAFoBH,GAAI,EAAM,IAAK,IACfA,GAAI,EAAM,GAAI,IACvB,SAAC5C,EAAQD,EAAUE,GAAS,OAAK+C,EAAAA,EAAAA,KAAwB,eAACC,EAAO,UAAH,6CAAG,CAAC,EAAC,OAAK,IAAInD,GAAOC,EAAUC,OAAuBjG,IAAfkJ,EAAKC,MAAsBjD,EAAYgD,EAAKC,OAAO,EAAK,GAAC,OACvJH,GAAS,GAAM,IAAK,IACpBA,GAAS,GAAM,IAAK,+FC1L5CI,EAAAA,GAAAA,WAA2B,wBAAUC,EAAAA,EAAAA,IAAOD,EAAAA,EAAAA,IAAcE,YAAd,mBAA5C,EAEkCF,EAAAA,GAAAA,iBAA3B,IACMG,GAAkB,WAC7B,IAAMC,EAAgBJ,EAAAA,GAAAA,mBAChBK,EAAYC,GAAaF,GACzBG,EAAY,IAAI5P,WAAW,IAGjC,OAFA4P,EAAUvB,IAAIoB,GACdG,EAAUvB,IAAIqB,EAAW,IAClB,CACLA,UAAAA,EACAE,UAAAA,EAEH,EACYD,GAAeN,EAAAA,GAAAA,aACrB,SAASQ,GAAUH,GACxB,IAEE,OADAL,EAAAA,GAAAA,QAAsBK,GAAW,IAC1B,CAGR,CAFC,SACA,OAAO,CACR,CACF,CACM,IAAMI,GAAO,SAClBC,EACAH,GAFkB,OAGfP,EAAAA,GAAAA,KAAkBU,EAASH,EAAUhG,MAAM,EAAG,IAH5C,EAIMoG,GAASX,EAAAA,GAAAA,OC3CTY,GAAYC,SAAAA,GACvB,OAAIC,EAAAA,GAAAA,SAAgBD,GACXA,EACEA,aAAelQ,WACjBmQ,EAAAA,GAAAA,KAAYD,EAAI7P,OAAQ6P,EAAI5P,WAAY4P,EAAIE,YAE5CD,EAAAA,GAAAA,KAAYD,EAEtB,ECNYG,GAAN,WACLnP,SAAAA,EAAYoP,IAAiB,eAC3BtP,OAAOI,OAAOuM,KAAM2C,EACrB,CAYA,OAZA,8BAEDhO,WACE,OAAO6N,EAAAA,GAAAA,MAAYI,EAAAA,EAAAA,WAAUC,GAAe7C,MAC7C,yBAEY,SAACC,GACZ,OAAO6C,EAAAA,EAAAA,aAAYD,GAAe7C,KAAMC,EACzC,gCAEqB,SAACA,GACrB,OAAO8C,EAAAA,EAAAA,sBAAqBF,GAAe7C,KAAMC,EAClD,OAfI,GAiCM4C,GAAoC,IAAIG,ICpBxCC,GAAoB,GAyBjC,IAAIC,GAAyB,EAKhBC,GAAN,0CAQL5P,SAAAA,EAAY0H,GAA0B,MAEpC,IAFoC,gBACpC,cAAM,CAAC,IAPTmI,SAMsC,EAlBxC,SAAyBnI,GACvB,YAAwC3C,IAAhC2C,EAAwBmI,GACjC,CAkBOC,CAAgBpI,GAClB,EAAKmI,IAAMnI,EAAMmI,QACZ,CACL,GAAqB,kBAAVnI,EAAoB,CAE7B,IAAMqI,EAAUC,IAAAA,OAAYtI,GAC5B,GAAIqI,EAAQ1Q,QAAUqQ,GACpB,MAAM,IAAIlP,MAAJ,4BAER,EAAKqP,IAAM,IAAII,IAAJ,CAAOF,EACnB,MACC,EAAKF,IAAM,IAAII,IAAJ,CAAOvI,GAGpB,GAAI,EAAKmI,IAAIX,aAAeQ,GAC1B,MAAM,IAAIlP,MAAJ,2BAET,SACF,CA4KA,OA1KD,8BAkBA0P,SAAO1B,GACL,OAAO/B,KAAKoD,IAAIM,GAAG3B,EAAUqB,IAC9B,GAED,sBAGAO,WACE,OAAOJ,IAAAA,OAAYvD,KAAKG,UACzB,uBAEDyD,WACE,OAAO5D,KAAK2D,UACb,GAED,qBAGAxD,WACE,OAAOH,KAAKsC,UACb,GAED,sBAGAA,WACE,IAAMlQ,EAAI4N,KAAKoD,IAAIS,YAAYrB,EAAAA,IAC/B,GAAIpQ,EAAEQ,SAAWqQ,GACf,OAAO7Q,EAGT,IAAM0R,EAAUtB,EAAAA,GAAAA,MAAa,IAE7B,OADApQ,EAAEoK,KAAKsH,EAAS,GAAK1R,EAAEQ,QAChBkR,CACR,GAED,sBAGA1H,WACE,OAAO4D,KAAK2D,UACb,IAOD,qBA/Da,WACX,IAAMI,EAAM,IAAIZ,EAAUD,IAE1B,OADAA,IAA0B,EACnB,IAAIC,EAAUY,EAAIzB,WAC1B,wEA4D0B,WACzB0B,EACAC,EACAC,GAHyB,8EAUzB,OALMxR,EAAS8P,EAAAA,GAAAA,OAAc,CAC3BwB,EAAc1B,WACdE,EAAAA,GAAAA,KAAYyB,GACZC,EAAU5B,aAEN6B,GAAiBC,EAAAA,EAAAA,GAAO1R,GAA9B,kBACO,IAAIyQ,EAAUgB,IAArB,wBAAO,EAAP,iBACD,uDAxEA,IA6ED,sCAC+B,SAC7BE,EACAH,GAEA,IAAIxR,EAAS8P,EAAAA,GAAAA,MAAa,GAC1B6B,EAAMC,SAAQ,SAAUL,GACtB,GAAIA,EAAKrR,OA5JgB,GA6JvB,MAAM,IAAIN,UAAJ,4BAERI,EAAS8P,EAAAA,GAAAA,OAAc,CAAC9P,EAAQ4P,GAAS2B,QAE3CvR,EAAS8P,EAAAA,GAAAA,OAAc,CACrB9P,EACAwR,EAAU5B,WACVE,EAAAA,GAAAA,KAAY,2BAEd,IAAM2B,GAAiBC,EAAAA,EAAAA,GAAO1R,GAC9B,GAAIwP,GAAUiC,GACZ,MAAM,IAAIpQ,MAAJ,kDAER,OAAO,IAAIoP,EAAUgB,EACtB,GAQD,2EACiC,WAC/BE,EACAH,GAF+B,+FAIxBlE,KAAKuE,yBAAyBF,EAAOH,IAA5C,wBAAO,EAAP,sBACD,qDAND,IAQA,oCAO6B,SAC3BG,EACAH,GAIA,IAFA,IACIM,EADAC,EAAQ,IAEI,GAATA,GAAY,CACjB,IACE,IAAMC,EAAiBL,EAAMM,OAAOnC,EAAAA,GAAAA,KAAY,CAACiC,KACjDD,EAAUxE,KAAKuE,yBAAyBG,EAAgBR,EAOzD,CANC,MAAOU,GACP,GAAIA,aAAetS,UACjB,MAAMsS,EAERH,IACA,QACD,CACD,MAAO,CAACD,EAASC,EAClB,CACD,MAAM,IAAI1Q,MAAJ,gDACP,GAED,yEAM+B,WAC7BsQ,EACAH,GAF6B,+FAItBlE,KAAK6E,uBAAuBR,EAAOH,IAA1C,wBAAO,EAAP,sBACD,qDAXD,IAaA,uBAGgB,SAACY,GAEf,OAAO5C,GADQ,IAAIiB,EAAU2B,GACL3E,UACzB,OAxMI,CAAwBuC,IAAlBS,GA2CJ4B,QAAqB,IAAI5B,GAAU,oCAgK5CN,GAAcnC,IAAIyC,GAAW,CAC3B6B,KAAM,SACN/M,OAAQ,CAAC,CAAC,MAAO,WC1P6B,IAAIkL,GAClD,+CCGF,ICCa8B,GAAmB,KCPnBC,GAAN,0CAGL3R,SAAAA,EAAY4R,GAAmB,MAE7B,OAF6B,gBAC7B,kCAAmBA,EAAU,0CAH/BA,eAE+B,EAE7B,EAAKA,UAAYA,EAAjB,CACD,kBANI,EAMJ,OAN6DpR,QAShEV,OAAO+R,eACLF,GAA2C1R,UAC3C,OACA,CACEyH,MAAO,+CAJX,IAQaoK,GAAN,0CAGL9R,SAAAA,EAAY4R,EAAmBG,GAAwB,MAQrD,OARqD,gBACrD,cACG,2CAAmCA,EAAeC,QACjD,GACA,oBACA,sDAHF,UAIKJ,EAAU,8CARnBA,eAEuD,EAQrD,EAAKA,UAAYA,EAAjB,CACD,kBAZI,EAYJ,OAZiDpR,QAepDV,OAAO+R,eAAeC,GAA+B7R,UAAW,OAAQ,CACtEyH,MAAO,mCADT,IAIauK,GAAN,0CAGLjS,SAAAA,EAAY4R,GAAmB,MAE7B,OAF6B,gBAC7B,kCAAmBA,EAAU,iDAH/BA,eAE+B,EAE7B,EAAKA,UAAYA,EAAjB,CACD,kBANI,EAMJ,OANsDpR,QASzDV,OAAO+R,eAAeI,GAAoChS,UAAW,OAAQ,CAC3EyH,MAAO,wCADT,ICtCawK,GAAN,WAILlS,SAAAA,EACEmS,EACAC,IACA,oBANFD,uBAME,OALFC,4BAKE,EACA3F,KAAK0F,kBAAoBA,EACzB1F,KAAK2F,uBAAyBA,CAC/B,CA4DA,OA5DA,mCAEDC,WACE,IAAMA,EAAc,CAAC5F,KAAK0F,mBAK1B,OAJI1F,KAAK2F,yBACPC,EAAYhO,KAAKoI,KAAK2F,uBAAuBE,UAC7CD,EAAYhO,KAAKoI,KAAK2F,uBAAuBG,WAExCF,CACR,oBAEDG,SAAIC,GAAsC,IACxC,EADwC,UACfhG,KAAK4F,eAA9B,QAAK,EAAL,qBAA6C,KAAlCK,EAAX,QACE,GAAID,EAAQC,EAAWrT,OACrB,OAAOqT,EAAWD,GAElBA,GAASC,EAAWrT,MAEvB,gCAEF,qBAES,WACR,OAAOoN,KAAK4F,cAAcM,OAAOtT,MAClC,oCAEDuT,SACEC,GAIA,GAAIpG,KAAKpN,OAASyT,IAChB,MAAM,IAAItS,MAAM,yDAGlB,IAAMuS,EAAc,IAAItD,IACxBhD,KAAK4F,cACFM,OACA5B,SAAQ,SAACP,EAAKiC,GACbM,EAAY5F,IAAIqD,EAAIJ,WAAYqC,MAGpC,IAAMO,EAAgBxC,SAAAA,GACpB,IAAMyC,EAAWF,EAAYP,IAAIhC,EAAIJ,YACrC,QAAiBrL,IAAbkO,EACF,MAAM,IAAIzS,MACR,qEAEJ,OAAOyS,GAGT,OAAOJ,EAAaK,KAAKC,SAAAA,GACvB,MAAO,CACLC,eAAgBJ,EAAaG,EAAYxC,WACzC0C,kBAAmBF,EAAYG,KAAKJ,KAAIK,SAAAA,GAAI,OAC1CP,EAAaO,EAAKC,OADD,IAGnB9G,KAAMyG,EAAYzG,KAErB,GACF,OAtEI,GCCM8B,GAAY,WAAoC,IAAnChP,EAAmB,UAAH,6CAAG,YAC3C,OAAOiU,EAAAA,GAAkB,GAAIjU,EAC9B,EAoCYkU,GAAa,WAEQ,IADhClU,EAAmB,UAAH,6CAAG,SAEbmU,EAAMF,EAAAA,GAOV,CACEA,EAAAA,GAAiB,UACjBA,EAAAA,GAAiB,iBACjBA,EAAAA,GAAkBA,EAAAA,GAAoBA,EAAAA,MAAqB,GAAI,UAEjEjU,GAEIoU,EAAUD,EAAIxS,OAAOkF,KAAKsN,GAC1BE,EAAUF,EAAIvS,OAAOiF,KAAKsN,GAE1BG,EAAUH,EAsBhB,OApBAG,EAAQ3S,OAAS,SAACtC,EAAec,GAE/B,OADaiU,EAAQ/U,EAAGc,GACb,MAAUkJ,YAGvBiL,EAAQ1S,OAAS,SAAC2S,EAAalV,EAAec,GAC5C,IAAM+M,EAAO,CACXsH,MAAO/E,EAAAA,GAAAA,KAAY8E,EAAK,SAE1B,OAAOF,EAAQnH,EAAM7N,EAAGc,IAG1BmU,EAAQG,MAASF,SAAAA,GACf,OACEN,EAAAA,KAAmBlU,KACnBkU,EAAAA,KAAmBlU,KACnB0P,EAAAA,GAAAA,KAAY8E,EAAK,QAAQ1U,QAItByU,CACR,EAyEM,SAASI,GAASC,EAAWzP,GAClC,IAAM0P,EAAgBC,SAAhBD,EAAgBC,GACpB,GAAIA,EAAK9U,MAAQ,EACf,OAAO8U,EAAK9U,KACP,GAA0B,oBAAf8U,EAAKJ,MACrB,OAAOI,EAAKJ,MAAMvP,EAAO2P,EAAK7U,WACzB,GAAI,UAAW6U,GAAQ,kBAAmBA,EAAM,CACrD,IAAMC,EAAQ5P,EAAO2P,EAAK7U,UAC1B,GAAIoF,MAAMC,QAAQyP,GAChB,OAAOA,EAAMjV,OAAS+U,EAAaC,EAAKtQ,cAE3C,MAAM,GAAI,WAAYsQ,EAErB,OAAOH,GAAS,CAAClT,OAAQqT,GAAO3P,EAAO2P,EAAK7U,WAG9C,OAAO,GAGLyU,EAAQ,EAKZ,OAJAE,EAAKnT,OAAO0D,OAAOqM,SAASsD,SAAAA,GAC1BJ,GAASG,EAAaC,MAGjBJ,CACR,CC3LM,SAASM,GAAajH,GAG3B,IAFA,IAAIX,EAAM,EACN6H,EAAO,IACF,CACP,IAAIC,EAAOnH,EAAM7H,QAGjB,GAFAkH,IAAe,IAAP8H,IAAwB,EAAPD,EACzBA,GAAQ,EACc,KAAV,IAAPC,GACH,KAEH,CACD,OAAO9H,CACR,CAEM,SAAS+H,GAAapH,EAAsBX,GAEjD,IADA,IAAIgI,EAAUhI,IACL,CACP,IAAI8H,EAAiB,IAAVE,EAEX,GAAe,IADfA,IAAY,GACM,CAChBrH,EAAMjJ,KAAKoQ,GACX,KACD,CACCA,GAAQ,IACRnH,EAAMjJ,KAAKoQ,EAEd,CACF,CC3Bc,SAAS,GACtBG,EACA/F,GAEA,IAAK+F,EACH,MAAM,IAAIpU,MAAMqO,GAAW,mBAE9B,KCaiBgG,GCLLC,GAAN,WAIL9U,SAAAA,EAAY+U,EAAkBC,IAAwB,oBAHtDD,WAGsD,OAFtDC,gBAEsD,EACpDvI,KAAKsI,MAAQA,EACbtI,KAAKuI,WAAaA,CACnB,CAmCA,OAnCA,4CAqCDC,WACE,IAAMC,GAAa,OAAIzI,KAAKuI,WAAWG,WACvC3J,GAAO0J,EAAW7V,QAAU,IAAK,2CAEjC,IAAM+V,EAAkBF,EAAWG,QACjC,gBAAI9B,GAAJ,YAAC,UAAaA,EAAK+B,UAAY/B,EAAKgC,UADd,IAGlBC,EAAkBN,EAAWG,QACjC,gBAAI9B,GAAJ,YAAC,UAAaA,EAAK+B,WAAa/B,EAAKgC,UADf,IAGlBE,EAAqBP,EAAWG,QACpC,gBAAI9B,GAAJ,YAAC,UAAcA,EAAK+B,UAAY/B,EAAKgC,UADZ,IAGrBG,EAAqBR,EAAWG,QACpC,gBAAI9B,GAAJ,YAAC,UAAcA,EAAK+B,WAAa/B,EAAKgC,UADb,IAIrBI,EAAwB,CAC5BC,sBAAuBR,EAAgB/V,OAASmW,EAAgBnW,OAChEwW,0BAA2BL,EAAgBnW,OAC3CyW,4BAA6BJ,EAAmBrW,QAuBlD,OAlBEmM,GACE4J,EAAgB/V,OAAS,EACzB,6CAGFmM,IADA,OAAuB4J,EAAgB,GAAvC,GAAM,KAEa3I,KAAKsI,MAAM3E,WAC5B,0DAWG,CAACuF,EAPkB,GAAH,eAClBP,EAAgBlC,KAAI,gBAAEjC,GAAF,YAAC,UAAc,IAAIrB,GAAUqB,EAAjD,MADqB,OAErBuE,EAAgBtC,KAAI,gBAAEjC,GAAF,YAAC,UAAc,IAAIrB,GAAUqB,EAAjD,MAFqB,OAGrBwE,EAAmBvC,KAAI,gBAAEjC,GAAF,YAAC,UAAc,IAAIrB,GAAUqB,EAApD,MAHqB,OAIrByE,EAAmBxC,KAAI,gBAAEjC,GAAF,YAAC,UAAc,IAAIrB,GAAUqB,EAApD,MAIN,mCAED8E,SACEC,GAEA,MACEvJ,KAAKwJ,4BACHD,EAAYvK,MAAMyK,WAClBC,SAAAA,GAAO,OACJA,EAAQb,WAAaa,EAAQC,WAAaD,EAAQZ,UAHvD,IADF,eAAOc,EAAD,KAAkBC,EAAlB,KAMN,EACE7J,KAAKwJ,4BACHD,EAAYvK,MAAMyK,WAClBC,SAAAA,GAAO,OACJA,EAAQb,WAAaa,EAAQC,YAAcD,EAAQZ,UAHxD,IADF,eAAOgB,EAAD,KAAkBC,EAAlB,KAQN,GAA+B,IAA3BH,EAAgBhX,QAA2C,IAA3BkX,EAAgBlX,OAIpD,MAAO,CACL,CACEoX,WAAYT,EAAYxF,IACxB6F,gBAAAA,EACAE,gBAAAA,GAEF,CACEjE,SAAUgE,EACV/D,SAAUiE,GAGf,GAED,yCACQP,SACNS,EACAC,GACmC,IAInC,EAJmC,OAC7BC,EAAqB,IAAIhS,MACzBiS,EAAc,IAAIjS,MAAxB,UAEiC6H,KAAKuI,WAAWG,WAAjD,QAAK,EAAL,qBAA4D,0BAAhDlE,EAAD,KACL0F,EADK,OACmB,WAC1B,IAAMnG,EAAM,IAAIZ,GAAUqB,GACpB6F,EAAmBJ,EAAmBK,WAAUC,SAAAA,GAAK,OACzDA,EAAM9G,OAAOM,EADU,IAGrBsG,GAAoB,IACtBtL,GAAOsL,EAAmB,IAAK,mCAC/BF,EAAmBvS,KAAKyS,GACxBD,EAAYxS,KAAKmM,GACjB,EAAKwE,WAAWiC,OAAOhG,GACxB,CAVyB,EAY7B,gCAED,MAAO,CAAC2F,EAAoBC,EAC7B,0BA3Ia,SACZhE,EACAkC,GAEA,IAAMC,EAAyB,IAAIvF,IAC7ByH,EAAsB1D,SAAAA,GAC1B,IAAMvC,EAAUuC,EAAOpD,WACnB+F,EAAUnB,EAAWxC,IAAIvB,GAS7B,YARgBlM,IAAZoR,IACFA,EAAU,CACRb,UAAU,EACVC,YAAY,EACZa,WAAW,GAEbpB,EAAW7H,IAAI8D,EAASkF,IAEnBA,GAGHgB,EAAeD,EAAmBnC,GACxCoC,EAAa7B,UAAW,EACxB6B,EAAa5B,YAAa,EAA1B,IAEA,EAFA,UAEiB1C,GAAjB,QAAK,EAAL,qBAA+B,KAApBuE,EAAX,QACEF,EAAmBE,EAAGzG,WAAWyF,WAAY,EAA7C,IACA,EADA,UAC0BgB,EAAG9D,MAA7B,QAAK,EAAL,qBAAmC,KAAxB+D,EAAX,QACQlB,EAAUe,EAAmBG,EAAY7D,QAC/C2C,EAAQb,WAARa,EAAQb,SAAa+B,EAAY/B,UACjCa,EAAQZ,aAARY,EAAQZ,WAAe8B,EAAY9B,WACpC,gCACF,gCAED,OAAO,IAAIT,EAAaC,EAAOC,EAChC,OA1CI,GC2CMsC,GAAN,WAWLtX,SAAAA,EAAYuX,GAAmB,gCAV/B5B,YAU+B,OAT/B6B,iBAS+B,OAR/BC,qBAQ+B,OAP/B5E,kBAO+B,OALvB6E,kBAA4C,IAAIjI,IAMtDhD,KAAKkJ,OAAS4B,EAAK5B,OACnBlJ,KAAK+K,YAAcD,EAAKC,YAAYtE,KAAIyE,SAAAA,GAAO,OAAI,IAAI/H,GAAU+H,EAA9C,IACnBlL,KAAKgL,gBAAkBF,EAAKE,gBAC5BhL,KAAKoG,aAAe0E,EAAK1E,aACzBpG,KAAKoG,aAAa9B,SAAQqG,SAAAA,GAAE,OAC1B,EAAKM,kBAAkBvK,IACrBiK,EAAGhE,eACH,EAAKoE,YAAYJ,EAAGhE,gBAHxB,GAMD,CAoPA,OApPA,6BAEU,WACT,MAAO,QACR,gCAEoB,WACnB,OAAO3G,KAAK+K,WACb,mCAEuB,WACtB,OAAO/K,KAAKoG,aAAaK,KACtBkE,SAAAA,GAAD,MAAqC,CACnChE,eAAgBgE,EAAGhE,eACnBC,kBAAmB+D,EAAGQ,SACtBlL,KAAMsD,IAAAA,OAAYoH,EAAG1K,MAHvB,GAMH,kCAEsB,WACrB,MAAO,EACR,+BAEDmL,WACE,OAAO,IAAI3F,GAAmBzF,KAAK0F,kBACpC,gCAqBD2F,SAAgBrF,GACd,OAAOA,EAAQhG,KAAKkJ,OAAOC,qBAC5B,kCAEDmC,SAAkBtF,GAChB,IAAMuF,EAAoBvL,KAAKkJ,OAAOC,sBACtC,OAAInD,GAAShG,KAAKkJ,OAAOC,sBACMnD,EAAQuF,EACTvL,KAAK+K,YAAYnY,OAAS2Y,EAE9BvL,KAAKkJ,OAAOG,4BAK7BrD,EADLuF,EAAoBvL,KAAKkJ,OAAOE,yBAGrC,4BAEDoC,SAAYxF,GACV,OAAOhG,KAAKiL,kBAAkBQ,IAAIzF,EACnC,2BAED0F,WACE,OAAO,OAAI1L,KAAKiL,kBAAkBvX,SACnC,8BAEDiY,WAA6B,WAC3B,OAAO3L,KAAK+K,YAAYnC,QAAO,SAACgD,EAAG5F,GAAJ,OAAe,EAAKwF,YAAYxF,EAAxD,GACR,0BAEDpD,WACE,IAAMiJ,EAAU7L,KAAK+K,YAAYnY,OAE7BkZ,EAAqB,GACzBC,GAAsBD,EAAUD,GAEhC,IAAMzF,EAAepG,KAAKoG,aAAaK,KAAIC,SAAAA,GACzC,IAAOyE,EAA4BzE,EAA5ByE,SAAUxE,EAAkBD,EAAlBC,eACX1G,EAAO9H,MAAM1F,KAAK8Q,IAAAA,OAAYmD,EAAYzG,OAE5C+L,EAA4B,GAChCD,GAAsBC,EAAiBb,EAASvY,QAEhD,IAAIqZ,EAAsB,GAG1B,OAFAF,GAAsBE,EAAWhM,EAAKrN,QAE/B,CACL+T,eAAAA,EACAqF,gBAAiBxJ,EAAAA,GAAAA,KAAYwJ,GAC7BE,WAAYf,EACZgB,WAAY3J,EAAAA,GAAAA,KAAYyJ,GACxBhM,KAAAA,EAEH,IAEGmM,EAA6B,GACjCL,GAAsBK,EAAkBhG,EAAaxT,QACrD,IAAIyZ,EAAoB7J,EAAAA,GAAAA,MAAayC,IACrCzC,EAAAA,GAAAA,KAAY4J,GAAkB5P,KAAK6P,GACnC,IAAIC,EAA0BF,EAAiBxZ,OAE/CwT,EAAa9B,SAAQoC,SAAAA,GACnB,IA2BM9T,EA3BoBoU,EAAAA,GAQxB,CACAA,EAAAA,GAAgB,kBAEhBA,EAAAA,GACEN,EAAYsF,gBAAgBpZ,OAC5B,mBAEFoU,EAAAA,GACEA,EAAAA,GAAgB,YAChBN,EAAYwF,WAAWtZ,OACvB,cAEFoU,EAAAA,GAAkBN,EAAYyF,WAAWvZ,OAAQ,cACjDoU,EAAAA,GACEA,EAAAA,GAAgB,aAChBN,EAAYzG,KAAKrN,OACjB,UAG6B+B,OAC/B+R,EACA2F,EACAC,GAEFA,GAA2B1Z,KAE7ByZ,EAAoBA,EAAkBpQ,MAAM,EAAGqQ,GAE/C,IAAMC,EAAiBvF,EAAAA,GASrB,CACAA,EAAAA,GAAkB,EAAG,yBACrBA,EAAAA,GAAkB,EAAG,6BACrBA,EAAAA,GAAkB,EAAG,+BACrBA,EAAAA,GAAkB8E,EAASlZ,OAAQ,YACnCoU,EAAAA,GAAiBnU,GAAiB,OAAQgZ,EAAS,QACnDhZ,GAAiB,qBAGb2Z,EAAc,CAClBrD,sBAAuB3G,EAAAA,GAAAA,KAAY,CAACxC,KAAKkJ,OAAOC,wBAChDC,0BAA2B5G,EAAAA,GAAAA,KAAY,CACrCxC,KAAKkJ,OAAOE,4BAEdC,4BAA6B7G,EAAAA,GAAAA,KAAY,CACvCxC,KAAKkJ,OAAOG,8BAEdyC,SAAUtJ,EAAAA,GAAAA,KAAYsJ,GACtBjF,KAAM7G,KAAK+K,YAAYtE,KAAI1C,SAAAA,GAAG,OAAIzB,GAASyB,EAAI5D,UAAzC,IACN6K,gBAAiBzH,IAAAA,OAAYvD,KAAKgL,kBAGhCyB,EAAWjK,EAAAA,GAAAA,MAAa,MACtB5P,EAAS2Z,EAAe5X,OAAO6X,EAAaC,GAElD,OADAJ,EAAkB7P,KAAKiQ,EAAU7Z,GAC1B6Z,EAASxQ,MAAM,EAAGrJ,EAASyZ,EAAkBzZ,OACrD,IAED,sBA3Jc,SAACkY,GACb,IACA,EADqBzC,GAAaqE,QAAQ5B,EAAK1E,aAAc0E,EAAK6B,UACjBnE,uBAAjD,eAAOU,EAAD,KAASxD,EAAT,KAEAU,EADc,IAAIX,GAAmBC,GACVS,oBAAoB2E,EAAK1E,cAAcK,KACrEkE,SAAAA,GAAD,MAA0D,CACxDhE,eAAgBgE,EAAGhE,eACnBwE,SAAUR,EAAG/D,kBACb3G,KAAMsD,IAAAA,OAAYoH,EAAG1K,MAHvB,IAMF,OAAO,IAAI4K,EAAQ,CACjB3B,OAAAA,EACA6B,YAAarF,EACbsF,gBAAiBF,EAAKE,gBACtB5E,aAAAA,GAEH,qBA6IU,SAAC1T,GAEV,IAAIka,GAAY,OAAIla,GAEdyW,EAAwByD,EAAU5T,QACxC,GACEmQ,KRvQ6B,IQwQ5BA,GAED,MAAM,IAAIpV,MACR,+EASJ,IALA,IAAMqV,EAA4BwD,EAAU5T,QACtCqQ,EAA8BuD,EAAU5T,QAExC6T,EAAed,GAAsBa,GACvC7B,EAAc,GACTpT,EAAI,EAAGA,EAAIkV,EAAclV,IAAK,CACrC,IAAMuT,EAAU0B,EAAU3Q,MAAM,EAAGgH,IACnC2J,EAAYA,EAAU3Q,MAAMgH,IAC5B8H,EAAYnT,KAAK,IAAIuL,GAAUX,EAAAA,GAAAA,KAAY0I,IAC5C,CAOD,IALA,IAAMF,EAAkB4B,EAAU3Q,MAAM,EAAGgH,IAGrCmJ,EAAmBL,GAFzBa,EAAYA,EAAU3Q,MAAMgH,KAGxBmD,EAAsC,GACjCzO,EAAI,EAAGA,EAAIyU,EAAkBzU,IAAK,CACzC,IAAMgP,EAAiBiG,EAAU5T,QAC3B6T,EAAed,GAAsBa,GACrCzB,EAAWyB,EAAU3Q,MAAM,EAAG4Q,GAE9BV,EAAaJ,GADnBa,EAAYA,EAAU3Q,MAAM4Q,IAEtBC,EAAYF,EAAU3Q,MAAM,EAAGkQ,GAC/BlM,EAAOsD,IAAAA,OAAYf,EAAAA,GAAAA,KAAYsK,IACrCF,EAAYA,EAAU3Q,MAAMkQ,GAC5B/F,EAAaxO,KAAK,CAChB+O,eAAAA,EACAwE,SAAAA,EACAlL,KAAAA,GAEH,CAaD,OAAO,IAAI4K,EAXS,CAClB3B,OAAQ,CACNC,sBAAAA,EACAC,0BAAAA,EACAC,4BAAAA,GAEF2B,gBAAiBzH,IAAAA,OAAYf,EAAAA,GAAAA,KAAYwI,IACzCD,YAAAA,EACA3E,aAAAA,GAIH,OA1QI,GCRM2G,GAAN,WAOLxZ,SAAAA,EAAYuX,IAAqB,oBANjC5B,YAMiC,OALjCxD,uBAKiC,OAJjCsF,qBAIiC,OAHjCgC,0BAGiC,OAFjCC,yBAEiC,EAC/BjN,KAAKkJ,OAAS4B,EAAK5B,OACnBlJ,KAAK0F,kBAAoBoF,EAAKpF,kBAC9B1F,KAAKgL,gBAAkBF,EAAKE,gBAC5BhL,KAAKgN,qBAAuBlC,EAAKkC,qBACjChN,KAAKiN,oBAAsBnC,EAAKmC,mBACjC,CA+aA,OA/aA,6BAEU,WACT,OAAO,CACR,wCAE4B,WAC3B,IACA,EADI1V,EAAQ,EAAZ,UACqByI,KAAKiN,qBAA1B,QAAK,EAAL,qBAA+C,KAApCC,EAAX,QACE3V,GAAS2V,EAAOpD,gBAAgBlX,OAASsa,EAAOtD,gBAAgBhX,MACjE,gCACD,OAAO2E,CACR,+BAED6T,SAAeN,GACb,IAAInF,EACJ,GACEmF,GACA,2BAA4BA,GAC5BA,EAAKnF,uBACL,CACA,GACE3F,KAAKmN,2BACLrC,EAAKnF,uBAAuBE,SAASjT,OACnCkY,EAAKnF,uBAAuBG,SAASlT,OAEvC,MAAM,IAAImB,MACR,+FAGJ4R,EAAyBmF,EAAKnF,4BACzB,GACLmF,GACA,+BAAgCA,GAChCA,EAAKsC,2BAELzH,EAAyB3F,KAAKqN,2BAC5BvC,EAAKsC,iCAEF,GAAIpN,KAAKiN,oBAAoBra,OAAS,EAC3C,MAAM,IAAImB,MACR,8EAGJ,OAAO,IAAI0R,GACTzF,KAAK0F,kBACLC,EAEH,gCAED0F,SAAgBrF,GACd,OAAOA,EAAQhG,KAAKkJ,OAAOC,qBAC5B,kCAEDmC,SAAkBtF,GAChB,IAAMuF,EAAoBvL,KAAKkJ,OAAOC,sBAChCmE,EAAuBtN,KAAK0F,kBAAkB9S,OACpD,OAAIoT,GAASsH,EACoBtH,EAAQsH,EACFtN,KAAKiN,oBAAoBnV,QAC5D,SAACP,EAAO2V,GAAR,OAAmB3V,EAAQ2V,EAAOtD,gBAAgBhX,MADf,GAEnC,GAGOoT,GAAShG,KAAKkJ,OAAOC,sBACDnD,EAAQuF,EACT+B,EAAuB/B,EAE3BvL,KAAKkJ,OAAOG,4BAK7BrD,EADLuF,EAAoBvL,KAAKkJ,OAAOE,yBAGrC,2CAEDiE,SACED,GAEA,IAKA,EALMzH,EAAiD,CACrDE,SAAU,GACVC,SAAU,IAFZ,UAK0B9F,KAAKiN,qBAA/B,yBAAWM,EAAX,QACQC,EAAeJ,EAA2BK,MAAKvC,SAAAA,GAAO,OAC1DA,EAAQnH,IAAIN,OAAO8J,EAAYvD,WADZ,IAGrB,IAAKwD,EACH,MAAM,IAAIzZ,MAAJ,oEACyDwZ,EAAYvD,WAAWrG,aAEvF,IAED,EAFC,UAEmB4J,EAAY3D,iBAAhC,QAAK,EAAL,qBAAiD,KAAtC5D,EAAX,QACE,KAAIA,EAAQwH,EAAaxO,MAAMyK,UAAU7W,QAKvC,MAAM,IAAImB,MAAJ,2CACgCiS,EAAM,oCAA2BuH,EAAYvD,WAAWrG,aAL9FgC,EAAuBE,SAASjO,KAC9B4V,EAAaxO,MAAMyK,UAAUzD,GAOlC,oCAED,EAFC,UAEmBuH,EAAYzD,iBAAhC,QAAK,EAAL,qBAAiD,KAAtC9D,EAAX,QACE,KAAIA,EAAQwH,EAAaxO,MAAMyK,UAAU7W,QAKvC,MAAM,IAAImB,MAAJ,2CACgCiS,EAAM,oCAA2BuH,EAAYvD,WAAWrG,aAL9FgC,EAAuBG,SAASlO,KAC9B4V,EAAaxO,MAAMyK,UAAUzD,GAOlC,kCAhCH,IAAK,EAAL,qBAAoD,GAiCnD,+BAED,OAAOL,CACR,0BAsCD/C,WACE,IAAM8K,EAAiCvV,QACvC4T,GACE2B,EACA1N,KAAK0F,kBAAkB9S,QAGzB,IAAM+a,EAAyB3N,KAAK4N,wBAC9BC,EAA4B1V,QAClC4T,GACE8B,EACA7N,KAAKgN,qBAAqBpa,QAG5B,IAAMkb,EAAgC9N,KAAK+N,+BACrCC,EAAmC7V,QACzC4T,GACEiC,EACAhO,KAAKiN,oBAAoBra,QAG3B,IAAMqb,EAAgBjH,EAAAA,GAUnB,CACDA,EAAAA,GAAgB,UAChBA,EAAAA,GACE,CACEA,EAAAA,GAAgB,yBAChBA,EAAAA,GAAgB,6BAChBA,EAAAA,GAAgB,gCAElB,UAEFA,EAAAA,GACE0G,EAA+B9a,OAC/B,2BAEFoU,EAAAA,GACEnU,KACAmN,KAAK0F,kBAAkB9S,OACvB,qBAEFC,GAAiB,mBACjBmU,EAAAA,GAAkB6G,EAA0Bjb,OAAQ,sBACpDoU,EAAAA,GACE2G,EAAuB/a,OACvB,0BAEFoU,EAAAA,GACEgH,EAAiCpb,OACjC,6BAEFoU,EAAAA,GACE8G,EAA8Blb,OAC9B,mCAIEsb,EAAoB,IAAI7b,WAAW4S,IAEnCkJ,EAA0BF,EAActZ,OAC5C,CACEyZ,OAH6B,IAI7BlF,OAAQlJ,KAAKkJ,OACbmF,wBAAyB,IAAIhc,WAAWqb,GACxChI,kBAAmB1F,KAAK0F,kBAAkBe,KAAI1C,SAAAA,GAAG,OAAIA,EAAI5D,SAAtC,IACnB6K,gBAAiBzH,IAAAA,OAAYvD,KAAKgL,iBAClCsD,mBAAoB,IAAIjc,WAAWwb,GACnCF,uBAAAA,EACAY,0BAA2B,IAAIlc,WAC7B2b,GAEFF,8BAAAA,GAEFI,GAEF,OAAOA,EAAkBjS,MAAM,EAAGkS,EACnC,sCAEOP,WACN,IAEA,EAFIY,EAAmB,EACjBb,EAAyB,IAAItb,WAAW4S,IAA9C,UAC0BjF,KAAKgN,sBAA/B,QAAK,EAAL,qBAAqD,KAA1CtG,EAAX,QACQ+H,EAAiCtW,QACvC4T,GACE0C,EACA/H,EAAYE,kBAAkBhU,QAGhC,IAAM8b,EAAoBvW,QAC1B4T,GAAsB2C,EAAmBhI,EAAYzG,KAAKrN,QAuB1D4b,GArB0BxH,EAAAA,GAMvB,CACDA,EAAAA,GAAgB,kBAChBA,EAAAA,GACEyH,EAA+B7b,OAC/B,kCAEFoU,EAAAA,GACEA,EAAAA,KACAN,EAAYE,kBAAkBhU,OAC9B,qBAEFoU,EAAAA,GAAkB0H,EAAkB9b,OAAQ,qBAC5CoU,EAAAA,GAAkBN,EAAYzG,KAAKrN,OAAQ,UAGP+B,OACpC,CACEgS,eAAgBD,EAAYC,eAC5B8H,+BAAgC,IAAIpc,WAClCoc,GAEF7H,kBAAmBF,EAAYE,kBAC/B8H,kBAAmB,IAAIrc,WAAWqc,GAClCzO,KAAMyG,EAAYzG,MAEpB0N,EACAa,EAEH,gCAED,OAAOb,EAAuB1R,MAAM,EAAGuS,EACxC,6CAEOT,WACN,IAEA,EAFIS,EAAmB,EACjBV,EAAgC,IAAIzb,WAAW4S,IAArD,UACqBjF,KAAKiN,qBAA1B,QAAK,EAAL,qBAA+C,KAApCC,EAAX,QACQyB,EAA+BxW,QACrC4T,GACE4C,EACAzB,EAAOtD,gBAAgBhX,QAGzB,IAAMgc,EAA+BzW,QACrC4T,GACE6C,EACA1B,EAAOpD,gBAAgBlX,QA+BzB4b,GA5BiCxH,EAAAA,GAM9B,CACDnU,GAAiB,cACjBmU,EAAAA,GACE2H,EAA6B/b,OAC7B,gCAEFoU,EAAAA,GACEA,EAAAA,KACAkG,EAAOtD,gBAAgBhX,OACvB,mBAEFoU,EAAAA,GACE4H,EAA6Bhc,OAC7B,gCAEFoU,EAAAA,GACEA,EAAAA,KACAkG,EAAOpD,gBAAgBlX,OACvB,qBAIyC+B,OAC3C,CACEqV,WAAYkD,EAAOlD,WAAW7J,UAC9BwO,6BAA8B,IAAItc,WAChCsc,GAEF/E,gBAAiBsD,EAAOtD,gBACxBgF,6BAA8B,IAAIvc,WAChCuc,GAEF9E,gBAAiBoD,EAAOpD,iBAE1BgE,EACAU,EAEH,gCAED,OAAOV,EAA8B7R,MAAM,EAAGuS,EAC/C,0BA7Oa,SAAC1D,GACb,IAQA,EARM+D,EAAexG,GAAaqE,QAAQ5B,EAAK1E,aAAc0E,EAAK6B,UAE5DM,EAAsB,IAAI9U,MAC1BwN,EAAiD,CACrDE,SAAU,IAAI1N,MACd2N,SAAU,IAAI3N,OAEV2W,EAAsBhE,EAAKsC,4BAA8B,GAA/D,UAC0B0B,GAA1B,QAAK,EAAL,qBAA+C,KAApCvF,EAAX,QACQwF,EAAgBF,EAAavF,mBAAmBC,GACtD,QAAsBjR,IAAlByW,EAA6B,SAC/B,UAAmDA,EAAnD,GAAOC,EAAD,YAAsBnJ,EAAD,EAACA,SAAUC,EAAAA,EAAAA,SACtCmH,EAAoBrV,KAAKoX,IACzBrJ,EAAAA,EAAuBE,UAASjO,KAAhC,gBAAwCiO,KACxCF,EAAAA,EAAuBG,UAASlO,KAAhC,gBAAwCkO,GACzC,CACF,gCAED,MAAoC+I,EAAarG,uBAAjD,eAAOU,EAAD,KAASxD,EAAT,KAKAsH,EAJc,IAAIvH,GACtBC,EACAC,GAEuCQ,oBACvC2E,EAAK1E,cAEP,OAAO,IAAI2G,EAAU,CACnB7D,OAAAA,EACAxD,kBAAAA,EACAsF,gBAAiBF,EAAKE,gBACtBgC,qBAAAA,EACAC,oBAAAA,GAEH,4BA6MiB,SAACiB,GACjB,IAAItB,GAAY,OAAIsB,GAEdE,EAASxB,EAAU5T,QACnBiW,ETpayB,ISoaVb,EACrBrP,GACEqP,IAAWa,EADP,0DAMNlQ,GACc,IAFEkQ,EACV,sEADUA,IAchB,IARA,IAAM/F,EAAwB,CAC5BC,sBAAuByD,EAAU5T,QACjCoQ,0BAA2BwD,EAAU5T,QACrCqQ,4BAA6BuD,EAAU5T,SAGnC0M,EAAoB,GACpB2I,EAA0BtC,GAAsBa,GAC7CjV,EAAI,EAAGA,EAAI0W,EAAyB1W,IAC3C+N,EAAkB9N,KAChB,IAAIuL,GAAUyJ,EAAUsC,OAAO,EAAGjM,MAQtC,IAJA,IAAM+H,EAAkBzH,IAAAA,OAAYqJ,EAAUsC,OAAO,EAAGjM,KAElDmJ,EAAmBL,GAAsBa,GACzCI,EAAqD,GAClDrV,EAAI,EAAGA,EAAIyU,EAAkBzU,IAAK,CACzC,IAAMgP,EAAiBiG,EAAU5T,QAC3BmW,EAA0BpD,GAAsBa,GAChDhG,EAAoBgG,EAAUsC,OAAO,EAAGC,GACxChD,EAAaJ,GAAsBa,GACnC3M,EAAO,IAAI5N,WAAWua,EAAUsC,OAAO,EAAG/C,IAChDa,EAAqBpV,KAAK,CACxB+O,eAAAA,EACAC,kBAAAA,EACA3G,KAAAA,GAEH,CAID,IAFA,IAAMmP,EAA2BrD,GAAsBa,GACjDK,EAAmD,GAChDtV,EAAI,EAAGA,EAAIyX,EAA0BzX,IAAK,CACjD,IAAMqS,EAAa,IAAI7G,GAAUyJ,EAAUsC,OAAO,EAAGjM,KAC/CoM,EAAwBtD,GAAsBa,GAC9ChD,EAAkBgD,EAAUsC,OAAO,EAAGG,GACtCC,EAAwBvD,GAAsBa,GAC9C9C,EAAkB8C,EAAUsC,OAAO,EAAGI,GAC5CrC,EAAoBrV,KAAK,CACvBoS,WAAAA,EACAJ,gBAAAA,EACAE,gBAAAA,GAEH,CAED,OAAO,IAAIiD,EAAU,CACnB7D,OAAAA,EACAxD,kBAAAA,EACAsF,gBAAAA,EACAgC,qBAAAA,EACAC,oBAAAA,GAEH,OA5bI,aH9BW7E,GAAAA,EAAAA,EAAAA,qBAAAA,GAAAA,uBAAAA,EAAAA,EAAAA,UAAAA,GAAAA,YAAAA,EAAAA,EAAAA,UAAAA,GAAAA,YAAAA,EAAAA,EAAAA,cAAAA,GAAAA,eAAAA,EAAAA,KAAAA,GAAAA,CAAAA,IAUlB,IAAMmH,GAAoB/M,EAAAA,GAAAA,MNnBe,IMmByB1C,KAAK,GAiD1D0P,GAAN,WAiBLjc,SAAAA,EAAYiO,IAAwC,oBAZpDqF,UAYoD,OAPpD3C,eAOoD,OAFpDjE,KAAeuC,EAAAA,GAAAA,MAAa,GAG1BxC,KAAKkE,UAAY1C,EAAK0C,UACtBlE,KAAK6G,KAAOrF,EAAKqF,KACbrF,EAAKvB,OACPD,KAAKC,KAAOuB,EAAKvB,KAEpB,CAeA,OAbD,8BAGA2D,WACE,MAAO,CACLiD,KAAM7G,KAAK6G,KAAKJ,KAAI,gBAAEM,EAAD,EAACA,OAAQ8B,EAAT,EAASA,SAAUC,EAAAA,EAAAA,WAAAA,MAAiB,CACvD/B,OAAQA,EAAOnD,SACfiF,SAAAA,EACAC,WAAAA,EAHkB,IAKpB5E,UAAWlE,KAAKkE,UAAUN,SAC1B3D,MAAM,OAAID,KAAKC,MAElB,OAtCI,GA2HMwP,GAAN,WA6ELlc,SAAAA,EACEiO,GAKA,IADA,oBA7EFkO,WAAyC,GA6EvC,KA9DFC,cA8DE,OAzDFvJ,aAA8C,GAyD5C,KApDF4E,qBAoDE,OA/CF4E,0BA+CE,OAzCFC,eAyCE,OAhCFC,yBAgCE,OA3BFC,cA2BE,OAtBFC,WAsBE,EACKxO,EASL,GANIA,EAAKmO,WACP3P,KAAK2P,SAAWnO,EAAKmO,UAEnBnO,EAAKkO,aACP1P,KAAK0P,WAAalO,EAAKkO,YAErBrc,OAAOG,UAAU0G,eAAeC,KAAKqH,EAAM,aAAc,CAC3D,IAAOyO,EAA6BzO,EAA7ByO,eAAgBJ,EAAarO,EAAbqO,UACvB7P,KAAK8P,oBAAsBG,EAC3BjQ,KAAK6P,UAAYA,CAClB,MAAM,GACLxc,OAAOG,UAAU0G,eAAeC,KAAKqH,EAAM,wBAC3C,CACA,IAAO0O,EACL1O,EADK0O,UAAWN,EAChBpO,EADgBoO,qBAElB5P,KAAKgL,gBAAkBkF,EACvBlQ,KAAK4P,qBAAuBA,CAC7B,KAAM,CACL,IAAO5E,EACLxJ,EADKwJ,gBAAiB6E,EACtBrO,EADsBqO,UAEpBA,IACF7P,KAAK6P,UAAYA,GAEnB7P,KAAKgL,gBAAkBA,CACxB,CACF,CA4kBA,OA1kBD,+BAvGa,WACX,OAAIhL,KAAK0P,WAAW9c,OAAS,EACpBoN,KAAK0P,WAAW,GAAGvK,UAErB,IACR,uBAqGDvB,WACE,MAAO,CACLoH,gBAAiBhL,KAAKgL,iBAAmB,KACzC2E,SAAU3P,KAAK2P,SAAW3P,KAAK2P,SAAS/L,SAAW,KACnDiM,UAAW7P,KAAK6P,UACZ,CACEpL,MAAOzE,KAAK6P,UAAUpL,MACtB0L,iBAAkBnQ,KAAK6P,UAAUM,iBAAiBvM,UAEpD,KACJwC,aAAcpG,KAAKoG,aAAaK,KAAIC,SAAAA,GAAW,OAAIA,EAAY9C,QAAjD,IACdwM,QAASpQ,KAAK0P,WAAWjJ,KAAI,YAC3B,OAD6B1E,EAAAA,UACZ6B,YAGtB,GAED,iBAGAyM,WAIe,kCAHVC,EADF,yBACEA,EADF,gBAKD,GAAqB,IAAjBA,EAAM1d,OACR,MAAM,IAAImB,MAAM,mBAYlB,OATAuc,EAAMhM,SAASsD,SAAAA,GACT,iBAAkBA,EACpB,EAAKxB,aAAe,EAAKA,aAAazB,OAAOiD,EAAKxB,cACzC,SAAUwB,GAAQ,cAAeA,GAAQ,SAAUA,EAC5D,EAAKxB,aAAaxO,KAAKgQ,GAEvB,EAAKxB,aAAaxO,KAAK,IAAI4X,GAAuB5H,OAG/C5H,IACR,GAED,4BAGAuQ,WACE,GACEvQ,KAAK+P,UACLS,KAAKC,UAAUzQ,KAAK4D,YAAc4M,KAAKC,UAAUzQ,KAAKgQ,OAEtD,OAAOhQ,KAAK+P,SAGd,IAAI/E,EACA5E,EAoBAuJ,EARJ,GAXI3P,KAAK6P,WACP7E,EAAkBhL,KAAK6P,UAAUpL,MAE/B2B,EADEpG,KAAKoG,aAAa,IAAMpG,KAAK6P,UAAUM,iBAC1B,CAACnQ,KAAK6P,UAAUM,kBAAhB,eAAqCnQ,KAAKoG,eAE1CpG,KAAKoG,eAGtB4E,EAAkBhL,KAAKgL,gBACvB5E,EAAepG,KAAKoG,eAEjB4E,EACH,MAAM,IAAIjX,MAAM,wCAQlB,GALIqS,EAAaxT,OAAS,GACxB8d,QAAQC,KAAK,4BAIX3Q,KAAK2P,SACPA,EAAW3P,KAAK2P,aACX,MAAI3P,KAAK0P,WAAW9c,OAAS,GAAKoN,KAAK0P,WAAW,GAAG3N,WAI1D,MAAM,IAAIhO,MAAM,kCAFhB4b,EAAW3P,KAAK0P,WAAW,GAAG3N,SAG/B,CAED,IAAK,IAAIpK,EAAI,EAAGA,EAAIyO,EAAaxT,OAAQ+E,IACvC,QAAkCW,IAA9B8N,EAAazO,GAAGuM,UAClB,MAAM,IAAInQ,MAAJ,wCAC6B4D,EAAE,8BAKzC,IAAM+T,EAAuB,GACvBkF,EAA8B,GACpCxK,EAAa9B,SAAQoC,SAAAA,GACnBA,EAAYG,KAAKvC,SAAQsG,SAAAA,GACvBgG,EAAahZ,MAAb,UAAsBgT,OAGxB,IAAM1G,EAAYwC,EAAYxC,UAAU9H,WACnCsP,EAAWmF,SAAS3M,IACvBwH,EAAW9T,KAAKsM,EAEnB,IAGDwH,EAAWpH,SAAQJ,SAAAA,GACjB0M,EAAahZ,KAAK,CAChBmP,OAAQ,IAAI5D,GAAUe,GACtB2E,UAAU,EACVC,YAAY,GAEf,IAGD,IAAMgI,EAA6B,GACnCF,EAAatM,SAAQsG,SAAAA,GACnB,IAAMmG,EAAenG,EAAY7D,OAAO3K,WAClC4U,EAAcF,EAAYxG,WAAU7M,SAAAA,GACxC,OAAOA,EAAEsJ,OAAO3K,aAAe2U,CAChC,IACGC,GAAe,GACjBF,EAAYE,GAAalI,WACvBgI,EAAYE,GAAalI,YAAc8B,EAAY9B,WACrDgI,EAAYE,GAAanI,SACvBiI,EAAYE,GAAanI,UAAY+B,EAAY/B,UAEnDiI,EAAYlZ,KAAKgT,EAEpB,IAGDkG,EAAYG,MAAK,SAAUxT,EAAGC,GAC5B,OAAID,EAAEoL,WAAanL,EAAEmL,SAEZpL,EAAEoL,UAAY,EAAI,EAEvBpL,EAAEqL,aAAepL,EAAEoL,WAEdrL,EAAEqL,YAAc,EAAI,EAGtBrL,EAAEsJ,OAAOpD,WAAWuN,cAAcxT,EAAEqJ,OAAOpD,WACnD,IAGD,IAAMwN,EAAgBL,EAAYxG,WAAU7M,SAAAA,GAC1C,OAAOA,EAAEsJ,OAAOtD,OAAOkM,EACxB,IACD,GAAIwB,GAAiB,EAAG,CACtB,MAAoBL,EAAY5B,OAAOiC,EAAe,GAA/CC,GAAP,YAAM,GACNA,EAAUvI,UAAW,EACrBuI,EAAUtI,YAAa,EACvBgI,EAAYO,QAAQD,EACrB,MACCN,EAAYO,QAAQ,CAClBtK,OAAQ4I,EACR9G,UAAU,EACVC,YAAY,IAjHQ,IAsHxB,EAtHwB,UAsHA9I,KAAK0P,YAA7B,yBAAWvK,EAAX,QACQ6L,EAAcF,EAAYxG,WAAU7M,SAAAA,GACxC,OAAOA,EAAEsJ,OAAOtD,OAAO0B,EAAUpD,UAClC,IACD,KAAIiP,GAAe,GAUjB,MAAM,IAAIjd,MAAJ,0BAA6BoR,EAAUpD,UAAU3F,aATlD0U,EAAYE,GAAanI,WAC5BiI,EAAYE,GAAanI,UAAW,EACpC6H,QAAQC,KACN,gOAOL,EAfH,IAAK,EAAL,qBAAyC,GAgBxC,+BAED,IAAIxH,EAAwB,EACxBC,EAA4B,EAC5BC,EAA8B,EAG5BiI,EAAuB,GACvBC,EAAyB,GAC/BT,EAAYxM,SAAQ,YAAoC,IAAlCyC,EAAD,EAACA,OAAQ8B,EAAT,EAASA,SAAUC,EAAAA,EAAAA,WAClCD,GACFyI,EAAW1Z,KAAKmP,EAAO3K,YACvB+M,GAAyB,EACpBL,IACHM,GAA6B,KAG/BmI,EAAa3Z,KAAKmP,EAAO3K,YACpB0M,IACHO,GAA+B,OAKrC,IAAM0B,EAAcuG,EAAW3M,OAAO4M,GAChCvE,EAA8C5G,EAAaK,KAC/DC,SAAAA,GACE,IAAOzG,EAAmByG,EAAnBzG,KAAMiE,EAAawC,EAAbxC,UACb,MAAO,CACLyC,eAAgBoE,EAAYyG,QAAQtN,EAAU9H,YAC9C+O,SAAUzE,EAAYG,KAAKJ,KAAIK,SAAAA,GAAI,OACjCiE,EAAYyG,QAAQ1K,EAAKC,OAAO3K,WADxB,IAGV6D,KAAMsD,IAAAA,OAAYtD,GAErB,IAQH,OALA+M,EAAqB1I,SAAQoC,SAAAA,GAC3B+K,GAAU/K,EAAYC,gBAAkB,GACxCD,EAAYyE,SAAS7G,SAAQkC,SAAAA,GAAQ,OAAIiL,GAAUjL,GAAY,EAA/D,OAGK,IAAIqE,GAAQ,CACjB3B,OAAQ,CACNC,sBAAAA,EACAC,0BAAAA,EACAC,4BAAAA,GAEF0B,YAAAA,EACAC,gBAAAA,EACA5E,aAAc4G,GAEjB,GAED,sBAGA0E,WACE,IAAMtP,EAAUpC,KAAKuQ,iBACfe,EAAalP,EAAQ2I,YAAY9O,MACrC,EACAmG,EAAQ8G,OAAOC,uBAGjB,GAAInJ,KAAK0P,WAAW9c,SAAW0e,EAAW1e,QAC1BoN,KAAK0P,WAAWiC,OAAM,SAACC,EAAM5L,GACzC,OAAOsL,EAAWtL,GAAOvC,OAAOmO,EAAK7P,UACtC,IAEU,OAAOK,EAQpB,OALApC,KAAK0P,WAAa4B,EAAW7K,KAAI1E,SAAAA,GAAS,MAAK,CAC7CoD,UAAW,KACXpD,UAAAA,EAFwC,IAKnCK,CACR,GAED,8BAGAyP,WACE,OAAO7R,KAAK0R,WAAW9O,WACxB,GAED,sEAGqB,WAACkP,GAAD,sFACLA,EAAWC,iBAAiB/R,KAAKuQ,kBAAxC,uCAA2DtV,OAAlE,wBAAO,EAAP,sBACD,mDALD,IAOA,wBAUA+W,WAAyC,2BAA3B5B,EAAJ,yBAAIA,EAAJ,gBACR,GAAuB,IAAnBA,EAAQxd,OACV,MAAM,IAAImB,MAAM,cAGlB,IAAMke,EAAO,IAAIC,IACjBlS,KAAK0P,WAAaU,EACfxH,QAAO7G,SAAAA,GACN,IAAMgC,EAAMhC,EAAU3F,WACtB,OAAI6V,EAAKxG,IAAI1H,KAGXkO,EAAK5B,IAAItM,IACF,EAEV,IACA0C,KAAI1E,SAAAA,GAAS,MAAK,CAACoD,UAAW,KAAMpD,UAAAA,EAAvB,GACjB,GAED,kBAcAI,WAAgC,2BAAxBiO,EAAJ,yBAAIA,EAAJ,gBACF,GAAuB,IAAnBA,EAAQxd,OACV,MAAM,IAAImB,MAAM,cAMlB,IAFA,IAAMke,EAAO,IAAIC,IACXC,EAAgB,GACtB,MAAqB/B,EAArB,eAA8B,CAAzB,IAAMgC,EAAX,KACQrO,EAAMqO,EAAOrQ,UAAU3F,WACzB6V,EAAKxG,IAAI1H,KAGXkO,EAAK5B,IAAItM,GACToO,EAAcva,KAAKwa,GAEtB,CAEDpS,KAAK0P,WAAayC,EAAc1L,KAAI2L,SAAAA,GAAM,MAAK,CAC7CjN,UAAW,KACXpD,UAAWqQ,EAAOrQ,UAFsB,IAK1C,IAAMK,EAAUpC,KAAK0R,WACrB1R,KAAKqS,aAAL,MAAArS,KAAA,CAAkBoC,GAAlB,OAA8B+P,GAC/B,GAED,yBAOAG,WAAuC,2BAAxBlC,EAAJ,yBAAIA,EAAJ,gBACT,GAAuB,IAAnBA,EAAQxd,OACV,MAAM,IAAImB,MAAM,cAMlB,IAFA,IAAMke,EAAO,IAAIC,IACXC,EAAgB,GACtB,MAAqB/B,EAArB,eAA8B,CAAzB,IAAMgC,EAAX,KACQrO,EAAMqO,EAAOrQ,UAAU3F,WACzB6V,EAAKxG,IAAI1H,KAGXkO,EAAK5B,IAAItM,GACToO,EAAcva,KAAKwa,GAEtB,CAED,IAAMhQ,EAAUpC,KAAK0R,WACrB1R,KAAKqS,aAAL,MAAArS,KAAA,CAAkBoC,GAAlB,OAA8B+P,GAC/B,GAED,0BAGAE,SAAajQ,GACX,IADwD,WAClDqK,EAAWrK,EAAQQ,YAAzB,mBADgCwN,EAAtB,iCAAsBA,EAAtB,kBAEVA,EAAQ9L,SAAQ8N,SAAAA,GACd,IAAMjN,EAAYhD,GAAKsK,EAAU2F,EAAOnQ,WACxC,EAAKsQ,cAAcH,EAAOrQ,UAAWO,GAAS6C,MAEjD,GAED,0BAKAqN,SAAazL,EAAmB5B,GAC9BnF,KAAK0R,WACL1R,KAAKuS,cAAcxL,EAAQ5B,EAC5B,GAED,2BAGAoN,SAAcxL,EAAmB5B,GAC/BsM,GAA+B,KAArBtM,EAAUvS,QAEpB,IAAMoT,EAAQhG,KAAK0P,WAAWpF,WAAUmI,SAAAA,GAAO,OAC7C1L,EAAOtD,OAAOgP,EAAQ1Q,UADV,IAGd,GAAIiE,EAAQ,EACV,MAAM,IAAIjS,MAAJ,0BAA6BgT,EAAO3K,aAG5C4D,KAAK0P,WAAW1J,GAAOb,UAAY3C,EAAAA,GAAAA,KAAY2C,EAChD,GAED,8BAGAuN,WACE,OAAO1S,KAAK2S,kBAAkB3S,KAAK6R,oBAAoB,EACxD,GAED,+BAGAc,SACElG,EACAmG,GACS,IACT,EADS,UAC4B5S,KAAK0P,YAA1C,QAAK,EAAL,qBAAsD,eAA1CvK,EAAD,EAACA,UAAWpD,EAAAA,EAAAA,UACrB,GAAkB,OAAdoD,GACF,GAAIyN,EACF,OAAO,OAGT,IAAKvQ,GAAO8C,EAAWsH,EAAU1K,EAAU5B,WACzC,OAAO,CAGZ,gCACD,OAAO,CACR,GAED,uBAGAyC,SAAUiQ,GACR,MAAiDxf,OAAOI,OACtD,CAACmf,sBAAsB,EAAMF,kBAAkB,GAC/CG,GAFKD,EAAD,EAACA,qBAAsBF,EAAAA,EAAAA,iBAKvBjG,EAAWzM,KAAK6R,mBACtB,GACEa,IACC1S,KAAK2S,kBAAkBlG,EAAUmG,GAElC,MAAM,IAAI7e,MAAM,iCAGlB,OAAOiM,KAAK8S,WAAWrG,EACxB,GAED,wBAGAqG,SAAWrG,GACT,IAAOiD,EAAc1P,KAAd0P,WACDqD,EAA2B,GACjChH,GAAsBgH,EAAgBrD,EAAW9c,QACjD,IAAMogB,EACJD,EAAengB,OAA6B,GAApB8c,EAAW9c,OAAc6Z,EAAS7Z,OACtDqgB,EAAkBzQ,EAAAA,GAAAA,MAAawQ,GAoBrC,OAnBAvB,GAAU/B,EAAW9c,OAAS,KAC9B4P,EAAAA,GAAAA,KAAYuQ,GAAgBvW,KAAKyW,EAAiB,GAClDvD,EAAWpL,SAAQ,WAAc0B,GAAU,IAAtBb,EAAAA,EAAAA,UACD,OAAdA,IACFsM,GAA+B,KAArBtM,EAAUvS,OAAX,gCACT4P,EAAAA,GAAAA,KAAY2C,GAAW3I,KACrByW,EACAF,EAAengB,OAAiB,GAARoT,OAI9ByG,EAASjQ,KACPyW,EACAF,EAAengB,OAA6B,GAApB8c,EAAW9c,QAErC6e,GACEwB,EAAgBrgB,QAAUqS,GADnB,iCAEmBgO,EAAgBrgB,OAAO,cAAKqS,KAEjDgO,CACR,GAED,gBAIQ,WAEN,OADAxB,GAAuC,IAA7BzR,KAAKoG,aAAaxT,QACrBoN,KAAKoG,aAAa,GAAGS,KAAKJ,KAAIyM,SAAAA,GAAM,OAAIA,EAAOnM,MAA/C,GACR,GAED,qBAIa,WAEX,OADA0K,GAAuC,IAA7BzR,KAAKoG,aAAaxT,QACrBoN,KAAKoG,aAAa,GAAGlC,SAC7B,GAED,gBAIQ,WAEN,OADAuN,GAAuC,IAA7BzR,KAAKoG,aAAaxT,QACrBoN,KAAKoG,aAAa,GAAGnG,IAC7B,IAED,mBAGW,SAACvN,GAMV,IAJA,IAAIka,GAAY,OAAIla,GAEdqgB,EAAiBhH,GAAsBa,GACzC8C,EAAa,GACR/X,EAAI,EAAGA,EAAIob,EAAgBpb,IAAK,CACvC,IAAMwN,EAAYyH,EAAU3Q,MAAM,ENj0BC,IMk0BnC2Q,EAAYA,EAAU3Q,MNl0Ba,IMm0BnCyT,EAAW9X,KAAK2L,IAAAA,OAAYf,EAAAA,GAAAA,KAAY2C,IACzC,CAED,OAAOsK,EAAY0D,SAAStI,GAAQpY,KAAKma,GAAY8C,EACtD,GAED,sBAGe,SACbtN,GAEa,IADbsN,EAA4B,UAAH,6CAAG,GAEtBlD,EAAc,IAAIiD,EAyCxB,OAxCAjD,EAAYxB,gBAAkB5I,EAAQ4I,gBAClC5I,EAAQ8G,OAAOC,sBAAwB,IACzCqD,EAAYmD,SAAWvN,EAAQ2I,YAAY,IAE7C2E,EAAWpL,SAAQ,SAACa,EAAWa,GAC7B,IAAMoN,EAAgB,CACpBjO,UACEA,GAAa5B,IAAAA,OAAYgM,IACrB,KACAhM,IAAAA,OAAY4B,GAClBpD,UAAWK,EAAQ2I,YAAY/E,IAEjCwG,EAAYkD,WAAW9X,KAAKwb,MAG9BhR,EAAQgE,aAAa9B,SAAQoC,SAAAA,GAC3B,IAAMG,EAAOH,EAAYyE,SAAS1E,KAAIyE,SAAAA,GACpC,IAAMnE,EAAS3E,EAAQ2I,YAAYG,GACnC,MAAO,CACLnE,OAAAA,EACA8B,SACE2D,EAAYkD,WAAW2D,MACrBH,SAAAA,GAAM,OAAIA,EAAOnR,UAAU3F,aAAe2K,EAAO3K,UADnD,KAEKgG,EAAQiJ,gBAAgBH,GAC/BpC,WAAY1G,EAAQkJ,kBAAkBJ,GAEzC,IAEDsB,EAAYpG,aAAaxO,KACvB,IAAI4X,GAAuB,CACzB3I,KAAAA,EACA3C,UAAW9B,EAAQ2I,YAAYrE,EAAYC,gBAC3C1G,KAAMsD,IAAAA,OAAYmD,EAAYzG,YAKpCuM,EAAYuD,SAAW3N,EACvBoK,EAAYwD,MAAQxD,EAAY5I,SAEzB4I,CACR,OA3rBI,GIxMM8G,GAAsB,IAAInQ,GACrC,+CAWWoQ,IAR+B,IAAIpQ,GAC9C,+CAGwC,IAAIA,GAC5C,+CAG8C,IAAIA,GAClD,gDAGWqQ,GAAqB,IAAIrQ,GACpC,+CAeWsQ,IAZwB,IAAItQ,GACvC,+CAGuC,IAAIA,GAC3C,+CAGwC,IAAIA,GAC5C,+CAGyC,IAAIA,GAC7C,gDC7BF,SAWsBuQ,GAAf,yCCjBP,cDiGC,OCjGD,2BDiBO,WACL5B,EACAtF,EACA4D,EACAuD,GAJK,oFAUL,OAAMC,EAAcD,GAAW,CAC7BE,cAAeF,EAAQE,cACvBC,oBAAqBH,EAAQG,qBAAuBH,EAAQI,WAC5DC,WAAYL,EAAQK,WACpB/D,eAAgB0D,EAAQ1D,gBAJ1B,SAOwB6B,EAAWmC,gBACjCzH,EACA4D,EACAwD,GAHF,OAAe,GAATzO,EAAY,EAAH,KAQkB,MAA/BqH,EAAYxB,iBACwB,MAApCwB,EAAYoD,qBAFd,iCAKUkC,EAAWoC,mBACf,CACEC,YAAW,OAAER,QAAAA,IAAAA,OAAAA,EAAAA,EAASQ,YACtBhP,UAAWA,EACX+K,UAAW1D,EAAYxB,gBACvB4E,qBAAsBpD,EAAYoD,sBAEpC+D,GAAWA,EAAQI,YARd,OAATK,EAAS,EAAH,KAUJnZ,MAVF,2BAYmC,MAAnCuR,EAAYsD,qBACa,MAAzBtD,EAAYqD,UAFP,iBAKL,OADOM,EAAoB3D,EAAYqD,UAAhCM,iBACDkE,EAAqBlE,EAAiBtJ,KAAK,GAAGE,OAApD,UAEQ+K,EAAWoC,mBACf,CACEC,YAAW,OAAER,QAAAA,IAAAA,OAAAA,EAAAA,EAASQ,YACtBlE,eAAgBzD,EAAYsD,oBAC5BuE,mBAAAA,EACAC,WAAY9H,EAAYqD,UAAUpL,MAClCU,UAAAA,GAEFwO,GAAWA,EAAQI,YATd,QAATK,EAAS,EAAH,KAWJnZ,MAXF,wBAmBC,OAN2B,OAAxB,OAAA0Y,QAAO,IAAPA,OAAA,EAAAA,EAASQ,cACXzD,QAAQC,KACN,yPAIH,UAEOmB,EAAWoC,mBACf/O,EACAwO,GAAWA,EAAQI,YAHd,QAATK,EAAS,EAAH,KAKJnZ,MALF,YAQEmZ,EAAOxP,IAAX,uBACQ,IAAI7Q,MAAJ,sBACWoR,EAAU,oBAAWqL,KAAKC,UAAU2D,GAAQ,MAD7D,iCAKKjP,GAAP,yBAAO,EAAP,iBACD,yBChGM,SAASoP,GAAMC,GACpB,OAAO,IAAIC,SAAQC,SAAAA,GAAO,OAAIC,WAAWD,EAASF,EAA3C,GACR,CCoBM,SAASI,GACdlN,EACAzP,GAEA,IAAM4c,EACJnN,EAAKnT,OAAOzB,MAAQ,EAAI4U,EAAKnT,OAAOzB,KAAOD,GAAgB6U,EAAMzP,GAC7DgI,EAAOuC,EAAAA,GAAAA,MAAaqS,GACpBC,EAAezhB,OAAOI,OAAO,CAACiT,YAAagB,EAAK1B,OAAQ/N,GAE9D,OADAyP,EAAKnT,OAAOI,OAAOmgB,EAAc7U,GAC1BA,CACR,CC1BM,ICSJrN,GDTUmiB,GAAsB/N,EAAAA,GAAkB,wBEO/CgO,GAAqBhO,EAAAA,GAUzB,CACAA,EAAAA,GAAiB,WACjBA,EAAAA,GAAiB,SACjBnU,GAAiB,oBACjBA,GAAiB,SACjBmU,EAAAA,GACE,CAAC+N,IACD,mBAISE,GAAuBD,GAAmBliB,KAgB1CoiB,GAAN,WAQL3hB,SAAAA,EAAYuX,IAAwB,oBAPpCqK,sBAOoC,OANpC1Q,WAMoC,OALpC2Q,mBAKoC,EAClCpV,KAAKmV,iBAAmBrK,EAAKqK,iBAC7BnV,KAAKyE,MAAQqG,EAAKrG,MAClBzE,KAAKoV,cAAgBtK,EAAKsK,aAC3B,CAiBA,OAfD,4CAMsB,SACpB1iB,GAEA,IAAM2iB,EAAeL,GAAmBtgB,OAAO4N,GAAS5P,GAAS,GACjE,OAAO,IAAIwiB,EAAa,CACtBC,iBAAkB,IAAIhS,GAAUkS,EAAaF,kBAC7C1Q,MAAO,IAAItB,GAAUkS,EAAa5Q,OAAOrI,WACzCgZ,cAAeC,EAAaD,eAE/B,OA7BI,GDfMvX,IApBVjL,GAoBuB,EAnBvBG,SAAAA,GACC,IAAMwB,GAAS+gB,EAAAA,EAAAA,IAAK1iB,GAAQG,GAC5B,EAVqBwB,SAAAA,GAGvB,MAAO,CAACG,OAFOH,EAAOG,OAAOkF,KAAKrF,GAElBI,OADDJ,EAAOI,OAAOiF,KAAKrF,GAEnC,CAM4BghB,CAAahhB,GAA/BI,EAAD,EAACA,OAAQD,EAAAA,EAAAA,OAET8gB,EAAejhB,EAYrB,OAVAihB,EAAa9gB,OAAS,SAAChC,EAAgBQ,GACrC,IAAMmB,EAAMK,EAAOhC,EAAQQ,GAC3B,OAAOuiB,EAAAA,EAAAA,IAAWjT,EAAAA,GAAAA,KAAYnO,KAGhCmhB,EAAa7gB,OAAS,SAAC+gB,EAAgBhjB,EAAgBQ,GACrD,IAAMmB,GAAMshB,EAAAA,EAAAA,IAAWD,EAAQ9iB,IAC/B,OAAO+B,EAAON,EAAK3B,EAAQQ,IAGtBsiB,CACR,GEglBUI,GAA6BviB,OAAOwiB,OAI9C,CACDC,OAAQ,CACN9P,MAAO,EACPzR,OAAQyS,EAAAA,GAA0D,CAChEA,EAAAA,GAAiB,eACjBA,EAAAA,GAAkB,YAClBA,EAAAA,GAAkB,SAClBnU,GAAiB,gBAGrBkjB,OAAQ,CACN/P,MAAO,EACPzR,OAAQyS,EAAAA,GAA0D,CAChEA,EAAAA,GAAiB,eACjBnU,GAAiB,gBAGrBmjB,SAAU,CACRhQ,MAAO,EACPzR,OAAQyS,EAAAA,GAA4D,CAClEA,EAAAA,GAAiB,eACjBnJ,GAAI,eAGRoY,eAAgB,CACdjQ,MAAO,EACPzR,OAAQyS,EAAAA,GAAkE,CACxEA,EAAAA,GAAiB,eACjBnU,GAAiB,QACjBA,GAAkB,QAClBmU,EAAAA,GAAkB,YAClBA,EAAAA,GAAkB,SAClBnU,GAAiB,gBAGrBqjB,oBAAqB,CACnBlQ,MAAO,EACPzR,OAAQyS,EAAAA,GAEN,CAACA,EAAAA,GAAiB,kBAEtBmP,qBAAsB,CACpBnQ,MAAO,EACPzR,OAAQyS,EAAAA,GAEN,CAACA,EAAAA,GAAiB,eAAgBA,EAAAA,GAAkB,eAExDoP,uBAAwB,CACtBpQ,MAAO,EACPzR,OAAQyS,EAAAA,GAEN,CAACA,EAAAA,GAAiB,eAAgBnU,GAAiB,iBAEvDwjB,sBAAuB,CACrBrQ,MAAO,EACPzR,OAAQyS,EAAAA,GAEN,CAACA,EAAAA,GAAiB,eAAgBnU,GAAiB,iBAEvDyjB,SAAU,CACRtQ,MAAO,EACPzR,OAAQyS,EAAAA,GAA4D,CAClEA,EAAAA,GAAiB,eACjBA,EAAAA,GAAkB,YAGtBuP,iBAAkB,CAChBvQ,MAAO,EACPzR,OAAQyS,EAAAA,GACN,CACEA,EAAAA,GAAiB,eACjBnU,GAAiB,QACjBA,GAAkB,QAClBmU,EAAAA,GAAkB,SAClBnU,GAAiB,gBAIvB2jB,eAAgB,CACdxQ,MAAO,GACPzR,OAAQyS,EAAAA,GAAkE,CACxEA,EAAAA,GAAiB,eACjBnU,GAAiB,QACjBA,GAAkB,QAClBA,GAAiB,gBAGrB4jB,iBAAkB,CAChBzQ,MAAO,GACPzR,OAAQyS,EAAAA,GACN,CACEA,EAAAA,GAAiB,eACjBnJ,GAAI,YACJhL,GAAkB,QAClBA,GAAiB,gBAIvB6jB,oBAAqB,CACnB1Q,MAAO,GACPzR,OAAQyS,EAAAA,GAEN,CAACA,EAAAA,GAAiB,oBAOX2P,GAAN,WAILpjB,SAAAA,KAAc,eA2Sb,OAlSD,0CAGoB,SAACqjB,GACnB,IACM3W,EAAO2U,GADAgB,GAA2BE,OACV,CAC5Be,SAAUD,EAAOC,SACjBC,MAAOF,EAAOE,MACd5S,UAAW5B,GAASsU,EAAO1S,UAAU5B,cAGvC,OAAO,IAAIkN,GAAuB,CAChC3I,KAAM,CACJ,CAACE,OAAQ6P,EAAOG,WAAYlO,UAAU,EAAMC,YAAY,GACxD,CAAC/B,OAAQ6P,EAAOI,iBAAkBnO,UAAU,EAAMC,YAAY,IAEhE5E,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,GAED,sBAGe,SACb2W,GAEA,IAAI3W,EACA4G,EACA,eAAgB+P,GAElB3W,EAAO2U,GADMgB,GAA2Ba,iBAChB,CACtBI,SAAU5Z,OAAO2Z,EAAOC,UACxB5S,KAAM2S,EAAO3S,KACbC,UAAW5B,GAASsU,EAAO1S,UAAU5B,cAEvCuE,EAAO,CACL,CAACE,OAAQ6P,EAAOG,WAAYlO,UAAU,EAAOC,YAAY,GACzD,CAAC/B,OAAQ6P,EAAOK,WAAYpO,UAAU,EAAMC,YAAY,GACxD,CAAC/B,OAAQ6P,EAAOM,SAAUrO,UAAU,EAAOC,YAAY,MAIzD7I,EAAO2U,GADMgB,GAA2BI,SAChB,CAACa,SAAU5Z,OAAO2Z,EAAOC,YACjDhQ,EAAO,CACL,CAACE,OAAQ6P,EAAOG,WAAYlO,UAAU,EAAMC,YAAY,GACxD,CAAC/B,OAAQ6P,EAAOM,SAAUrO,UAAU,EAAOC,YAAY,KAI3D,OAAO,IAAI0G,GAAuB,CAChC3I,KAAAA,EACA3C,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,GAED,oBAGa,SACX2W,GAEA,IAAI3W,EACA4G,EACA,eAAgB+P,GAElB3W,EAAO2U,GADMgB,GAA2BY,eAChB,CACtBW,KAAM7U,GAASsU,EAAOK,WAAW3U,YACjC2B,KAAM2S,EAAO3S,KACbC,UAAW5B,GAASsU,EAAO1S,UAAU5B,cAEvCuE,EAAO,CACL,CAACE,OAAQ6P,EAAOQ,cAAevO,UAAU,EAAOC,YAAY,GAC5D,CAAC/B,OAAQ6P,EAAOK,WAAYpO,UAAU,EAAMC,YAAY,MAI1D7I,EAAO2U,GADMgB,GAA2BG,OAChB,CACtB7R,UAAW5B,GAASsU,EAAO1S,UAAU5B,cAEvCuE,EAAO,CAAC,CAACE,OAAQ6P,EAAOQ,cAAevO,UAAU,EAAMC,YAAY,KAGrE,OAAO,IAAI0G,GAAuB,CAChC3I,KAAAA,EACA3C,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,GAED,mCAI4B,SAC1B2W,GAEA,IACM3W,EAAO2U,GADAgB,GAA2BK,eACV,CAC5BkB,KAAM7U,GAASsU,EAAOK,WAAW3U,YACjC2B,KAAM2S,EAAO3S,KACb4S,SAAUD,EAAOC,SACjBC,MAAOF,EAAOE,MACd5S,UAAW5B,GAASsU,EAAO1S,UAAU5B,cAEnCuE,EAAO,CACT,CAACE,OAAQ6P,EAAOG,WAAYlO,UAAU,EAAMC,YAAY,GACxD,CAAC/B,OAAQ6P,EAAOI,iBAAkBnO,UAAU,EAAOC,YAAY,IAMjE,OAJI8N,EAAOK,YAAcL,EAAOG,YAC9BlQ,EAAKjP,KAAK,CAACmP,OAAQ6P,EAAOK,WAAYpO,UAAU,EAAMC,YAAY,IAG7D,IAAI0G,GAAuB,CAChC3I,KAAAA,EACA3C,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,GAED,gCAGyB,SACvB2W,GAEA,IAAMpK,EAAc,IAAIiD,GACpB,eAAgBmH,GAAU,SAAUA,EACtCpK,EAAY6D,IACVsG,EAAcU,sBAAsB,CAClCN,WAAYH,EAAOG,WACnBC,iBAAkBJ,EAAOU,YACzBL,WAAYL,EAAOK,WACnBhT,KAAM2S,EAAO3S,KACb4S,SAAUD,EAAOC,SACjBC,MAAO7B,GACP/Q,UAAWlE,KAAKkE,aAIpBsI,EAAY6D,IACVsG,EAAcY,cAAc,CAC1BR,WAAYH,EAAOG,WACnBC,iBAAkBJ,EAAOU,YACzBT,SAAUD,EAAOC,SACjBC,MAAO7B,GACP/Q,UAAWlE,KAAKkE,aAKtB,IAAMsT,EAAa,CACjBF,YAAaV,EAAOU,YACpBnC,iBAAkByB,EAAOzB,kBAI3B,OADA3I,EAAY6D,IAAIrQ,KAAKyX,gBAAgBD,IAC9BhL,CACR,GAED,6BAGsB,SACpBoK,GAEA,IACM3W,EAAO2U,GADAgB,GAA2BQ,uBACV,CAC5BsB,WAAYpV,GAASsU,EAAOzB,iBAAiB7S,cAEzCqV,EAAkB,CACtB9Q,KAAM,CACJ,CAACE,OAAQ6P,EAAOU,YAAazO,UAAU,EAAOC,YAAY,GAC1D,CACE/B,OAAQwM,GACR1K,UAAU,EACVC,YAAY,GAEd,CAAC/B,OAAQyM,GAAoB3K,UAAU,EAAOC,YAAY,IAE5D5E,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEF,OAAO,IAAIuP,GAAuBmI,EACnC,GAED,0BAGmB,SAACf,GAClB,IACM3W,EAAO2U,GADAgB,GAA2BM,qBAElCyB,EAAkB,CACtB9Q,KAAM,CACJ,CAACE,OAAQ6P,EAAOU,YAAazO,UAAU,EAAOC,YAAY,GAC1D,CACE/B,OAAQwM,GACR1K,UAAU,EACVC,YAAY,GAEd,CAAC/B,OAAQ6P,EAAOzB,iBAAkBtM,UAAU,EAAMC,YAAY,IAEhE5E,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEF,OAAO,IAAIuP,GAAuBmI,EACnC,GAED,2BAGoB,SAACf,GACnB,IACM3W,EAAO2U,GADAgB,GAA2BO,qBACV,CAACU,SAAUD,EAAOC,WAEhD,OAAO,IAAIrH,GAAuB,CAChC3I,KAAM,CACJ,CAACE,OAAQ6P,EAAOU,YAAazO,UAAU,EAAOC,YAAY,GAC1D,CAAC/B,OAAQ6P,EAAOM,SAAUrO,UAAU,EAAOC,YAAY,GACvD,CACE/B,OAAQwM,GACR1K,UAAU,EACVC,YAAY,GAEd,CACE/B,OAAQyM,GACR3K,UAAU,EACVC,YAAY,GAEd,CAAC/B,OAAQ6P,EAAOzB,iBAAkBtM,UAAU,EAAMC,YAAY,IAEhE5E,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,GAED,4BAIqB,SAAC2W,GACpB,IACM3W,EAAO2U,GADAgB,GAA2BS,sBACV,CAC5BqB,WAAYpV,GAASsU,EAAOgB,oBAAoBtV,cAGlD,OAAO,IAAIkN,GAAuB,CAChC3I,KAAM,CACJ,CAACE,OAAQ6P,EAAOU,YAAazO,UAAU,EAAOC,YAAY,GAC1D,CAAC/B,OAAQ6P,EAAOzB,iBAAkBtM,UAAU,EAAMC,YAAY,IAEhE5E,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,GAED,sBAGe,SACb2W,GAEA,IAAI3W,EACA4G,EACA,eAAgB+P,GAElB3W,EAAO2U,GADMgB,GAA2BW,iBAChB,CACtBY,KAAM7U,GAASsU,EAAOK,WAAW3U,YACjC2B,KAAM2S,EAAO3S,KACb6S,MAAOF,EAAOE,MACd5S,UAAW5B,GAASsU,EAAO1S,UAAU5B,cAEvCuE,EAAO,CACL,CAACE,OAAQ6P,EAAOQ,cAAevO,UAAU,EAAOC,YAAY,GAC5D,CAAC/B,OAAQ6P,EAAOK,WAAYpO,UAAU,EAAMC,YAAY,MAI1D7I,EAAO2U,GADMgB,GAA2BU,SAChB,CACtBQ,MAAOF,EAAOE,QAEhBjQ,EAAO,CAAC,CAACE,OAAQ6P,EAAOQ,cAAevO,UAAU,EAAMC,YAAY,KAGrE,OAAO,IAAI0G,GAAuB,CAChC3I,KAAAA,EACA3C,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,OA/SI,GAAM0W,GASJzS,UAAuB,IAAIf,GAChC,oCC3tBJ,IAKa0U,GAAN,WAILtkB,SAAAA,KAAc,eA+Mb,OAxMD,gDAM0B,SAAC4Y,GACzB,OACE,GACChY,KAAK2jB,KAAK3L,EAAa0L,EAAOE,WAC7B,EACA,EAEL,GAED,2DAUiB,WACfjG,EACAxJ,EACA0P,EACA9T,EACAjE,GALe,sHAQe6R,EAAWmG,kCACrChY,EAAKrN,QADP,OAAmB,OAAbslB,EAAgB,EAAH,cAKOpG,EAAWqG,eACnCH,EAAQjW,UACR,aAFF,OAKA,GALMqW,EAAc,EAAH,KAKb5L,EAAkC,KAClB,OAAhB4L,EAAJ,qBACMA,EAAYC,WAAhB,iBACE,OAAA3H,QAAQ4H,MAAM,sDAAd,mBACO,GAAP,QAGEF,EAAYnY,KAAKrN,SAAWqN,EAAKrN,SACnC4Z,EAAcA,GAAe,IAAIiD,IACrBY,IACVsG,GAAc4B,SAAS,CACrBnB,cAAeY,EAAQjW,UACvB+U,MAAO7W,EAAKrN,UAKbwlB,EAAYI,MAAM/U,OAAOS,KAC5BsI,EAAcA,GAAe,IAAIiD,IACrBY,IACVsG,GAAcljB,OAAO,CACnB2jB,cAAeY,EAAQjW,UACvBmC,UAAAA,KAKFkU,EAAYvB,SAAWqB,IACzB1L,EAAcA,GAAe,IAAIiD,IACrBY,IACVsG,GAAc8B,SAAS,CACrB1B,WAAYzO,EAAMvG,UAClBmV,SAAUc,EAAQjW,UAClB8U,SAAUqB,EAAgBE,EAAYvB,YAG3C,wBAEDrK,GAAc,IAAIiD,IAAcY,IAC9BsG,GAAcY,cAAc,CAC1BR,WAAYzO,EAAMvG,UAClBiV,iBAAkBgB,EAAQjW,UAC1B8U,SAAUqB,EAAgB,EAAIA,EAAgB,EAC9CpB,MAAO7W,EAAKrN,OACZsR,UAAAA,KANJ,WAakB,OAAhBsI,EAAJ,kCACQkH,GACJ5B,EACAtF,EACA,CAAClE,EAAO0P,GACR,CACEjE,WAAY,cALhB,QAWE2E,EAAa1R,EAAAA,GAQjB,CACAA,EAAAA,GAAiB,eACjBA,EAAAA,GAAiB,UACjBA,EAAAA,GAAiB,eACjBA,EAAAA,GAAiB,sBACjBA,EAAAA,GACEA,EAAAA,GAAgB,QAChBA,EAAAA,GAAoBA,EAAAA,MAAqB,GACzC,WAIE+Q,EAAYF,EAAOE,UACrB7kB,EAAS,EACTylB,EAAQ1Y,EACR2Y,EAAe,GAAnB,aACOD,EAAM/lB,OAAS,GAAtB,iBAAyB,GACjBiO,EAAQ8X,EAAM1c,MAAM,EAAG8b,GACvB9X,EAAOuC,EAAAA,GAAAA,MAAauV,EAAY,IACtCW,EAAW/jB,OACT,CACE+R,YAAa,EACbxT,OAAAA,EACA2N,MAAOA,EACPgY,YAAa,EACbC,mBAAoB,GAEtB7Y,GAGIuM,GAAc,IAAIiD,IAAcY,IAAI,CACxCxJ,KAAM,CAAC,CAACE,OAAQiR,EAAQjW,UAAW8G,UAAU,EAAMC,YAAY,IAC/D5E,UAAAA,EACAjE,KAAAA,IAEF2Y,EAAahhB,KACX8b,GAA0B5B,EAAYtF,EAAa,CAAClE,EAAO0P,GAAU,CACnEjE,WAAY,gBAKZjC,EAAWiH,aAAalI,SAAS,cAArC,iBACE,OAA4B,EAA5B,UACM0D,GAAM,KAAZ,QAGFrhB,GAAU6kB,EACVY,EAAQA,EAAM1c,MAAM8b,GAApB,yCAEItD,QAAQuE,IAAIJ,GAAlB,QAgBE,OAZMF,EAAa1R,EAAAA,GAA2C,CAC5DA,EAAAA,GAAiB,iBAGb/G,EAAOuC,EAAAA,GAAAA,MAAakW,EAAW5lB,MACrC4lB,EAAW/jB,OACT,CACE+R,YAAa,GAEfzG,GAGIuM,GAAc,IAAIiD,IAAcY,IAAI,CACxCxJ,KAAM,CACJ,CAACE,OAAQiR,EAAQjW,UAAW8G,UAAU,EAAMC,YAAY,GACxD,CAAC/B,OAAQyM,GAAoB3K,UAAU,EAAOC,YAAY,IAE5D5E,UAAAA,EACAjE,KAAAA,IANF,UAQMyT,GACJ5B,EACAtF,EACA,CAAClE,EAAO0P,GACR,CACEjE,WAAY,cALhB,kCAWK,GAAP,yBAAO,EAAP,iBACD,2DAzLD,MAyLC,EAnNI,GAAM8D,GASJE,UAdU9S,ICXkB,IAAI9B,GACvC,mDCRE8V,GAAc5lB,OAAOG,UAAU4I,SAC/B8c,GAAU7lB,OAAOwT,MAAQ,SAASsS,GACpC,IAAItS,EAAO,GACX,IAAK,IAAIjT,KAAQulB,EAChBtS,EAAKjP,KAAKhE,GAEX,OAAOiT,CACT,EAEA,SAAS4J,GAAU2I,EAAKC,GACvB,IAAI1hB,EAAG2hB,EAAKhS,EAAKT,EAAM9C,EAAKwV,EAASC,EACrC,IAAY,IAARJ,EACH,MAAO,OAER,IAAY,IAARA,EACH,MAAO,QAER,cAAeA,GACd,IAAK,SACJ,GAAY,OAARA,EACH,OAAO,KACD,GAAIA,EAAIxV,QAAgC,oBAAfwV,EAAIxV,OACnC,OAAO6M,GAAU2I,EAAIxV,SAAUyV,GAG/B,GAAc,oBADdG,EAAQP,GAAY9e,KAAKif,IACO,CAG/B,IAFA9R,EAAM,IACNgS,EAAMF,EAAIxmB,OAAS,EACf+E,EAAI,EAAGA,EAAI2hB,EAAK3hB,IACnB2P,GAAOmJ,GAAU2I,EAAIzhB,IAAI,GAAQ,IAKlC,OAHI2hB,GAAO,IACVhS,GAAOmJ,GAAU2I,EAAIzhB,IAAI,IAEnB2P,EAAM,GAClB,CAAW,GAAc,oBAAVkS,EAA6B,CAMvC,IAHAF,GADAzS,EAAOqS,GAAQE,GAAKnI,QACTre,OACX0U,EAAM,GACN3P,EAAI,EACGA,EAAI2hB,QAGMhhB,KADhBihB,EAAU9I,GAAU2I,EADpBrV,EAAM8C,EAAKlP,KACmB,MAEzB2P,IACHA,GAAO,KAERA,GAAOkJ,KAAKC,UAAU1M,GAAO,IAAMwV,GAEpC5hB,IAED,MAAO,IAAM2P,EAAM,GACxB,CACK,OAAOkJ,KAAKC,UAAU2I,GAGzB,IAAK,WACL,IAAK,YACJ,OAAOC,EAAc,UAAO/gB,EAC7B,IAAK,SACJ,OAAOkY,KAAKC,UAAU2I,GACvB,QACC,OAAOK,SAASL,GAAOA,EAAM,KAEhC,QAEiB,SAASA,GACzB,IAAIM,EAAYjJ,GAAU2I,GAAK,GAC/B,QAAkB9gB,IAAdohB,EACH,MAAO,GAAIA,CAEb,ECrEA,SAASC,GAAcC,GAErB,IADA,IAAID,EAAgB,EACbC,EAAI,GACTA,GAAK,EACLD,IAEF,OAAOA,CACR,CAeD,IAKaE,GAAN,WAYLtmB,SAAAA,EACEumB,EACAC,EACAC,EACAC,EACAC,IACA,oBAhBKJ,mBAgBL,OAdKC,8BAcL,OAZKC,YAYL,OAVKC,sBAUL,OARKC,qBAQL,EACAla,KAAK8Z,cAAgBA,EACrB9Z,KAAK+Z,yBAA2BA,EAChC/Z,KAAKga,OAASA,EACdha,KAAKia,iBAAmBA,EACxBja,KAAKka,gBAAkBA,CACxB,CA8CA,OA9CA,gCAEDC,SAASC,GACP,OAAOpa,KAAKqa,qBAAqBD,GAAM,EACxC,qCAEDC,SAAqBD,GACnB,GAAIA,EAAOpa,KAAKka,gBAAiB,CAC/B,IAAMI,EACJX,GAjDI,KADYC,EAkDaQ,EA/DN,GA+DsC,GAjD/C,GACpBR,IACAA,GAAKA,GAAK,EACVA,GAAKA,GAAK,EACVA,GAAKA,GAAK,EACVA,GAAKA,GAAK,EACVA,GAAKA,GAAK,GAEC,GADXA,GAAKA,GAAK,MA2CJD,GAhEuB,IAiEvB,EAIF,MAAO,CAACW,EADUF,GADDpa,KAAKua,gBAAgBD,GAnEb,IAsE1B,CACC,IA1DkBV,EA0DZY,EAAkBJ,EAAOpa,KAAKka,gBAC9BO,EAAmBtmB,KAAKC,MAAMomB,EAAkBxa,KAAK8Z,eAG3D,MAAO,CAFO9Z,KAAKia,iBAAmBQ,EACpBD,EAAkBxa,KAAK8Z,cAG5C,oCAEDY,SAAoBJ,GAClB,OAAIA,GAASta,KAAKia,iBAhFS,IAiFjB9lB,KAAKoB,IAAI,EAAG+kB,GAAS,IAG1BA,EAAQta,KAAKia,kBAAoBja,KAAK8Z,cACvC9Z,KAAKka,eAGV,mCAEDS,SAAmBL,GACjB,OAAOta,KAAK0a,oBAAoBJ,GAASta,KAAKua,gBAAgBD,GAAS,CACxE,gCAEDC,SAAgBD,GACd,OAAIA,EAAQta,KAAKia,iBACR9lB,KAAKoB,IAAI,EAAG+kB,EAAQX,GAhGF,KAkGlB3Z,KAAK8Z,aAEf,OAtEI,GC9BMc,GAAN,0CAGLrnB,SAAAA,EAAY6O,EAAiByY,GAAiB,MAG5C,OAH4C,gBAC5C,cAAMzY,IAHRyY,UAE8C,EAG5C,EAAKA,KAAOA,EAAZ,CACD,kBAPI,EAOJ,OAPuC9mB,QAiC7B+mB,GAAN,0CAGLvnB,SAAAA,EAAAA,EAMEwnB,GACA,MALEC,EADF,EACEA,KACA5Y,EAFF,EAEEA,QACAnC,EAAAA,EAAAA,KAOF,OAPEA,EAAAA,EAAAA,GAAAA,KAAAA,IAIF,cAAuB,MAAjB8a,EAAA,UAA2BA,EAAc,aAAI3Y,GAAYA,IAVjE4Y,UASE,IARF/a,UAQE,EAEA,EAAK+a,KAAOA,EACZ,EAAK/a,KAAOA,EACZ,EAAKrM,KAAO,qBAAZ,CACD,kBAfI,EAeJ,OAfqCG,QC9BxC,GAAeknB,WAAWC,MCmB1B,OAEaC,GAAN,WAIL5nB,SAAAA,EAAYuX,IAAqC,oBAHjD/G,SAGiD,OAFjD/E,WAEiD,EAC/CgB,KAAK+D,IAAM+G,EAAK/G,IAChB/D,KAAKhB,MAAQ8L,EAAK9L,KACnB,CA6BA,OA7BA,gCAEDoc,WACE,IAAMC,EAAUpe,OAAO,sBACvB,OAAO+C,KAAKhB,MAAMsc,mBAAqBD,CACxC,8BAEiB,SAACE,GACjB,IAAMzU,ECnBH,SACLY,EACAzH,GAEA,IAAIqD,EACJ,IACEA,EAAUoE,EAAKnT,OAAOG,OAAOuL,EAG9B,CAFC,MAAO2E,GACP,MAAM,IAAI7Q,MAAM,wBAA0B6Q,EAC3C,CAED,GAAItB,EAAQkY,YAAc9T,EAAK1B,MAC7B,MAAM,IAAIjS,MAAJ,sDAC2CuP,EAAQkY,UAAU,eAAM9T,EAAK1B,QAIhF,OAAO1C,CACR,CDCgBmY,CAAWC,GAAuBH,GAEzCI,EAAyBJ,EAAY3oB,OAnBhB,GAoB3BmM,GAAO4c,GAA0B,EAAG,2BACpC5c,GAAO4c,EAAyB,KAAO,EAAG,2BAE1C,IAAMC,EAAyBD,EAAyB,GACjDlS,EAAazC,EAAAA,GAAoD,CACtEA,EAAAA,GAAiBnU,KAAoB+oB,EAAwB,eAC5DlnB,OAAO6mB,EAAYtf,MA1BK,KAwBpBwN,UAIP,MAAO,CACL6R,iBAAkBxU,EAAKwU,iBACvBO,iBAAkB/U,EAAK+U,iBACvBC,2BAA4BhV,EAAKiV,uBACjCC,UAC4B,IAA1BlV,EAAKkV,UAAUppB,OACX,IAAIuQ,GAAU2D,EAAKkV,UAAU,SAC7B1jB,EACNmR,UAAWA,EAAUhD,KAAIjC,SAAAA,GAAO,OAAI,IAAIrB,GAAUqB,EAAvC,IAEd,OApCI,GAuCDkX,GAAwB,CAC5B1V,MAAO,EACPzR,OAAQyS,EAAAA,GAML,CACDA,EAAAA,GAAiB,aACjBnJ,GAAI,oBACJmJ,EAAAA,GAAkB,oBAClBA,EAAAA,GAAgB,0BAChBA,EAAAA,KACAA,EAAAA,GACEnU,KACAmU,EAAAA,GAAoBA,EAAAA,MAAoB,GACxC,gBEhFAiV,GAAS,6CC2Df,IAAMC,IAAsBC,EAAAA,EAAAA,KAC1BC,EAAAA,EAAAA,IAASjZ,KACTkZ,EAAAA,EAAAA,OACAphB,SAAAA,GAAK,OAAI,IAAIkI,GAAUlI,EAHS,IAM5BqhB,IAAuBC,EAAAA,EAAAA,IAAM,EAACF,EAAAA,EAAAA,OAAUG,EAAAA,EAAAA,IAAQ,YAEhDC,IAA2BN,EAAAA,EAAAA,KAC/BC,EAAAA,EAAAA,IAAS5Z,EAAAA,IACT8Z,IACArhB,SAAAA,GAAK,OAAIuH,EAAAA,GAAAA,KAAYvH,EAAM,GAAI,SAHM,IAmSvC,SAASyhB,GACPC,GAEA,IAAI5I,EACAlB,EACJ,GAAkC,kBAAvB8J,EACT5I,EAAa4I,OACR,GAAIA,EAAoB,CAG7B5I,EADE4I,EADK5I,WAGPlB,GAH2C+J,EAAAA,EAAAA,GACzCD,EADF,GAID,CACD,MAAO,CAAC5I,WAAAA,EAAYlB,OAAAA,EACrB,CAKD,SAASgK,GAAsBC,GAC7B,OAAOniB,EAAAA,EAAAA,IAAM,EACXoiB,EAAAA,EAAAA,IAAK,CACHC,SAASR,EAAAA,EAAAA,IAAQ,OACjBS,IAAIZ,EAAAA,EAAAA,MACJS,OAAAA,KAEFC,EAAAA,EAAAA,IAAK,CACHC,SAASR,EAAAA,EAAAA,IAAQ,OACjBS,IAAIZ,EAAAA,EAAAA,MACJ/D,OAAOyE,EAAAA,EAAAA,IAAK,CACV/B,MAAMkC,EAAAA,EAAAA,MACN9a,SAASia,EAAAA,EAAAA,MACTpc,MAAMkd,EAAAA,EAAAA,KAASC,EAAAA,EAAAA,YAItB,CAED,IAAMC,GAAmBR,IAAgBK,EAAAA,EAAAA,OAKzC,SAASI,GAAoBC,GAC3B,OAAOpB,EAAAA,EAAAA,IAAOU,GAAgBU,GAASF,IAAkBpiB,SAAAA,GACvD,MAAI,UAAWA,EACNA,GAEA,kBACFA,GADE,IAEL6hB,QAAQxpB,EAAAA,EAAAA,IAAO2H,EAAM6hB,OAAQS,IAGlC,GACF,CAKD,SAASC,GAA8BviB,GACrC,OAAOqiB,IACLP,EAAAA,EAAAA,IAAK,CACHU,SAASV,EAAAA,EAAAA,IAAK,CACZ3C,MAAMsD,EAAAA,EAAAA,QAERziB,MAAAA,IAGL,CAKD,SAAS0iB,GAAmC1iB,GAC1C,OAAO8hB,EAAAA,EAAAA,IAAK,CACVU,SAASV,EAAAA,EAAAA,IAAK,CACZ3C,MAAMsD,EAAAA,EAAAA,QAERziB,MAAAA,GAEH,CAKD,SAAS2iB,GACPC,EACAC,GAEA,OAAgB,IAAZD,EACK,IAAI9Q,GAAU,CACnB7D,OAAQ4U,EAAS5U,OACjBxD,kBAAmBoY,EAAS/S,YAAYtE,KACtCuD,SAAAA,GAAU,OAAI,IAAI7G,GAAU6G,EADX,IAGnBgB,gBAAiB8S,EAAS9S,gBAC1BgC,qBAAsB8Q,EAAS1X,aAAaK,KAAIkE,SAAAA,GAAE,MAAK,CACrDhE,eAAgBgE,EAAGhE,eACnBC,kBAAmB+D,EAAGQ,SACtBlL,KAAMsD,IAAAA,OAAYoH,EAAG1K,MAH2B,IAKlDgN,oBAAqB6Q,EAAS7Q,sBAGzB,IAAIpC,GAAQiT,EAEtB,CAoRD,IAAMC,IAA6BhB,EAAAA,EAAAA,IAAK,CACtCiB,YAAYN,EAAAA,EAAAA,MACZO,gBAAgBP,EAAAA,EAAAA,MAChBQ,SAASR,EAAAA,EAAAA,MACTS,OAAOT,EAAAA,EAAAA,MACPU,UAAUV,EAAAA,EAAAA,QAoBNW,GAA2Bf,IAC/B3E,EAAAA,EAAAA,KACE2F,EAAAA,EAAAA,KACEvB,EAAAA,EAAAA,IAAK,CACHzC,OAAOoD,EAAAA,EAAAA,MACPa,eAAeb,EAAAA,EAAAA,MACfc,QAAQd,EAAAA,EAAAA,MACRe,aAAaf,EAAAA,EAAAA,WAkBfgB,IAAqB3B,EAAAA,EAAAA,IAAK,CAC9BzC,OAAOoD,EAAAA,EAAAA,MACPiB,WAAWjB,EAAAA,EAAAA,MACXkB,cAAclB,EAAAA,EAAAA,MACdmB,cAAcnB,EAAAA,EAAAA,MACdoB,aAAa3B,EAAAA,EAAAA,KAASO,EAAAA,EAAAA,OACtBqB,kBAAkB5B,EAAAA,EAAAA,KAASO,EAAAA,EAAAA,SAGvBsB,IAAyBjC,EAAAA,EAAAA,IAAK,CAClCjD,eAAe4D,EAAAA,EAAAA,MACf3D,0BAA0B2D,EAAAA,EAAAA,MAC1B1D,QAAQiF,EAAAA,EAAAA,MACRhF,kBAAkByD,EAAAA,EAAAA,MAClBxD,iBAAiBwD,EAAAA,EAAAA,QAWbwB,IAA0BC,EAAAA,EAAAA,KAAO9C,EAAAA,EAAAA,OAAU1D,EAAAA,EAAAA,KAAM+E,EAAAA,EAAAA,QAKjD0B,IAAyBd,EAAAA,EAAAA,KAAS3jB,EAAAA,EAAAA,IAAM,EAACoiB,EAAAA,EAAAA,IAAK,CAAC,IAAIV,EAAAA,EAAAA,SAKnDgD,IAAwBtC,EAAAA,EAAAA,IAAK,CACjCnY,IAAKwa,KAMDE,IAA0B9C,EAAAA,EAAAA,IAAQ,qBAWlC+C,IAAgBxC,EAAAA,EAAAA,IAAK,CACzB,eAAeV,EAAAA,EAAAA,MACf,eAAec,EAAAA,EAAAA,KAASO,EAAAA,EAAAA,SA8CpB8B,GAAqChC,IACzCT,EAAAA,EAAAA,IAAK,CACHnY,KAAK0Z,EAAAA,EAAAA,KAAS3jB,EAAAA,EAAAA,IAAM,EAACoiB,EAAAA,EAAAA,IAAK,CAAC,IAAIV,EAAAA,EAAAA,SAC/BxB,MAAMyD,EAAAA,EAAAA,KAAS3F,EAAAA,EAAAA,KAAM0D,EAAAA,EAAAA,QACrBlR,UAAUgS,EAAAA,EAAAA,KACRmB,EAAAA,EAAAA,KACE3F,EAAAA,EAAAA,KACE2F,EAAAA,EAAAA,KACEvB,EAAAA,EAAAA,IAAK,CACH1E,YAAY4G,EAAAA,EAAAA,MACZzG,OAAO6D,EAAAA,EAAAA,MACPxF,UAAU6G,EAAAA,EAAAA,MACVzd,MAAM0Y,EAAAA,EAAAA,KAAM0D,EAAAA,EAAAA,OACZoD,WAAWtC,EAAAA,EAAAA,KAASO,EAAAA,EAAAA,aAM9BgC,eAAevC,EAAAA,EAAAA,KAASO,EAAAA,EAAAA,OACxBiC,YAAYxC,EAAAA,EAAAA,KACVmB,EAAAA,EAAAA,KACEvB,EAAAA,EAAAA,IAAK,CACH7Y,WAAWmY,EAAAA,EAAAA,MACXpc,MAAMsc,EAAAA,EAAAA,IAAM,EAACF,EAAAA,EAAAA,OAAUG,EAAAA,EAAAA,IAAQ,mBA6fnCoD,GAAgCpC,IACpCT,EAAAA,EAAAA,IAAK,CACH8C,YAAYV,EAAAA,EAAAA,KAAO9C,EAAAA,EAAAA,OAAU1D,EAAAA,EAAAA,KAAM+E,EAAAA,EAAAA,QACnCoC,OAAO/C,EAAAA,EAAAA,IAAK,CACVgD,WAAWrC,EAAAA,EAAAA,MACXsC,UAAUtC,EAAAA,EAAAA,WAwLhB,IAAMuC,GAAgC3C,GAAcS,IAK9CmC,GAAwB5C,GAAcoB,IAKtCyB,GAA4B7C,GAAc0B,IAK1CoB,GAA6B9C,GAAc4B,IAK3CmB,GAAgB/C,IAAcI,EAAAA,EAAAA,OAmB9B4C,GAAqB9C,IACzBT,EAAAA,EAAAA,IAAK,CACHwD,OAAO7C,EAAAA,EAAAA,MACP8C,aAAa9C,EAAAA,EAAAA,MACb+C,gBAAgB/C,EAAAA,EAAAA,MAChBgD,wBAAwB/H,EAAAA,EAAAA,IAAMuD,OAsB5ByE,IAAoB5D,EAAAA,EAAAA,IAAK,CAC7ByB,QAAQnC,EAAAA,EAAAA,MACRuE,UAAUtC,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,OACnBmD,UAAUnD,EAAAA,EAAAA,MACVoD,gBAAgB3D,EAAAA,EAAAA,KAASd,EAAAA,EAAAA,SAsBrB0E,GAAgCvD,IACpC7E,EAAAA,EAAAA,KACEoE,EAAAA,EAAAA,IAAK,CACHvY,QAAS0X,GACTsC,QAAQnC,EAAAA,EAAAA,MACRuE,UAAUtC,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,OACnBmD,UAAUnD,EAAAA,EAAAA,MACVoD,gBAAgB3D,EAAAA,EAAAA,KAASd,EAAAA,EAAAA,WAQzB2E,GAA0BxD,IAC9B7E,EAAAA,EAAAA,KACEoE,EAAAA,EAAAA,IAAK,CACHhW,OAAQmV,GACRhR,SAAS6R,EAAAA,EAAAA,IAAK,CACZ1E,YAAY4G,EAAAA,EAAAA,MACZzG,MAAO0D,GACPrF,UAAU6G,EAAAA,EAAAA,MACVzd,KAAMwc,GACNgD,WAAW/B,EAAAA,EAAAA,YAMbuD,IAA0BlE,EAAAA,EAAAA,IAAK,CACnC/E,SAASqE,EAAAA,EAAAA,MACT6E,QAAQhE,EAAAA,EAAAA,MACRpG,OAAO4G,EAAAA,EAAAA,QAMHyD,GAAgC3D,IACpC7E,EAAAA,EAAAA,KACEoE,EAAAA,EAAAA,IAAK,CACHhW,OAAQmV,GACRhR,SAAS6R,EAAAA,EAAAA,IAAK,CACZ1E,YAAY4G,EAAAA,EAAAA,MACZzG,MAAO0D,GACPrF,UAAU6G,EAAAA,EAAAA,MACVzd,KAAMghB,GACNxB,WAAW/B,EAAAA,EAAAA,YAiBb0D,GAA8B5D,IAClC7E,EAAAA,EAAAA,KACEoE,EAAAA,EAAAA,IAAK,CACHlG,UAAU6G,EAAAA,EAAAA,MACVlZ,QAAS0X,OAQTmF,IAAoBtE,EAAAA,EAAAA,IAAK,CAC7B1E,YAAY4G,EAAAA,EAAAA,MACZzG,MAAO0D,GACPrF,UAAU6G,EAAAA,EAAAA,MACVzd,KAAMwc,GACNgD,WAAW/B,EAAAA,EAAAA,QAMP4D,IAAyBvE,EAAAA,EAAAA,IAAK,CAClChW,OAAQmV,GACRhR,QAASmW,KAGLE,IAAyBpF,EAAAA,EAAAA,KAC7BxhB,EAAAA,EAAAA,IAAM,EAACyhB,EAAAA,EAAAA,IAAS5Z,EAAAA,IAASye,MACzBtmB,EAAAA,EAAAA,IAAM,CAAC2hB,GAAsB2E,MAC7BhmB,SAAAA,GACE,OAAI9C,MAAMC,QAAQ6C,IACT3H,EAAAA,EAAAA,IAAO2H,EAAOwhB,IAEdxhB,CAEV,IAMGumB,IAA0BzE,EAAAA,EAAAA,IAAK,CACnC1E,YAAY4G,EAAAA,EAAAA,MACZzG,MAAO0D,GACPrF,UAAU6G,EAAAA,EAAAA,MACVzd,KAAMshB,GACN9B,WAAW/B,EAAAA,EAAAA,QAGP+D,IAA+B1E,EAAAA,EAAAA,IAAK,CACxChW,OAAQmV,GACRhR,QAASsW,KAMLE,IAAwB3E,EAAAA,EAAAA,IAAK,CACjC/d,OAAOrE,EAAAA,EAAAA,IAAM,EACX6hB,EAAAA,EAAAA,IAAQ,WACRA,EAAAA,EAAAA,IAAQ,aACRA,EAAAA,EAAAA,IAAQ,eACRA,EAAAA,EAAAA,IAAQ,kBAEVmF,QAAQjE,EAAAA,EAAAA,MACRkE,UAAUlE,EAAAA,EAAAA,QAONmE,GAA6CvE,IACjD3E,EAAAA,EAAAA,KACEoE,EAAAA,EAAAA,IAAK,CACH5X,WAAWkX,EAAAA,EAAAA,MACXjC,MAAMsD,EAAAA,EAAAA,MACN9Y,IAAKwa,GACL0C,MAAMxD,EAAAA,EAAAA,KAASjC,EAAAA,EAAAA,OACf0F,WAAW5E,EAAAA,EAAAA,KAASmB,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,YAQ7BsE,GAAmC1E,IACvC3E,EAAAA,EAAAA,KACEoE,EAAAA,EAAAA,IAAK,CACH5X,WAAWkX,EAAAA,EAAAA,MACXjC,MAAMsD,EAAAA,EAAAA,MACN9Y,IAAKwa,GACL0C,MAAMxD,EAAAA,EAAAA,KAASjC,EAAAA,EAAAA,OACf0F,WAAW5E,EAAAA,EAAAA,KAASmB,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,YAQ7BuE,IAA4BlF,EAAAA,EAAAA,IAAK,CACrCmF,cAAcxE,EAAAA,EAAAA,MACdZ,OAAQa,GAA6B0D,MAMjCc,IAA2BpF,EAAAA,EAAAA,IAAK,CACpChW,OAAQmV,GACRhR,QAASmW,KAMLe,IAAmCrF,EAAAA,EAAAA,IAAK,CAC5CmF,cAAcxE,EAAAA,EAAAA,MACdZ,OAAQa,GAA6BwE,MAMjCE,IAAiBtF,EAAAA,EAAAA,IAAK,CAC1BuF,QAAQ5E,EAAAA,EAAAA,MACRtD,MAAMsD,EAAAA,EAAAA,MACN6E,MAAM7E,EAAAA,EAAAA,QAMF8E,IAAyBzF,EAAAA,EAAAA,IAAK,CAClCmF,cAAcxE,EAAAA,EAAAA,MACdZ,OAAQuF,KAiEJI,IAAmB9nB,EAAAA,EAAAA,IAAM,EAC7BoiB,EAAAA,EAAAA,IAAK,CACHrV,MAAM/M,EAAAA,EAAAA,IAAM,EACV6hB,EAAAA,EAAAA,IAAQ,uBACRA,EAAAA,EAAAA,IAAQ,cACRA,EAAAA,EAAAA,IAAQ,2BACRA,EAAAA,EAAAA,IAAQ,UAEVpC,MAAMsD,EAAAA,EAAAA,MACNgF,WAAWhF,EAAAA,EAAAA,SAEbX,EAAAA,EAAAA,IAAK,CACHrV,MAAM8U,EAAAA,EAAAA,IAAQ,eACd8F,QAAQ5E,EAAAA,EAAAA,MACRtD,MAAMsD,EAAAA,EAAAA,MACNgF,WAAWhF,EAAAA,EAAAA,SAEbX,EAAAA,EAAAA,IAAK,CACHrV,MAAM8U,EAAAA,EAAAA,IAAQ,UACdpC,MAAMsD,EAAAA,EAAAA,MACNgF,WAAWhF,EAAAA,EAAAA,MACXiF,OAAO5F,EAAAA,EAAAA,IAAK,CACV6F,uBAAuBlF,EAAAA,EAAAA,MACvBmF,2BAA2BnF,EAAAA,EAAAA,MAC3BoF,uBAAuBpF,EAAAA,EAAAA,MACvBqF,yBAAyBrF,EAAAA,EAAAA,WAG7BX,EAAAA,EAAAA,IAAK,CACHrV,MAAM8U,EAAAA,EAAAA,IAAQ,QACdpC,MAAMsD,EAAAA,EAAAA,MACNgF,WAAWhF,EAAAA,EAAAA,MACX9Y,KAAKyX,EAAAA,EAAAA,UAOH2G,IAA+BjG,EAAAA,EAAAA,IAAK,CACxCmF,cAAcxE,EAAAA,EAAAA,MACdZ,OAAQ2F,KAMJQ,IAA8BlG,EAAAA,EAAAA,IAAK,CACvCmF,cAAcxE,EAAAA,EAAAA,MACdZ,OAAQa,IACNhjB,EAAAA,EAAAA,IAAM,CAAC0kB,GAAuBC,QAO5B4D,IAAyBnG,EAAAA,EAAAA,IAAK,CAClCmF,cAAcxE,EAAAA,EAAAA,MACdZ,QAAQY,EAAAA,EAAAA,QAGJyF,IAAoBpG,EAAAA,EAAAA,IAAK,CAC7BhW,QAAQsV,EAAAA,EAAAA,MACR+G,QAAQ9E,EAAAA,EAAAA,KAASjC,EAAAA,EAAAA,OACjBgH,KAAK/E,EAAAA,EAAAA,KAASjC,EAAAA,EAAAA,OACdiH,KAAKhF,EAAAA,EAAAA,KAASjC,EAAAA,EAAAA,OACdwB,SAASS,EAAAA,EAAAA,KAASjC,EAAAA,EAAAA,SAGdkH,IAAwBxG,EAAAA,EAAAA,IAAK,CACjCyG,YAAYnH,EAAAA,EAAAA,MACZoH,YAAYpH,EAAAA,EAAAA,MACZqH,gBAAgBhG,EAAAA,EAAAA,MAChBiG,kBAAkB1E,EAAAA,EAAAA,MAClB2E,cAAcjL,EAAAA,EAAAA,KAAM4D,EAAAA,EAAAA,IAAM,EAACmB,EAAAA,EAAAA,OAAUA,EAAAA,EAAAA,OAAUA,EAAAA,EAAAA,SAC/CmG,YAAYnG,EAAAA,EAAAA,MACZoG,UAAUpG,EAAAA,EAAAA,MACVqG,UAAUzF,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,SAMfsG,GAAkB1G,IACtBP,EAAAA,EAAAA,IAAK,CACHkH,SAAStL,EAAAA,EAAAA,IAAM4K,IACfW,YAAYvL,EAAAA,EAAAA,IAAM4K,OAIhBY,IAAqBxpB,EAAAA,EAAAA,IAAM,EAC/B6hB,EAAAA,EAAAA,IAAQ,cACRA,EAAAA,EAAAA,IAAQ,cACRA,EAAAA,EAAAA,IAAQ,eAGJ4H,IAA0BrH,EAAAA,EAAAA,IAAK,CACnC3C,MAAMsD,EAAAA,EAAAA,MACN2G,eAAe/F,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,OACxB9Y,IAAKwa,GACLkF,oBAAoBnH,EAAAA,EAAAA,IAASgH,MAMzBI,GAAgC/G,IACpC7E,EAAAA,EAAAA,KAAM2F,EAAAA,EAAAA,IAAS8F,MAMXI,GAA6ClH,IAAcI,EAAAA,EAAAA,OAE3D+G,IAA2B1H,EAAAA,EAAAA,IAAK,CACpC/S,WAAYkS,GACZtS,iBAAiB+O,EAAAA,EAAAA,KAAM+E,EAAAA,EAAAA,OACvB5T,iBAAiB6O,EAAAA,EAAAA,KAAM+E,EAAAA,EAAAA,SAGnBgH,IAA6B3H,EAAAA,EAAAA,IAAK,CACtCrN,YAAYiJ,EAAAA,EAAAA,KAAM0D,EAAAA,EAAAA,OAClBja,SAAS2a,EAAAA,EAAAA,IAAK,CACZhS,aAAa4N,EAAAA,EAAAA,KAAM0D,EAAAA,EAAAA,OACnBnT,QAAQ6T,EAAAA,EAAAA,IAAK,CACX5T,uBAAuBuU,EAAAA,EAAAA,MACvBtU,2BAA2BsU,EAAAA,EAAAA,MAC3BrU,6BAA6BqU,EAAAA,EAAAA,QAE/BtX,cAAcuS,EAAAA,EAAAA,KACZoE,EAAAA,EAAAA,IAAK,CACH5R,UAAUwN,EAAAA,EAAAA,KAAM+E,EAAAA,EAAAA,OAChBzd,MAAMoc,EAAAA,EAAAA,MACN1V,gBAAgB+W,EAAAA,EAAAA,SAGpB1S,iBAAiBqR,EAAAA,EAAAA,MACjBpP,qBAAqBkQ,EAAAA,EAAAA,KAASxE,EAAAA,EAAAA,IAAM8L,SAIlCE,IAAsB5H,EAAAA,EAAAA,IAAK,CAC/BhW,OAAQmV,GACR9J,QAAQ6M,EAAAA,EAAAA,MACRpZ,UAAUoZ,EAAAA,EAAAA,MACV2F,QAAQzH,EAAAA,EAAAA,KAASxiB,EAAAA,EAAAA,IAAM,EAAC6hB,EAAAA,EAAAA,IAAQ,gBAAgBA,EAAAA,EAAAA,IAAQ,oBAGpDqI,IAAyC9H,EAAAA,EAAAA,IAAK,CAClDhS,aAAa4N,EAAAA,EAAAA,IAAMgM,IACnBjV,YAAYiJ,EAAAA,EAAAA,KAAM0D,EAAAA,EAAAA,SAGdyI,IAA0B/H,EAAAA,EAAAA,IAAK,CACnCmE,QAAQhE,EAAAA,EAAAA,MACRlF,SAASqE,EAAAA,EAAAA,MACTnY,UAAWgY,KAGP6I,IAAuBhI,EAAAA,EAAAA,IAAK,CAChC5R,UAAUwN,EAAAA,EAAAA,IAAMuD,IAChBjc,MAAMoc,EAAAA,EAAAA,MACNnY,UAAWgY,KAGP8I,IAAoBrqB,EAAAA,EAAAA,IAAM,CAC9BoqB,GACAD,KAGIG,IAA2BtqB,EAAAA,EAAAA,IAAM,EACrCoiB,EAAAA,EAAAA,IAAK,CACHmE,QAAQhE,EAAAA,EAAAA,MACRlF,SAASqE,EAAAA,EAAAA,MACTnY,WAAWmY,EAAAA,EAAAA,SAEbU,EAAAA,EAAAA,IAAK,CACH5R,UAAUwN,EAAAA,EAAAA,KAAM0D,EAAAA,EAAAA,OAChBpc,MAAMoc,EAAAA,EAAAA,MACNnY,WAAWmY,EAAAA,EAAAA,UAIT6I,IAAyB/I,EAAAA,EAAAA,IAC7B6I,GACAC,IACAhqB,SAAAA,GACE,MAAI,aAAcA,GACT3H,EAAAA,EAAAA,IAAO2H,EAAO8pB,KAEdzxB,EAAAA,EAAAA,IAAO2H,EAAO6pB,GAExB,IAMGK,IAAmCpI,EAAAA,EAAAA,IAAK,CAC5CrN,YAAYiJ,EAAAA,EAAAA,KAAM0D,EAAAA,EAAAA,OAClBja,SAAS2a,EAAAA,EAAAA,IAAK,CACZhS,aAAa4N,EAAAA,EAAAA,IAAMgM,IACnBve,cAAcuS,EAAAA,EAAAA,IAAMuM,IACpBla,iBAAiBqR,EAAAA,EAAAA,MACjBpP,qBAAqBkQ,EAAAA,EAAAA,KAASmB,EAAAA,EAAAA,KAAS3F,EAAAA,EAAAA,IAAM8L,UAI3CW,IAAqBrI,EAAAA,EAAAA,IAAK,CAC9BsI,cAAc3H,EAAAA,EAAAA,MACd4H,MAAMjJ,EAAAA,EAAAA,MACN7D,OAAO2E,EAAAA,EAAAA,KAASd,EAAAA,EAAAA,OAChBkJ,cAAe5E,KAGX6E,IAAwBzI,EAAAA,EAAAA,IAAK,CACjClX,UAAU8S,EAAAA,EAAAA,IAAMuD,IAChBpW,UAAU6S,EAAAA,EAAAA,IAAMuD,MAMZuJ,IAAiC1I,EAAAA,EAAAA,IAAK,CAC1CnY,IAAKwa,GACLsG,KAAKhI,EAAAA,EAAAA,MACLiI,mBAAmBxI,EAAAA,EAAAA,KACjBmB,EAAAA,EAAAA,KACE3F,EAAAA,EAAAA,KACEoE,EAAAA,EAAAA,IAAK,CACH/W,OAAO0X,EAAAA,EAAAA,MACPtX,cAAcuS,EAAAA,EAAAA,KACZoE,EAAAA,EAAAA,IAAK,CACH5R,UAAUwN,EAAAA,EAAAA,KAAM+E,EAAAA,EAAAA,OAChBzd,MAAMoc,EAAAA,EAAAA,MACN1V,gBAAgB+W,EAAAA,EAAAA,cAO5BkI,aAAajN,EAAAA,EAAAA,KAAM+E,EAAAA,EAAAA,OACnBmI,cAAclN,EAAAA,EAAAA,KAAM+E,EAAAA,EAAAA,OACpBoI,aAAa3I,EAAAA,EAAAA,KAASmB,EAAAA,EAAAA,KAAS3F,EAAAA,EAAAA,KAAM0D,EAAAA,EAAAA,SACrC0J,kBAAkB5I,EAAAA,EAAAA,KAASmB,EAAAA,EAAAA,KAAS3F,EAAAA,EAAAA,IAAMyM,MAC1CY,mBAAmB7I,EAAAA,EAAAA,KAASmB,EAAAA,EAAAA,KAAS3F,EAAAA,EAAAA,IAAMyM,MAC3Ca,iBAAiB9I,EAAAA,EAAAA,IAASqI,IAC1BU,sBAAsB/I,EAAAA,EAAAA,KAASO,EAAAA,EAAAA,SAM3ByI,IAAuCpJ,EAAAA,EAAAA,IAAK,CAChDnY,IAAKwa,GACLsG,KAAKhI,EAAAA,EAAAA,MACLiI,mBAAmBxI,EAAAA,EAAAA,KACjBmB,EAAAA,EAAAA,KACE3F,EAAAA,EAAAA,KACEoE,EAAAA,EAAAA,IAAK,CACH/W,OAAO0X,EAAAA,EAAAA,MACPtX,cAAcuS,EAAAA,EAAAA,IAAMuM,SAK5BU,aAAajN,EAAAA,EAAAA,KAAM+E,EAAAA,EAAAA,OACnBmI,cAAclN,EAAAA,EAAAA,KAAM+E,EAAAA,EAAAA,OACpBoI,aAAa3I,EAAAA,EAAAA,KAASmB,EAAAA,EAAAA,KAAS3F,EAAAA,EAAAA,KAAM0D,EAAAA,EAAAA,SACrC0J,kBAAkB5I,EAAAA,EAAAA,KAASmB,EAAAA,EAAAA,KAAS3F,EAAAA,EAAAA,IAAMyM,MAC1CY,mBAAmB7I,EAAAA,EAAAA,KAASmB,EAAAA,EAAAA,KAAS3F,EAAAA,EAAAA,IAAMyM,MAC3Ca,iBAAiB9I,EAAAA,EAAAA,IAASqI,IAC1BU,sBAAsB/I,EAAAA,EAAAA,KAASO,EAAAA,EAAAA,SAG3B0I,IAA2BzrB,EAAAA,EAAAA,IAAM,EAAC6hB,EAAAA,EAAAA,IAAQ,IAAIA,EAAAA,EAAAA,IAAQ,YAGtD6J,IAAgBtJ,EAAAA,EAAAA,IAAK,CACzBhW,QAAQsV,EAAAA,EAAAA,MACRxF,UAAU6G,EAAAA,EAAAA,MACVe,aAAaH,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,OACtB4I,YAAYhI,EAAAA,EAAAA,KAASjC,EAAAA,EAAAA,SAMjBkK,GAAoBjJ,IACxBgB,EAAAA,EAAAA,KACEvB,EAAAA,EAAAA,IAAK,CACH7M,WAAWmM,EAAAA,EAAAA,MACXmK,mBAAmBnK,EAAAA,EAAAA,MACnBoK,YAAY/I,EAAAA,EAAAA,MACZ9E,cAAcD,EAAAA,EAAAA,KACZoE,EAAAA,EAAAA,IAAK,CACHvQ,YAAakY,GACb5d,MAAMwX,EAAAA,EAAAA,IAASmH,IACf5H,SAASV,EAAAA,EAAAA,IAASiJ,OAGtBM,SAASvJ,EAAAA,EAAAA,KAASxE,EAAAA,EAAAA,IAAM0N,KACxBtE,WAAWzD,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,OACpBoB,aAAaR,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,WAQtBiJ,GAA4BrJ,IAChCgB,EAAAA,EAAAA,KACEvB,EAAAA,EAAAA,IAAK,CACH7M,WAAWmM,EAAAA,EAAAA,MACXmK,mBAAmBnK,EAAAA,EAAAA,MACnBoK,YAAY/I,EAAAA,EAAAA,MACZgJ,SAASvJ,EAAAA,EAAAA,KAASxE,EAAAA,EAAAA,IAAM0N,KACxBtE,WAAWzD,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,OACpBoB,aAAaR,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,WAQtBkJ,GAAgCtJ,IACpCgB,EAAAA,EAAAA,KACEvB,EAAAA,EAAAA,IAAK,CACH7M,WAAWmM,EAAAA,EAAAA,MACXmK,mBAAmBnK,EAAAA,EAAAA,MACnBoK,YAAY/I,EAAAA,EAAAA,MACZ9E,cAAcD,EAAAA,EAAAA,KACZoE,EAAAA,EAAAA,IAAK,CACHvQ,YAAaqY,GACb/d,MAAMwX,EAAAA,EAAAA,IAASmH,IACf5H,SAASV,EAAAA,EAAAA,IAASiJ,OAGtBM,SAASvJ,EAAAA,EAAAA,KAASxE,EAAAA,EAAAA,IAAM0N,KACxBtE,WAAWzD,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,OACpBoB,aAAaR,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,WAQtBmJ,GAA0BvJ,IAC9BgB,EAAAA,EAAAA,KACEvB,EAAAA,EAAAA,IAAK,CACH7M,WAAWmM,EAAAA,EAAAA,MACXmK,mBAAmBnK,EAAAA,EAAAA,MACnBoK,YAAY/I,EAAAA,EAAAA,MACZ9E,cAAcD,EAAAA,EAAAA,KACZoE,EAAAA,EAAAA,IAAK,CACHvQ,YAAa2Y,GACbre,MAAMwX,EAAAA,EAAAA,IAAS6H,IACftI,SAASV,EAAAA,EAAAA,IAASiJ,OAGtBM,SAASvJ,EAAAA,EAAAA,KAASxE,EAAAA,EAAAA,IAAM0N,KACxBtE,WAAWzD,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,OACpBoB,aAAaR,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,WAQtBoJ,GAAsCxJ,IAC1CgB,EAAAA,EAAAA,KACEvB,EAAAA,EAAAA,IAAK,CACH7M,WAAWmM,EAAAA,EAAAA,MACXmK,mBAAmBnK,EAAAA,EAAAA,MACnBoK,YAAY/I,EAAAA,EAAAA,MACZ9E,cAAcD,EAAAA,EAAAA,KACZoE,EAAAA,EAAAA,IAAK,CACHvQ,YAAaqY,GACb/d,MAAMwX,EAAAA,EAAAA,IAAS6H,IACftI,SAASV,EAAAA,EAAAA,IAASiJ,OAGtBM,SAASvJ,EAAAA,EAAAA,KAASxE,EAAAA,EAAAA,IAAM0N,KACxBtE,WAAWzD,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,OACpBoB,aAAaR,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,WAQtBqJ,GAAkCzJ,IACtCgB,EAAAA,EAAAA,KACEvB,EAAAA,EAAAA,IAAK,CACH7M,WAAWmM,EAAAA,EAAAA,MACXmK,mBAAmBnK,EAAAA,EAAAA,MACnBoK,YAAY/I,EAAAA,EAAAA,MACZgJ,SAASvJ,EAAAA,EAAAA,KAASxE,EAAAA,EAAAA,IAAM0N,KACxBtE,WAAWzD,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,OACpBoB,aAAaR,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,WAUtBsJ,GAA6B1J,IACjCgB,EAAAA,EAAAA,KACEvB,EAAAA,EAAAA,IAAK,CACH7M,WAAWmM,EAAAA,EAAAA,MACXmK,mBAAmBnK,EAAAA,EAAAA,MACnBoK,YAAY/I,EAAAA,EAAAA,MACZ9E,cAAcD,EAAAA,EAAAA,KACZoE,EAAAA,EAAAA,IAAK,CACHvQ,YAAakY,GACb5d,MAAMwX,EAAAA,EAAAA,IAASmH,OAGnBiB,SAASvJ,EAAAA,EAAAA,KAASxE,EAAAA,EAAAA,IAAM0N,KACxBtE,WAAWzD,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,WAQpBuJ,GAA8B3J,IAClCgB,EAAAA,EAAAA,KACEvB,EAAAA,EAAAA,IAAK,CACH7M,WAAWmM,EAAAA,EAAAA,MACXmK,mBAAmBnK,EAAAA,EAAAA,MACnBoK,YAAY/I,EAAAA,EAAAA,MACZhO,YAAYiJ,EAAAA,EAAAA,KAAM0D,EAAAA,EAAAA,OAClB0F,WAAWzD,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,WAQpBwJ,GAA0B5J,IAC9BgB,EAAAA,EAAAA,KACEvB,EAAAA,EAAAA,IAAK,CACH3C,MAAMsD,EAAAA,EAAAA,MACN5W,KAAM2e,GACN1D,WAAW5E,EAAAA,EAAAA,KAASmB,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,QAC7BlR,YAAakY,GACb7G,SAASV,EAAAA,EAAAA,IAASiJ,QAQlBe,GAAgC7J,IACpCgB,EAAAA,EAAAA,KACEvB,EAAAA,EAAAA,IAAK,CACH3C,MAAMsD,EAAAA,EAAAA,MACNlR,YAAa2Y,GACbre,MAAMwX,EAAAA,EAAAA,IAAS6H,IACfpE,WAAW5E,EAAAA,EAAAA,KAASmB,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,QAC7BG,SAASV,EAAAA,EAAAA,IAASiJ,QAUlBgB,GAAwC5J,IAC5CT,EAAAA,EAAAA,IAAK,CACH7M,WAAWmM,EAAAA,EAAAA,MACXjH,eAAe2H,EAAAA,EAAAA,IAAK,CAClBsK,sBAAsB3J,EAAAA,EAAAA,WAQtB4J,GAA8B9J,IAClCT,EAAAA,EAAAA,IAAK,CACH7M,WAAWmM,EAAAA,EAAAA,MACXzM,sBAAsB8N,EAAAA,EAAAA,SAIpB6J,IAAmBxK,EAAAA,EAAAA,IAAK,CAC5B3C,MAAMsD,EAAAA,EAAAA,MACN8J,iBAAiB9J,EAAAA,EAAAA,MACjB+J,UAAU/J,EAAAA,EAAAA,MACVgK,kBAAkBhK,EAAAA,EAAAA,QAMdiK,GAAuCrK,IAC3C3E,EAAAA,EAAAA,IAAM4O,KAMFK,GAA4BpK,IAChCc,EAAAA,EAAAA,KACEvB,EAAAA,EAAAA,IAAK,CACH3H,eAAe2H,EAAAA,EAAAA,IAAK,CAClBsK,sBAAsB3J,EAAAA,EAAAA,YASxBmK,GAA0BvK,IAAcjB,EAAAA,EAAAA,OAKxCyL,GAA2BxK,IAAcjB,EAAAA,EAAAA,OAwQzC0L,IAAahL,EAAAA,EAAAA,IAAK,CACtBnY,IAAKwa,GACLvE,MAAMlC,EAAAA,EAAAA,KAAM0D,EAAAA,EAAAA,OACZlX,WAAWkX,EAAAA,EAAAA,QAeP2L,IAAyBjL,EAAAA,EAAAA,IAAK,CAClCD,OAAQa,GAA6BoK,IACrC7F,cAAcxE,EAAAA,EAAAA,QAyHVuK,GAAsB,CAC1B,gBAAkB,aAAD,WAAMC,qBAAN,GAAyC,YAM/CC,GAAN,WAoFL50B,SAAAA,EACE60B,EACAzL,GAEA,IAAI0L,EACAC,EACApN,EACAqN,EACAC,EACAC,EAn6CkBC,GA65CtB,oBAtFeC,iBAsFf,OArFeC,uCAqFf,OApFe7P,kBAoFf,OAnFe8P,oBAmFf,OAlFeC,gBAkFf,OAjFeC,iBAiFf,OAhFeC,sBAgFf,OA/EeC,mBA+Ef,OA9EeC,wBAAkC,EA8EjD,KA7EeC,uBAEN,KA2ET,KA1EeC,yBAEN,KAwET,KAjEUC,wBAAkC,EAiE5C,KA/DeC,0BAAoC,EA+DnD,KA9DeC,mBAA6B,EA8D5C,KA7DeC,eAKb,CACFC,gBAAiB,KACjBC,UAAW,EACXC,sBAAuB,GACvBC,oBAAqB,IAoDrB,KAjDuBC,0BAAkD,EAiDzE,KAhDuBC,oDAIrB,CAAC,EA4CH,KA3CuBC,wCAIrB,CAAC,EAuCH,KAtCuBC,wCAIrB,CAAC,EAkCH,KAjCuBC,6CAIrB,CAAC,EA6BH,KA5BuBC,qBAErB,CAAC,EA0BH,KAZuBC,gCACvB,IAAIjY,IAkBAyK,GAAoD,kBAAvBA,EAC/B3c,KAAK2oB,YAAchM,EACVA,IACT3c,KAAK2oB,YAAchM,EAAmB5I,WACtC/T,KAAK4oB,kCACHjM,EAAmByN,iCACrB/B,EAAa1L,EAAmB0L,WAChCC,EAAc3L,EAAmB2L,YACjCpN,EAAQyB,EAAmBzB,MAC3BqN,EAAkB5L,EAAmB4L,gBACrCC,EAA0B7L,EAAmB6L,wBAC7CC,EAAY9L,EAAmB8L,WAGjCzoB,KAAK+Y,aA3nFT,SAA2BsR,GACzB,IAAqC,IAAjC,WAAWC,KAAKD,GAClB,MAAM,IAAI/3B,UAAU,qDAEtB,OAAO+3B,CACR,CAsnFuBE,CAAkBnC,GACtCpoB,KAAK6oB,eAAiBR,GDx9FnB,SAA0BD,GAC/B,IAAMoC,EAAUpC,EAASqC,MAAMxO,IAC/B,GAAe,MAAXuO,EACF,MAAMl4B,UAAU,oCAAD,OAAsC81B,EAAS,MAEhE,cAKIoC,EALJ,GAEEE,GAFI,WAGJC,EAHI,KAIJC,EAJI,KAMAC,EAAWzC,EAAS0C,WAAW,UAAY,OAAS,MACpDC,EACa,MAAjBJ,EAAwB,KAAOK,SAASL,EAAc1uB,MAAM,GAAI,IAC5DgvB,EAOS,MAAbF,EAAoB,GAApB,WAA6BA,EAAY,GAC3C,MAAO,GAAP,OAAUF,EAAS,aAAIH,GAAQ,OAAEO,GAAc,OAAEL,EAClD,CCi8FuCM,CAAiB9C,GAErDpoB,KAAK8oB,WApjDT,SACEqC,EACA7C,EACA8C,EACA7C,EACAC,EACAC,GAEA,IAyCI4C,EAzCEnQ,EAAQkQ,GAA4BE,GAKvB,MAAb7C,GACF/X,QAAQC,KACN,8JAoCF4X,IACF8C,EAAmB,yCAAG,WAAOE,EAAMC,GAAb,4FACY,IAAI/W,SAClC,SAACC,EAAS+W,GACR,IACElD,EAAgBgD,EAAMC,GAAM,SAACE,EAAcC,GAAf,OAC1BjX,EAAQ,CAACgX,EAAcC,GADV,GAKhB,CAFC,MAAOrT,GACPmT,EAAOnT,EACR,CACF,IATH,OAAuB,OAAjBsT,EAAoB,EAAH,cAWV1Q,EAAK,qBAAI0Q,IAAtB,cAAO,EAAP,gDAAO,EAAP,iBAZF,qDAAmB,IAgBrB,IAAMC,EAAgB,IAAIC,IAAJ,0CAAc,WAAOC,EAASC,GAAhB,oFAE5BrY,EAAU,CACdsY,OAAQ,OACRC,KAAMH,EACNI,WAJyD7zB,EAKzD8zB,QAAS/4B,OAAOI,OACd,CACE,eAAgB,oBAElB60B,GAAe,CAAC,EAChBL,KATJ,SAcMoE,EAA4B,EAE5BC,EAAW,IAAf,WAEMjB,EAAJ,iCACcA,EAAoBF,EAAKxX,GAArC,OAAA4Y,EAAM,EAAH,8CAESrR,EAAMiQ,EAAKxX,GAAvB,QAAA4Y,EAAM,EAAH,gBAGc,MAAfA,EAAInY,OAAe,yDAGS,IAA5BoU,EAAJ,qDAGA,GACkC,KADlC6D,GAA6B,GAC7B,qDAGA,OAAA3b,QAAQ8b,IAAR,gCAC2BD,EAAInY,OAAO,YAAGmY,EAAIE,WAAW,6BAAoBH,EAAS,gBADrF,UAGM/X,GAAM+X,GAAZ,QACAA,GAAY,EAAZ,gDAGiBC,EAAIG,OAAvB,QAAMA,EAAO,EAAH,KACNH,EAAII,GACNX,EAAS,KAAMU,GAEfV,EAAS,IAAIj4B,MAAJ,UAAaw4B,EAAInY,OAAO,YAAGmY,EAAIE,WAAW,aAAIC,KACxD,kDAEG9nB,EAAAA,cAAe7Q,OAAOi4B,EAAS,EAAD,IAAR,sGAlDR,wDAsDnB,CAAC,GAEJ,OAAOH,CACR,CAu7CqBe,CAChBxE,EACAE,EACApN,EACAqN,EACAC,EACAC,GAEFzoB,KAAK+oB,aA77CiBL,EA67Cc1oB,KAAK8oB,WA57CpC,SAACmD,EAAQnhB,GACd,OAAO,IAAI2J,SAAQ,SAACC,EAAS+W,GAC3B/C,EAAOqD,QAAQE,EAAQnhB,GAAM,SAAClG,EAAUkZ,GAClClZ,EACF6mB,EAAO7mB,GAGT8P,EAAQoJ,KAEX,MAo7CD9d,KAAKgpB,iBAh7CT,SAA+BN,GAC7B,OAAQmE,SAAAA,GACN,OAAO,IAAIpY,SAAQ,SAACC,EAAS+W,GAEH,IAApBoB,EAASj6B,QAAc8hB,EAAQ,IAEnC,IAAMoY,EAAQD,EAASpmB,KAAKmQ,SAAAA,GAC1B,OAAO8R,EAAOqD,QAAQnV,EAAOmW,WAAYnW,EAAO9L,KACjD,IAED4d,EAAOqD,QAAQe,GAAO,SAACloB,EAAUkZ,GAC3BlZ,EACF6mB,EAAO7mB,GAGT8P,EAAQoJ,KAEX,IAEJ,CA65C2BkP,CAAsBhtB,KAAK8oB,YAEnD9oB,KAAKipB,cAAgB,IAAIgE,EAAAA,EAAmBjtB,KAAK6oB,eAAgB,CAC/DqE,aAAa,EACbC,eAAgBC,MAElBptB,KAAKipB,cAAcoE,GAAG,OAAQrtB,KAAKstB,UAAU1zB,KAAKoG,OAClDA,KAAKipB,cAAcoE,GAAG,QAASrtB,KAAKutB,WAAW3zB,KAAKoG,OACpDA,KAAKipB,cAAcoE,GAAG,QAASrtB,KAAKwtB,WAAW5zB,KAAKoG,OACpDA,KAAKipB,cAAcoE,GACjB,sBACArtB,KAAKytB,yBAAyB7zB,KAAKoG,OAErCA,KAAKipB,cAAcoE,GACjB,sBACArtB,KAAK0tB,gCAAgC9zB,KAAKoG,OAE5CA,KAAKipB,cAAcoE,GACjB,mBACArtB,KAAK2tB,sBAAsB/zB,KAAKoG,OAElCA,KAAKipB,cAAcoE,GACjB,2BACArtB,KAAK4tB,6BAA6Bh0B,KAAKoG,OAEzCA,KAAKipB,cAAcoE,GACjB,wBACArtB,KAAK6tB,2BAA2Bj0B,KAAKoG,OAEvCA,KAAKipB,cAAcoE,GACjB,mBACArtB,KAAK8tB,sBAAsBl0B,KAAKoG,OAElCA,KAAKipB,cAAcoE,GACjB,mBACArtB,KAAK+tB,sBAAsBn0B,KAAKoG,MAEnC,CAg8GA,OA97GD,gCAGc,WACZ,OAAOA,KAAK2oB,WACb,GAED,uBAGe,WACb,OAAO3oB,KAAK+Y,YACb,GAED,2EAG0B,WACxBhX,EACA4a,GAFwB,sFAOxB,OAHA,EAEED,GAA4BC,GADvB5I,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEb/H,EAAO9K,KAAKguB,WAChB,CAACjsB,EAAU4B,YACXoQ,OACAzb,EACAua,GAJF,SAMwB7S,KAAK+oB,YAAY,aAAcje,GAAvD,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWzQ,IAAwBE,EAAAA,EAAAA,UACtD,sBACQ,IAAI5C,GACRyR,EAAIjU,MADA,oCAEyBvW,EAAU4B,aAFzC,gCAKK4oB,EAAIzP,QAAX,wBAAO,EAAP,sBACD,qDAzBD,IA2BA,iEAGgB,WACd/a,EACA4a,GAFc,sFAID3c,KAAKkuB,qBAAqBnsB,EAAW4a,GAC/CwR,MAAK1wB,SAAAA,GAAC,OAAIA,EAAExC,KADF,IAEVmzB,OAAM51B,SAAAA,GACL,MAAM,IAAIzE,MACR,oCAAsCgO,EAAU4B,WAAa,KAAOnL,EAEvE,IANH,cAAO,EAAP,gDAAO,EAAP,sBAOD,qDAdD,IAgBA,mEAGkB,WAAC4hB,GAAD,8FACQpa,KAAK+oB,YAAY,eAAgB,CAAC3O,IAA1D,OACA,GADM6T,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW3Q,IAAcgB,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,WACrD,sBACQ,IAAI5C,GACRyR,EAAIjU,MADA,4CAEiC8B,IAFvC,gCAKKmS,EAAIzP,QAAX,wBAAO,EAAP,sBACD,mDAbD,IAeA,2EAI0B,2GACA9c,KAAK+oB,YAAY,oBAAqB,IAA9D,OACA,GADMkF,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW3Q,IAAcI,EAAAA,EAAAA,UAC5C,sBACQ,IAAI5C,GACRyR,EAAIjU,MACJ,qCAFF,gCAKKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,kDAdD,IAgBA,6EAG4B,2GACF9c,KAAK+oB,YAAY,yBAA0B,IAAnE,OACA,GADMkF,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW5N,MAC9B,sBACQ,IAAIvF,GACRyR,EAAIjU,MACJ,uCAFF,gCAKKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,kDAbD,IAeA,gEAGe,WACbjK,GADa,gFAeZ,OAZGwb,EAA6B,CAAC,EAEhCA,EADoB,kBAAXxb,EACG,CAACkB,WAAYlB,GAChBA,GACG,kBACPA,GADO,IAEVkB,WAAalB,GAAUA,EAAOkB,YAAe/T,KAAK+T,aAGxC,CACVA,WAAY/T,KAAK+T,YAEpB,SAEuB/T,KAAK+oB,YAAY,YAAa,CAACsF,IAAvD,OACA,GADMJ,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW3N,MAC9B,sBACQ,IAAIxF,GAAmByR,EAAIjU,MAAO,wBAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,mDA1BD,IA4BA,qEAGoB,WAClBwR,EACAva,GAFkB,gFAIlB,OAAMjJ,EAAO9K,KAAKguB,WAAW,CAACM,EAAiB3qB,YAAaoQ,GAA5D,SACwB/T,KAAK+oB,YAAY,iBAAkBje,GAA3D,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWzQ,GAAwBmD,OACtD,sBACQ,IAAI7F,GAAmByR,EAAIjU,MAAO,8BAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,qDAdD,IAgBA,6EAG4B,WAC1ByR,EACAxa,GAF0B,gFAI1B,OAAMjJ,EAAO9K,KAAKguB,WAAW,CAACO,EAAa5qB,YAAaoQ,GAAxD,SACwB/T,KAAK+oB,YAAY,yBAA0Bje,GAAnE,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWzQ,GAAwBmD,OACtD,sBACQ,IAAI7F,GACRyR,EAAIjU,MACJ,uCAFF,gCAKKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,qDAjBD,IAmBA,8EAK6B,WAC3B0R,EACA5lB,EACA+T,GAH2B,wFAkB3B,OAlB2B,EAUzBD,GAA4BC,GADvB5I,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEf4b,EAAe,CAACD,EAAa7qB,YAC7B,SAAUiF,EACZ6lB,EAAM72B,KAAK,CAAC0tB,KAAM1c,EAAO0c,KAAK3hB,aAE9B8qB,EAAM72B,KAAK,CAACsM,UAAW0E,EAAO1E,UAAUP,aAGpCmH,EAAO9K,KAAKguB,WAAWS,EAAO1a,EAAY,SAAUlB,GAA1D,SACwB7S,KAAK+oB,YAAY,0BAA2Bje,GAApE,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWjN,MAC9B,uBACQ,IAAIlG,GACRyR,EAAIjU,MADA,wDAE6CkW,EAAa7qB,aAFhE,iCAKK4oB,EAAIzP,QAAX,yBAAO,EAAP,sBACD,uDAjCD,IAmCA,oFAKmC,WACjC0R,EACA5lB,EACAmL,GAHiC,kFAgBjC,OAPI0a,EAAe,CAACD,EAAa7qB,YAC7B,SAAUiF,EACZ6lB,EAAM72B,KAAK,CAAC0tB,KAAM1c,EAAO0c,KAAK3hB,aAE9B8qB,EAAM72B,KAAK,CAACsM,UAAW0E,EAAO1E,UAAUP,aAGpCmH,EAAO9K,KAAKguB,WAAWS,EAAO1a,EAAY,cAAhD,SACwB/T,KAAK+oB,YAAY,0BAA2Bje,GAApE,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW9M,MAC9B,sBACQ,IAAIrG,GACRyR,EAAIjU,MADA,wDAE6CkW,EAAa7qB,aAFhE,gCAKK4oB,EAAIzP,QAAX,yBAAO,EAAP,sBACD,uDA/BD,IAiCA,yEAGwB,WACtBjK,GADsB,kFAOtB,OAJM6b,GAAM,kBACP7b,GADO,IAEVkB,WAAalB,GAAUA,EAAOkB,YAAe/T,KAAK+T,aAE9CjJ,EAAO4jB,EAAI9lB,QAAU8lB,EAAI3a,WAAa,CAAC2a,GAAO,GAApD,SACwB1uB,KAAK+oB,YAAY,qBAAsBje,GAA/D,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW7M,MAC9B,sBACQ,IAAItG,GAAmByR,EAAIjU,MAAO,kCAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,mDAjBD,IAmBA,8EAI6B,WAC3B6R,EACA5a,GAF2B,gFAI3B,OAAMjJ,EAAO9K,KAAKguB,WAAW,CAACW,EAAYhrB,YAAaoQ,GAAvD,SACwB/T,KAAK+oB,YAAY,0BAA2Bje,GAApE,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWlN,MAC9B,sBACQ,IAAIjG,GACRyR,EAAIjU,MACJ,wCAFF,gCAKKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,qDAlBD,IAoBA,+EAG8B,WAC5B/a,EACA4a,GAF4B,sFAM5B,OAN4B,EAK1BD,GAA4BC,GADvB5I,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEb/H,EAAO9K,KAAKguB,WAChB,CAACjsB,EAAU4B,YACXoQ,EACA,SACAlB,GAJF,SAMwB7S,KAAK+oB,YAAY,iBAAkBje,GAA3D,OACA,GADMmjB,EAAY,EAAH,OAKX,UAJE1B,GAAMj5B,EAAAA,EAAAA,IACV26B,EACAzQ,IAAwBc,EAAAA,EAAAA,IAAS+C,QAEnC,sBACQ,IAAIvG,GACRyR,EAAIjU,MADA,2CAEgCvW,EAAU4B,aAFhD,gCAKK4oB,EAAIzP,QAAX,wBAAO,EAAP,sBACD,qDA3BD,IA6BA,2EAG0B,WACxB/a,EACA4a,GAFwB,sFAQxB,OARwB,EAOtBD,GAA4BC,GADvB5I,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEb/H,EAAO9K,KAAKguB,WAChB,CAACjsB,EAAU4B,YACXoQ,EACA,aACAlB,GAJF,SAMwB7S,KAAK+oB,YAAY,iBAAkBje,GAA3D,OACA,GADMmjB,EAAY,EAAH,OAKX,UAJE1B,GAAMj5B,EAAAA,EAAAA,IACV26B,EACAzQ,IAAwBc,EAAAA,EAAAA,IAASkD,QAEnC,sBACQ,IAAI1G,GACRyR,EAAIjU,MADA,2CAEgCvW,EAAU4B,aAFhD,gCAKK4oB,EAAIzP,QAAX,wBAAO,EAAP,sBACD,qDA7BD,IA+BA,qEAGoB,WAClB/a,EACA4a,GAFkB,qGAKE3c,KAAK4uB,yBACrB7sB,EACA4a,GAFF,OAAS,OAAH4P,EAAM,EAAH,uBAIFA,EAAItxB,OAAX,sCAEM,IAAIlH,MACR,oCAAsCgO,EAAU4B,WAAa,KAA7D,MADF,yDAIH,qDAlBD,IAoBA,gFAG+B,WAC7BkrB,EACAC,GAF6B,wFAQ7B,OAR6B,EAMApS,GAA4BoS,GAAlD/a,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OACbhM,EAAOgoB,EAAWpoB,KAAI1C,SAAAA,GAAG,OAAIA,EAAIJ,UAA1B,IACPmH,EAAO9K,KAAKguB,WAAW,CAACnnB,GAAOkN,EAAY,aAAclB,GAA/D,SACwB7S,KAAK+oB,YAAY,sBAAuBje,GAAhE,OACA,GADMmjB,EAAY,EAAH,OAKX,UAJE1B,GAAMj5B,EAAAA,EAAAA,IACV26B,EACAzQ,IAAwB7E,EAAAA,EAAAA,KAAM2F,EAAAA,EAAAA,IAASkD,SAEzC,sBACQ,IAAI1G,GACRyR,EAAIjU,MADA,0CAE+BzR,IAFrC,gCAKK0lB,EAAIzP,QAAX,yBAAO,EAAP,sBACD,qDAxBD,IA0BA,wFAGuC,WACrC+R,EACAlS,GAFqC,wFAOrC,OAPqC,EAKnCD,GAA4BC,GADvB5I,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEbhM,EAAOgoB,EAAWpoB,KAAI1C,SAAAA,GAAG,OAAIA,EAAIJ,UAA1B,IACPmH,EAAO9K,KAAKguB,WAAW,CAACnnB,GAAOkN,EAAY,SAAUlB,GAA3D,SACwB7S,KAAK+oB,YAAY,sBAAuBje,GAAhE,OACA,GADMmjB,EAAY,EAAH,OAKX,UAJE1B,GAAMj5B,EAAAA,EAAAA,IACV26B,EACAzQ,IAAwB7E,EAAAA,EAAAA,KAAM2F,EAAAA,EAAAA,IAAS+C,SAEzC,sBACQ,IAAIvG,GACRyR,EAAIjU,MADA,0CAE+BzR,IAFrC,gCAKK0lB,EAAIzP,QAAX,yBAAO,EAAP,sBACD,qDAvBD,IAyBA,8EAG6B,WAC3B+R,EACAlS,GAF2B,4FAIT3c,KAAK+uB,kCACrBF,EACAlS,GAFF,OAAS,OAAH4P,EAAM,EAAH,uBAIFA,EAAItxB,OAAX,wBAAO,EAAP,sBACD,qDAZD,IAcA,yEAGwB,WACtB8G,EACA4a,EACArC,GAHsB,sFAOtB,OAPsB,EAMpBoC,GAA4BC,GADvB5I,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEb/H,EAAO9K,KAAKguB,WAChB,CAACjsB,EAAU4B,YACXoQ,OACAzb,GAAU,kBAELua,GADL,IAEEyH,MAAgB,MAATA,EAAgBA,EAAQzH,OAAAA,QAAAA,IAAAA,OAAAA,EAAAA,EAAQyH,SAN3C,SAUwBta,KAAK+oB,YAAY,qBAAsBje,GAA/D,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW3Q,GAAcoE,OAC5C,sBACQ,IAAI5G,GACRyR,EAAIjU,MADA,yCAE8BvW,EAAU4B,aAF9C,gCAKK4oB,EAAIzP,QAAX,wBAAO,EAAP,sBACD,uDA7BD,IA+BA,yEAKwB,WACtB5Y,EACA8qB,GAFsB,4FAOtB,OAPsB,EAKpBtS,GAA4BsS,GADvBjb,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEZoc,GAFYpc,EAE0BA,GAAU,CAAC,GAAjDoc,SAAaC,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,IACdpkB,EAAO9K,KAAKguB,WAChB,CAAC9pB,EAAUP,YACXoQ,EACAkb,GAAY,SACZC,GAJF,SAMwBlvB,KAAK+oB,YAAY,qBAAsBje,GAA/D,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW3Q,IAAc3E,EAAAA,EAAAA,IAAM2I,QAClD,sBACQ,IAAIxG,GACRyR,EAAIjU,MADA,kDAEuCpU,EAAUP,aAFvD,gCAKK4oB,EAAIzP,QAAX,yBAAO,EAAP,sBACD,qDA3BD,IA6BA,+EAK8B,WAC5B5Y,EACA8qB,GAF4B,sFAW5B,OAX4B,EAU1BtS,GAA4BsS,GADvBjb,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEb/H,EAAO9K,KAAKguB,WAChB,CAAC9pB,EAAUP,YACXoQ,EACA,aACAlB,GAJF,SAMwB7S,KAAK+oB,YAAY,qBAAsBje,GAA/D,OACA,GADMmjB,EAAY,EAAH,OAKX,UAJE1B,GAAMj5B,EAAAA,EAAAA,IACV26B,EACA3Q,IAAc3E,EAAAA,EAAAA,IAAM8I,QAEtB,sBACQ,IAAI3G,GACRyR,EAAIjU,MADA,kDAEuCpU,EAAUP,aAFvD,gCAKK4oB,EAAIzP,QAAX,wBAAO,EAAP,sBACD,qDAlCD,IAkDA,yEACwB,WACtBqS,EAIApb,GALsB,qFASC,iBAAZob,EAAX,gBACEC,EAAeD,EAAf,sBAEA,GAGI,QAAJ,GAHMtc,EAASsc,GAGJhb,mBAAP,UAAoBkb,QAAxB,yCACS5a,QAAQgX,OAAO5Y,EAAOsB,YAAYmb,SAAzC,OAEFF,EAAevc,EAAO1N,UAAtB,gBAMAoqB,EAAmBhsB,IAAAA,OAAY6rB,GAA/B,wDAEM,IAAIr7B,MAAM,qCAAuCq7B,GAAvD,QAGF,GAAArwB,GAAmC,KAA5BwwB,EAAiB38B,OAAe,gCAEf,kBAAbu8B,EAAX,kCACenvB,KAAKwvB,6CAA6C,CAC7Dzb,WAAYA,GAAc/T,KAAK+T,WAC/B5O,UAAWiqB,IAFb,eAAO,EAAP,qCAIS,yBAA0BD,GAA9B,kCACQnvB,KAAKyvB,qDAAqD,CACrE1b,WAAYA,GAAc/T,KAAK+T,WAC/Bob,SAAAA,IAFF,eAAO,EAAP,iDAKanvB,KAAK0vB,4CAA4C,CAC5D3b,WAAYA,GAAc/T,KAAK+T,WAC/Bob,SAAAA,IAFF,eAAO,EAAP,iDAAO,EAAP,+BAKH,qDAhDD,IAgDC,oCAEOQ,SAAuBC,GAC7B,OAAO,IAAInb,SAAe,SAAC7I,EAAG6f,GACd,MAAVmE,IAGAA,EAAOP,QACT5D,EAAOmE,EAAON,QAEdM,EAAOC,iBAAiB,SAAS,WAC/BpE,EAAOmE,EAAON,WAGnB,GACF,kDAEOQ,SAAAA,GAYN,IACIC,EACAC,EAFJ,OAXAjc,EADwC,EACxCA,WACA5O,EAAAA,EAAAA,UAeI8qB,GAAO,EAkGX,MAAO,CAACC,kBAVkB,WACpBF,IACFA,IACAA,OAAkD13B,GAErB,MAA3By3B,IACF,EAAKI,wBAAwBJ,GAC7BA,OAA0Bz3B,IAGH83B,oBAjGC,IAAI3b,SAG7B,SAACC,EAAS+W,GACX,IACEsE,EAA0B,EAAKM,YAC7BlrB,GACA,SAAC2X,EAAyBW,GACxBsS,OAA0Bz3B,EAC1B,IAAMwlB,EAAW,CACfL,QAAAA,EACAxiB,MAAO6hB,GAETpI,EAAQ,CAAC4b,OAAQloB,GAAkBmoB,UAAWzS,SAAAA,MAEhD/J,GAEF,IAAMyc,EAA2B,IAAI/b,SACnCgc,SAAAA,GACiC,MAA3BV,EACFU,IAEAT,EACE,EAAKU,2BACHX,GACAY,SAAAA,GACoB,eAAdA,GACFF,GAEH,GAGR,KAEH,uBAAC,6GACOD,EAAN,WACIP,EAAJ,iEACuB,EAAKW,mBAAmBzrB,GAA/C,OAAc,GAAR2Y,EAAW,EAAH,MACVmS,EAAJ,oDACgB,MAAZnS,EAAJ,mDAGgB7iB,GAATwiB,EAAkBK,EAAlBL,QACM,OADGxiB,EAAS6iB,EAAT7iB,OAChB,sDAGIA,OAAAA,QAAJ,IAAIA,IAAAA,EAAO2J,IAAX,iBACE6mB,EAAOxwB,EAAM2J,KAAb,6BAEQmP,EAAR,OACO,cADP,MAEO,WADL,MAEK,iBADL,KADA,GAQK,cANL,MAOK,QADL,MAEK,SADL,KADA,IAYK,cAVL,MAUA,SACA,WAAK,GAAL,GAlBmC,cAA7B9Y,EAAMqpB,mBAAV,0FAS+B,cAA7BrpB,EAAMqpB,oBACuB,cAA7BrpB,EAAMqpB,mBAFR,uFAYJ2L,GAAO,EACPvb,EAAQ,CACN4b,OAAQloB,GAAkBmoB,UAC1BzS,SAAU,CACRL,QAAAA,EACAxiB,MAAAA,KAJJ,2CAxCJ,EAmDD,CAFC,MAAO2J,GACP6mB,EAAO7mB,EACR,CACF,IAYF,8GAEiE,yHAiChE,OAhCAmP,EADiE,EACjEA,WADiE,IAEjEob,SAAWhb,EAAD,EAACA,YAAavE,EAAd,EAAcA,qBAAsBzK,EAAAA,EAAAA,UAK1C8qB,GAAgB,EACdY,EAAgB,IAAIpc,SAEvBC,SAAAA,GACD,IAAMoc,EAAgB,yCAAG,kHAEK,EAAKC,eAAehd,GAA9C,OAAiB,OAAX+K,EAAc,EAAH,uBACVA,GAAP,uCAAO,EAAP,iBAEQ,GAAR,yBAAO,EAAP,8BALJ,kBAAsB,oCAQtB,uBAAC,yGACgCgS,IAA/B,OAAsB,GAAlBE,EAAqB,EAAH,MAClBf,EAAJ,sDACOe,GAAsBphB,GAA7B,iCACQ2E,GAAM,KAAZ,WACI0b,EAAJ,oEAC2Ba,IAA3B,QAAkB,GAAlBE,EAAqB,EAAH,MACdf,EAAJ,0EAEFvb,EAAQ,CAAC4b,OAAQloB,GAAkB6oB,uBAAnC,2CATF,EAWD,IAtBD,EAwBEjxB,KAAK8vB,kCAAkC,CAAC/b,WAAAA,EAAY5O,UAAAA,IAD/C+qB,EAAD,EAACA,kBAAmBE,EAAAA,EAAAA,oBAEpBc,EAAsBlxB,KAAK2vB,uBAAuBxb,GAAxD,kBAGwBM,QAAQ0c,KAAK,CACjCD,EACAd,EACAS,IAHF,OAAa,IAAPO,EAAU,EAAH,MAKDd,SAAWloB,GAAkBmoB,UAAzC,iBACEzT,EAASsU,EAAQtT,SAAjB,8BAEM,IAAI5Y,GAA2CC,GAArD,QAIe,OAJf,UAGF8qB,GAAO,EACPC,IAAiB,8CAEZpT,GAAP,yBAAO,EAAP,mCACD,mDArDA,IAqDA,kGAEwD,yIA2DvD,OA1DA/I,EADwD,EACxDA,WADwD,IAExDob,SACEhb,EADQ,EACRA,YACAlE,EAFQ,EAERA,eACAoE,EAHQ,EAGRA,mBACAC,EAJQ,EAIRA,WACAnP,EAAAA,EAAAA,UAME8qB,GAAgB,EACdY,EAAgB,IAAIpc,SAGvBC,SAAAA,GACD,IAAI2c,EAAwC/c,EACxCgd,EAAiC,KAC/BC,EAAoB,yCAAG,sHAEoB,EAAKC,mBAChDnd,EACA,CACEN,WAAAA,EACA9D,eAAAA,IAJJ,OAOA,OAPA,SAAOwN,EAAD,EAACA,QAAgBpI,EAAAA,EAAPpa,MAOhBq2B,EAAkB7T,EAAQrD,KAA1B,kBACO/E,OAAAA,QAAAA,IAAAA,OAAAA,EAAAA,EAAc5Q,OAArB,yCAAO,EAAP,gBAIO4sB,GAAP,yBAAO,EAAP,+BAdJ,kBAA0B,oCAiB1B,uBAAC,mGAC2BE,IAA1B,OAAiB,GAAjBF,EAAoB,EAAH,MACbpB,EAAJ,iDACA,GAGM3b,IAAe+c,EAAnB,gBACE,OAAA3c,EAAQ,CACN4b,OAAQloB,GAAkBqpB,cAC1BC,2BAA4BJ,IAF9B,2CAMI/c,GAAM,KAAZ,YACI0b,EAAJ,oEAC0BsB,IAA1B,QAAiB,GAAjBF,EAAoB,EAAH,MACbpB,EAAJ,6GAhBJ,EAmBD,IA1CD,EA4CEjwB,KAAK8vB,kCAAkC,CAAC/b,WAAAA,EAAY5O,UAAAA,IAD/C+qB,EAAD,EAACA,kBAAmBE,EAAAA,EAAAA,oBAEpBc,EAAsBlxB,KAAK2vB,uBAAuBxb,GAAxD,kBAGwBM,QAAQ0c,KAAK,CACjCD,EACAd,EACAS,IAHF,OAAa,IAAPO,EAAU,EAAH,MAKDd,SAAWloB,GAAkBmoB,UAAzC,iBACEzT,EAASsU,EAAQtT,SAAjB,wBAOA,iBAGuB9d,KAAK4wB,mBAAmBzrB,GAA7C,QAAY,GACE,OADRiP,EAAS,EAAH,MACZ,0DAIEA,EAAOqJ,QAAQrD,MAAf,UACCgX,EAAQM,kCADT,QACuCzhB,IAFzC,kCAIQsE,GAAM,KAAZ,+CAGF,OAAAod,EAAkBvd,EAAlB,gCAGF,UAAIud,SAAJ,QAAIC,EAAiB32B,MAArB,iBACQ42B,EAAsB9d,GAAc,YACnCuQ,EAAsBqN,EAAgB12B,MAAtCqpB,mBAAAA,EAAAA,GACCuN,EAAR,OACO,cADP,MAEO,WADL,QAUK,cATL,MAUK,WADL,MAEK,iBADL,KADA,GAUK,cARL,MASK,QADL,MAEK,SADL,KADA,GAEA,cAAK,GAAL,GAnB2B,cAAvBvN,GACuB,cAAvBA,GACuB,cAAvBA,EAHF,uBAKQ,IAAI9e,GAAoCL,GAA9C,QAUA,QAOA,oCAjBA,WAOuB,cAAvBmf,GACuB,cAAvBA,EAFF,uBAIQ,IAAI9e,GAAoCL,GAA9C,WAMyB,cAAvBmf,EAAJ,uBACQ,IAAI9e,GAAoCL,GAA9C,QAMF,QAEJ2X,EAAS,CACPW,QAASkU,EAAgBlU,QACzBxiB,MAAO,CAAC2J,IAAK+sB,EAAgB12B,MAAM2J,MAFrC,8BAKM,IAAIY,GAAoCL,GAA9C,QAKa,OALb,UAIJ8qB,GAAO,EACPC,IAAiB,8CAEZpT,GAAP,yBAAO,EAAP,mCACD,mDA/IA,IA+IA,mGAEyD,iHAgC9BsT,OA/B1Brc,EADyD,EACzDA,WACA5O,EAAAA,EAAAA,UAMM0rB,EAAgB,IAAIpc,SAGvBC,SAAAA,GACD,IAAIod,EAAY,EAAKlJ,mCAAqC,IAC1D,OAAQ7U,GACN,IAAK,YACL,IAAK,SACL,IAAK,SACL,IAAK,YACL,IAAK,eACH+d,EAAY,EAAKlJ,mCAAqC,IAQ1DmJ,EAAYpd,YACV,kBAAMD,EAAQ,CAAC4b,OAAQloB,GAAkB4pB,UAAWF,UAAAA,GADhC,GAEpBA,EAEH,IAvBD,EAyBE9xB,KAAK8vB,kCAAkC,CACrC/b,WAAAA,EACA5O,UAAAA,IAHG+qB,EAAD,EAACA,kBAAmBE,EAAAA,EAAAA,oBAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAOF3b,QAAQ0c,KAAK,CAACf,EAAqBS,IAAzD,OAAa,IAAPO,EAAU,EAAH,MACDd,SAAWloB,GAAkBmoB,UAAzC,iBACEzT,EAASsU,EAAQtT,SAAjB,8BAEM,IAAIzY,GACRF,EACAisB,EAAQU,UAAY,KAFtB,QAOe,OAPf,UAMFG,aAAaF,GACb7B,IAAiB,8CAEZpT,GAAP,yBAAO,EAAP,mCACD,mDAvDA,IAyDD,sEAGqB,2GACK9c,KAAK+oB,YAAY,kBAAmB,IAA5D,OACA,GADMkF,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW3Q,IAAc3E,EAAAA,EAAAA,IAAMwK,QAClD,sBACQ,IAAIrI,GAAmByR,EAAIjU,MAAO,+BAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,kDAVD,IAYA,sEAGqB,WAAC/I,GAAD,gFACnB,OAAMjJ,EAAO9K,KAAKguB,WAAW,GAAIja,GAAjC,SACwB/T,KAAK+oB,YAAY,kBAAmBje,GAA5D,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWjK,MAC9B,sBACQ,IAAIlJ,GAAmByR,EAAIjU,MAAO,+BAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,mDAXD,IAaA,8DAGa,WACXH,GADW,sFAKX,OALW,EAITD,GAA4BC,GADvB5I,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEb/H,EAAO9K,KAAKguB,WAChB,GACAja,OACAzb,EACAua,GAJF,SAMwB7S,KAAK+oB,YAAY,UAAWje,GAApD,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW3Q,IAAcI,EAAAA,EAAAA,UAC5C,sBACQ,IAAI5C,GAAmByR,EAAIjU,MAAO,sBAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,mDApBD,IAsBA,oEAGmB,WACjBH,GADiB,sFAKjB,OALiB,EAIfD,GAA4BC,GADvB5I,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEb/H,EAAO9K,KAAKguB,WAChB,GACAja,OACAzb,EACAua,GAJF,SAMwB7S,KAAK+oB,YAAY,gBAAiBje,GAA1D,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW3Q,IAAcjB,EAAAA,EAAAA,UAC5C,sBACQ,IAAIvB,GAAmByR,EAAIjU,MAAO,6BAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,mDApBD,IAsBA,qEAMoB,WAClBoV,EACAC,GAFkB,gFAIlB,OAAMrnB,EAAO,CAAConB,EAAWC,GAAzB,SACwBnyB,KAAK+oB,YAAY,iBAAkBje,GAA3D,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW3Q,IAAc3E,EAAAA,EAAAA,IAAMuD,QAClD,sBACQ,IAAIpB,GAAmByR,EAAIjU,MAAO,8BAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,qDAjBD,IAmBA,yEAGwB,WACtB3X,EACA0N,GAFsB,kGAIiB7S,KAAKoyB,qBAC1C,CAACjtB,GACD0N,GAFF,OAKA,OALA,SAAO4K,EAAD,EAACA,QAIP1e,GAAyB,KAJFrL,EAAAA,EAAPuH,OAIFrI,QACRqI,EAAQvH,EAAO,GAArB,kBACO,CAAC+pB,QAAAA,EAASxiB,MAAAA,IAAjB,wBAAO,EAAP,sBACD,qDAdD,IAgBA,2EAG0B,WACxByU,EACAmD,GAFwB,gFAOvB,OAHK+D,EAAgB,CAAClH,GACnBmD,GACF+D,EAAOhf,KAAKib,GACb,SACuB7S,KAAK+oB,YAAY,uBAAwBnS,GAAjE,OACA,GADMqX,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW1J,MAC9B,sBACQ,IAAIzJ,GAAmByR,EAAIjU,MAAO,kCAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,qDAjBD,IAmBA,0EAGyB,WACvBH,GADuB,sFAKvB,OALuB,EAIrBD,GAA4BC,GADvB5I,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEb/H,EAAO9K,KAAKguB,WAChB,GACAja,OACAzb,EACAua,GAJF,SAMwB7S,KAAK+oB,YAAY,sBAAuBje,GAAhE,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW3Q,IAAcI,EAAAA,EAAAA,UAC5C,sBACQ,IAAI5C,GACRyR,EAAIjU,MACJ,mCAFF,gCAKKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,mDAvBD,IAyBA,qEAKoB,WAAC/I,GAAD,4FACG/T,KAAKqyB,UAAU,CAClCte,WAAAA,EACAue,mCAAmC,IAFrC,OAAY,OAANxV,EAAS,EAAH,uBAILA,EAAO7hB,MAAMslB,OAApB,wBAAO,EAAP,sBACD,mDAXD,IAaA,2EAG0B,WACxBxM,GADwB,gFAGxB,OAAMjJ,EAAO9K,KAAKguB,WAAW,GAAIja,GAAjC,SACwB/T,KAAK+oB,YAAY,uBAAwBje,GAAjE,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWhO,MAC9B,sBACQ,IAAInF,GAAmByR,EAAIjU,MAAO,2BAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,mDAbD,IAeA,yEAGwB,WACtBrT,EACA6Q,EACAqC,GAHsB,sFAOtB,OAPsB,EAMpBD,GAA4BC,GADvB5I,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEb/H,EAAO9K,KAAKguB,WAChB,CAACvkB,EAAUhD,KAAIM,SAAAA,GAAM,OAAIA,EAAOpD,UAA/B,KACDoQ,OACAzb,GAAU,kBAELua,GADL,IAEEyH,MAAgB,MAATA,EAAgBA,EAAQzH,OAAAA,QAAAA,IAAAA,OAAAA,EAAAA,EAAQyH,SAN3C,SASwBta,KAAK+oB,YAAY,qBAAsBje,GAA/D,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW5P,MAC9B,sBACQ,IAAIvD,GAAmByR,EAAIjU,MAAO,kCAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,uDAzBD,IA2BA,mEAGkB,WAChBH,GADgB,sFAKhB,OALgB,EAIdD,GAA4BC,GADvB5I,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEb/H,EAAO9K,KAAKguB,WAChB,GACAja,OACAzb,EACAua,GAJF,SAMwB7S,KAAK+oB,YAAY,eAAgBje,GAAzD,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW/N,MAC9B,sBACQ,IAAIpF,GAAmByR,EAAIjU,MAAO,4BAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,mDApBD,IAsBA,uEAGsB,6GACI9c,KAAK+oB,YAAY,mBAAoB,IAA7D,OACA,GADMkF,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW9N,MAC9B,sBACQ,IAAIrF,GAAmByR,EAAIjU,MAAO,gCAAxC,OAEF,OAAMia,EAAgBhG,EAAIzP,OAA1B,kBACO,IAAIjD,GACT0Y,EAAczY,cACdyY,EAAcxY,yBACdwY,EAAcvY,OACduY,EAActY,iBACdsY,EAAcrY,kBALhB,wBAAO,EAAP,sBAOD,kDAjBD,IAmBA,wEAIuB,2GACGla,KAAK+oB,YAAY,oBAAqB,IAA9D,OACA,GADMkF,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW7N,MAC9B,sBACQ,IAAItF,GAAmByR,EAAIjU,MAAO,iCAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,kDAXD,IAaA,wFAIuC,WACrC3Q,EACA4H,GAFqC,gFAIrC,OAAMjJ,EAAO9K,KAAKguB,WAAW,CAAC7hB,GAAa4H,GAA3C,SACwB/T,KAAK+oB,YAC3B,oCACAje,GAFF,OAIA,GAJMmjB,EAAY,EAAH,OAKX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWzJ,MAC9B,gBACE,OAAA9T,QAAQC,KAAK,sDAAb,kBACO,GAAP,cAAO,EAAP,gBAEK4b,EAAIzP,QAAX,wBAAO,EAAP,sBACD,qDAnBD,IAqBA,mFAMkC,WAChC/I,GADgC,gFAKhC,OAAMjJ,EAAO9K,KAAKguB,WAAW,GAAIja,GAAjC,SACwB/T,KAAK+oB,YAAY,qBAAsBje,GAA/D,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW7G,MAC9B,sBACQ,IAAItM,GAAmByR,EAAIjU,MAAO,kCAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,mDAlBD,IAoBA,kFAIiC,WAC/BqV,GAD+B,8FAGPnyB,KAAK+oB,YAC3B,8BACAoJ,EAAQ,CAACA,GAAS,IAFpB,OAIA,GAJMlE,EAAY,EAAH,OAKX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWtG,MAC9B,sBACQ,IAAI7M,GACRyR,EAAIjU,MACJ,4CAFF,gCAMKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,mDApBD,IAsBA,mFAKkC,WAChC5M,EACA6D,GAFgC,sFAIhC,OAAMjJ,EAAO9K,KAAKguB,WAAW,CAAC9d,GAAY6D,GAA1C,SACwB/T,KAAK+oB,YAC3B,+BACAje,GAFF,OAKA,GALMmjB,EAAY,EAAH,OAMX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWrG,MAC9B,sBACQ,IAAI9M,GAAmByR,EAAIjU,MAAO,gCAAxC,OAEcrd,OAFd,EAEuBsxB,EAAIzP,OAAtBW,EAAD,EAACA,QAASxiB,EAAAA,EAAAA,MAAAA,EAAAA,OAAAA,SACT,CACLwiB,QAAAA,EACAxiB,MAAiB,OAAVA,EAAiBA,EAAMma,cAAgB,OAFhD,wBAAO,EAAP,sBAID,qDAxBD,IA0BA,uEAGsB,WACpBhT,EACA2R,GAFoB,kFAKpB,OADMye,EAAclwB,GAASF,EAAQQ,aAAaxG,SAAS,UACrD0O,EAAO9K,KAAKguB,WAAW,CAACwE,GAAcze,GAA5C,SACwB/T,KAAK+oB,YAAY,mBAAoBje,GAA7D,OAEA,GAFMmjB,EAAY,EAAH,OAGX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWzQ,IAAwBc,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,WAC/D,sBACQ,IAAI5C,GAAmByR,EAAIjU,MAAO,iCAAxC,UAEiB,OAAfiU,EAAIzP,OAAR,uBACQ,IAAI/oB,MAAM,qBAAhB,iCAEKw4B,EAAIzP,QAAX,yBAAO,EAAP,sBACD,qDAnBD,IAqBA,yEAMwB,WACtB/I,GADsB,qGAIF/T,KAAKyyB,6BAA6B1e,GAApD,OAAS,OAAHwY,EAAM,EAAH,uBACFA,EAAItxB,OAAX,sCAEM,IAAIlH,MAAM,mCAAqC,EAArC,IAAhB,yDAEH,mDAfD,IAiBA,yEAIwB,WACtB4oB,GADsB,qGAIF3c,KAAK0yB,6BAA6B/V,GAApD,OAAS,OAAH4P,EAAM,EAAH,uBACFA,EAAItxB,OAAX,sCAEM,IAAIlH,MAAM,mCAAqC,EAArC,IAAhB,yDAEH,mDAbD,IAeA,mFAIkC,WAChC4oB,GADgC,sFAKhC,OALgC,EAI9BD,GAA4BC,GADvB5I,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEb/H,EAAO9K,KAAKguB,WAChB,GACAja,OACAzb,EACAua,GAJF,SAMwB7S,KAAK+oB,YAAY,qBAAsBje,GAA/D,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW3G,MAC9B,sBACQ,IAAIxM,GAAmByR,EAAIjU,MAAO,kCAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,mDArBD,IAuBA,iEAGgB,2GACU9c,KAAK+oB,YAAY,aAAc,IAAvD,OACA,GADMkF,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW3Q,GAAciC,OAC5C,sBACQ,IAAIzE,GAAmByR,EAAIjU,MAAO,yBAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,kDAVD,IAYA,qEAGoB,2GACM9c,KAAK+oB,YAAY,iBAAkB,IAA3D,OACA,GADMkF,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW3Q,IAAcjB,EAAAA,EAAAA,UAC5C,sBACQ,IAAIvB,GAAmByR,EAAIjU,MAAO,8BAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,kDAVD,IAmEA,+DACc,WACZ1C,EACA0U,GAFY,4FAUZ,OAVY,EASiBpS,GAA4BoS,GAAlD/a,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OACb/H,EAAO9K,KAAK2yB,2BAChB,CAACvY,GACDrG,OACAzb,EACAua,GAJF,SAMwB7S,KAAK+oB,YAAY,WAAYje,GAArD,OAAMmjB,EAAY,EAAH,mBAELpb,OAAAA,QAAAA,IAAAA,OAAAA,EAAAA,EAAQ+f,mBAAhB,OACO,aADP,KACE,EAOK,SAPL,KAOA,iBAAK,EANH,KACI,UADErG,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWrH,MAC9B,uBACQ2F,EAAIjU,MAAV,iCAEKiU,EAAIzP,QAAX,QAGA,KACI,UADEyP,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWtH,MAC9B,uBACQ4F,EAAIjU,MAAV,iCAEKiU,EAAIzP,QAAX,QAGA,KACI,UADEyP,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW1H,MAC9B,uBACQgG,EAAIjU,MAAV,QAEKwE,OAAAA,EAAUyP,EAAVzP,OAAAA,EAAAA,OAAAA,SACAA,GAAM,kBAEJA,GADL,IAEElE,aAAckE,EAAOlE,aAAanS,KAChC,gBAAE+F,EAAD,EAACA,YAAa1F,EAAd,EAAcA,KAAM+W,EAAAA,EAAAA,QAAAA,MAAc,CACjC/W,KAAAA,EACA0F,aAAa,kBACRA,GADQ,IAEXpK,QAASwb,GACPC,EACArR,EAAYpK,WAGhByb,QAAAA,EATF,MAaJ,MAjBJ,gEAqBE,IAAI/C,GAAJ,KAEJ,iCAFF,0DAKH,qDAlED,IAuFA,qEACoB,WAClBV,EACA0U,GAFkB,0FAUlB,OAVkB,EASWpS,GAA4BoS,GAAlD/a,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OACb/H,EAAO9K,KAAK2yB,2BAChB,CAACvY,GACDrG,EACA,aACAlB,GAJF,SAMwB7S,KAAK+oB,YAAY,WAAYje,GAArD,OAAMmjB,EAAY,EAAH,mBAELpb,OAAAA,QAAAA,IAAAA,OAAAA,EAAAA,EAAQ+f,mBAAhB,OACO,aADP,KACE,EAOK,SAPL,KAOA,iBAAK,EANH,KACI,UADErG,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWnH,MAC9B,uBACQyF,EAAIjU,MAAV,iCAEKiU,EAAIzP,QAAX,QAGA,KACI,UADEyP,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWlH,MAC9B,uBACQwF,EAAIjU,MAAV,iCAEKiU,EAAIzP,QAAX,QAGA,KACI,UADEyP,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWpH,MAC9B,uBACQ0F,EAAIjU,MAAV,iCAEKiU,EAAIzP,QAAX,gEAIE,IAAIhC,GAAJ,KAA0C,uBAAhD,0DAEH,qDA7CD,IA+CA,qEAGoB,WAClB6B,GADkB,sFAKlB,OALkB,EAIhBD,GAA4BC,GADvB5I,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEb/H,EAAO9K,KAAKguB,WAChB,GACAja,OACAzb,EACAua,GAJF,SAMwB7S,KAAK+oB,YAAY,iBAAkBje,GAA3D,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW3Q,IAAcI,EAAAA,EAAAA,UAC5C,sBACQ,IAAI5C,GACRyR,EAAIjU,MACJ,0CAFF,gCAMKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,mDAxBD,IA0BA,yEAGwB,WACtBkS,GADsB,wFActB,MARkC,kBAAvBA,EACTjb,EAAaib,EACJA,IACU6D,EAAc7D,EAA1Bjb,WAAkB6W,GAAAA,EAAAA,EAAAA,GAAQoE,EAAjC,IACAjb,EAAa8e,EACbC,EAAQlI,GAGJ9f,EAAO9K,KAAKguB,WAAW,GAAIja,EAAY,SAAU+e,GAAvD,SACwB9yB,KAAK+oB,YAAY,qBAAsBje,GAA/D,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWrO,MAC9B,sBACQ,IAAI9E,GACRyR,EAAIjU,MACJ,8CAFF,gCAMKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,mDA5BD,IAsDA,qEACoB,WAClB3X,EACA2pB,GAFkB,wFAKlB,OALkB,EAIWpS,GAA4BoS,GAAlD/a,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OACb/H,EAAO9K,KAAK2yB,2BAChB,CAACxtB,GACD4O,OACAzb,EACAua,GAJF,SAMwB7S,KAAK+oB,YAAY,iBAAkBje,GAA3D,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW/G,MAC9B,sBACQ,IAAIpM,GAAmByR,EAAIjU,MAAO,6BAAxC,OAGF,GAAMwE,EAASyP,EAAIzP,OACnB,0CAAoBA,GAAP,eAAO,EAAP,mCAGRA,GADE,IAELtQ,aAAa,kBACRsQ,EAAOtQ,aADC,IAEXpK,QAASwb,GACPd,EAAOe,QACPf,EAAOtQ,YAAYpK,cAJV,iDAQhB,qDA/BD,IAiCA,2EAG0B,WACxB+C,EACAwX,GAFwB,sFAMxB,OANwB,EAKtBD,GAA4BC,GADvB5I,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEb/H,EAAO9K,KAAK2yB,2BAChB,CAACxtB,GACD4O,EACA,aACAlB,GAJF,SAMwB7S,KAAK+oB,YAAY,iBAAkBje,GAA3D,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW9G,MAC9B,sBACQ,IAAIrM,GAAmByR,EAAIjU,MAAO,6BAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,qDArBD,IAuBA,4EAG2B,WACzBpN,EACAiN,GAFyB,6FAMzB,OANyB,EAKvBD,GAA4BC,GADvB5I,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEbia,EAAQpd,EAAWjJ,KAAItB,SAAAA,GAO3B,MAAO,CACL4nB,WAAY,iBACZjiB,KARW,EAAK6nB,2BAChB,CAACxtB,GACD4O,EACA,aACAlB,GAMH,IAXD,SAawB7S,KAAKgpB,iBAAiB8D,GAA9C,OACA,OADMmB,EAAY,EAAH,KACT1B,EAAM0B,EAAUxnB,KAAKwnB,SAAAA,GACzB,IAAM1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW9G,IAC9B,GAAI,UAAWoF,EACb,MAAM,IAAIzR,GAAmByR,EAAIjU,MAAO,8BAE1C,OAAOiU,EAAIzP,MACZ,IAND,kBAQOyP,GAAP,wBAAO,EAAP,sBACD,qDAhCD,IA+DA,sEACqB,WACnB7c,EACAiN,GAFmB,6FAMnB,OANmB,EAKjBD,GAA4BC,GADvB5I,EAAD,EAACA,WAAYlB,EAAAA,EAAAA,OAEbia,EAAQpd,EAAWjJ,KAAItB,SAAAA,GAO3B,MAAO,CACL4nB,WAAY,iBACZjiB,KARW,EAAK6nB,2BAChB,CAACxtB,GACD4O,OACAzb,EACAua,GAMH,IAXD,SAawB7S,KAAKgpB,iBAAiB8D,GAA9C,OACA,OADMmB,EAAY,EAAH,KACT1B,EAAM0B,EAAUxnB,KAAKwnB,SAAAA,GACzB,IAAM1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW/G,IAC9B,GAAI,UAAWqF,EACb,MAAM,IAAIzR,GAAmByR,EAAIjU,MAAO,8BAE1C,IAAMwE,EAASyP,EAAIzP,OACnB,OAAKA,GAEE,kBACFA,GADE,IAELtQ,aAAa,kBACRsQ,EAAOtQ,aADC,IAEXpK,QAASwb,GACPd,EAAOe,QACPf,EAAOtQ,YAAYpK,aARL0a,CAYrB,IAlBD,kBAoBOyP,GAAP,wBAAO,EAAP,sBACD,qDA1CD,IA4CA,wEAMuB,WACrBnS,EACArG,GAFqB,oFAIrB,OAAMjJ,EAAO9K,KAAK2yB,2BAA2B,CAACvY,GAAOrG,GAArD,SACwB/T,KAAK+oB,YAAY,oBAAqBje,GAA9D,OACA,GADMmjB,EAAY,EAAH,OAGX,UAFE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWjH,MAE9B,sBACQ,IAAIlM,GAAmByR,EAAIjU,MAAO,iCAAxC,OAGF,GAAMwE,EAASyP,EAAIzP,OACnB,uBACQ,IAAI/oB,MAAM,mBAAqBqmB,EAAO,cAA5C,QAKc,OAFV2Y,GAAQ,kBACTjW,GADS,IAEZlE,aAAckE,EAAOlE,aAAanS,KAAI,YAAyB,IAAvB+F,EAAD,EAACA,YAAa1F,EAAAA,EAAAA,KAC7C1E,EAAU,IAAIyI,GAAQ2B,EAAYpK,SACxC,MAAO,CACL0E,KAAAA,EACA0F,aAAa,kBACRA,GADQ,IAEXpK,QAAAA,UANQ,qCAaX2wB,GADE,IAELna,aAAcma,EAAMna,aAAanS,KAAI,YAAyB,IAAvB+F,EAAD,EAACA,YACrC,MAAO,CACL1F,KAFgDA,EAAAA,KAGhD0F,YAAaiD,GAAY0D,SACvB3G,EAAYpK,QACZoK,EAAYkD,mBALJ,iDAUjB,qDAjDD,IAmDA,gEAGe,WACbwiB,EACAc,EACAjf,GAHa,gFAKb,OAAMjJ,EAAO9K,KAAK2yB,gCACJr6B,IAAZ06B,EAAwB,CAACd,EAAWc,GAAW,CAACd,GAChDne,GAFF,SAIwB/T,KAAK+oB,YAAY,YAAaje,GAAtD,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW3Q,IAAc3E,EAAAA,EAAAA,KAAM+E,EAAAA,EAAAA,WAClD,sBACQ,IAAI5C,GAAmByR,EAAIjU,MAAO,wBAAxC,gCAEKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,uDAlBD,IAoBA,yEAGwB,WACtB1C,EACArG,GAFsB,kFAItB,OAAMjJ,EAAO9K,KAAK2yB,2BAChB,CAACvY,GACDrG,OACAzb,EACA,CACEs6B,mBAAoB,aACpBlM,SAAS,IANb,SASwB1mB,KAAK+oB,YAAY,WAAYje,GAArD,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWhH,MAC9B,sBACQ,IAAInM,GAAmByR,EAAIjU,MAAO,uBAAxC,OAEF,GAAMwE,EAASyP,EAAIzP,OACnB,uBACQ,IAAI/oB,MAAM,SAAWqmB,EAAO,cAAlC,iCAEK0C,GAAP,yBAAO,EAAP,sBACD,qDA1BD,IA4BA,kFAKiC,WAC/B1C,EACArG,GAF+B,kFAI/B,OAAMjJ,EAAO9K,KAAK2yB,2BAChB,CAACvY,GACDrG,OACAzb,EACA,CACEs6B,mBAAoB,aACpBlM,SAAS,IANb,SASwB1mB,KAAK+oB,YAAY,oBAAqBje,GAA9D,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWhH,MAC9B,sBACQ,IAAInM,GAAmByR,EAAIjU,MAAO,iCAAxC,OAEF,GAAMwE,EAASyP,EAAIzP,OACnB,uBACQ,IAAI/oB,MAAM,mBAAqBqmB,EAAO,cAA5C,iCAEK0C,GAAP,yBAAO,EAAP,sBACD,qDA5BD,IA8BA,8EAK6B,WAC3B3X,EACA4O,GAF2B,sFAI3B,OAAMjJ,EAAO9K,KAAK2yB,2BAA2B,CAACxtB,GAAY4O,GAA1D,SACwB/T,KAAK+oB,YAAY,0BAA2Bje,GAApE,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW/G,MAC9B,sBACQ,IAAIpM,GAAmByR,EAAIjU,MAAO,6BAAxC,OAGF,GAAMwE,EAASyP,EAAIzP,OACnB,0CAAoBA,GAAP,QAGb,OADM1a,EAAU,IAAIyI,GAAQiS,EAAOtQ,YAAYpK,SACzCsN,EAAaoN,EAAOtQ,YAAYkD,WAAtC,qCAEKoN,GADE,IAELtQ,YAAaiD,GAAY0D,SAAS/Q,EAASsN,MAA9B,iDAEhB,qDAzBD,IA2BA,oFAKmC,WACjCvK,EACA4O,GAFiC,gFAIjC,OAAMjJ,EAAO9K,KAAK2yB,2BAChB,CAACxtB,GACD4O,EACA,cAHF,SAKwB/T,KAAK+oB,YAAY,0BAA2Bje,GAApE,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW9G,MAC9B,sBACQ,IAAIrM,GACRyR,EAAIjU,MACJ,uCAFF,gCAKKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,qDAvBD,IAyBA,qFAKoC,WAClCpN,EACAqE,GAFkC,uFAIlC,OAAM+Y,EAAQpd,EAAWjJ,KAAItB,SAAAA,GAM3B,MAAO,CACL4nB,WAAY,0BACZjiB,KAPW,EAAK6nB,2BAChB,CAACxtB,GACD4O,EACA,cAMH,IAVD,SAYwB/T,KAAKgpB,iBAAiB8D,GAA9C,OACA,OADMmB,EAAY,EAAH,KACT1B,EAAM0B,EAAUxnB,KAAKwnB,SAAAA,GACzB,IAAM1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAW9G,IAC9B,GAAI,UAAWoF,EACb,MAAM,IAAIzR,GACRyR,EAAIjU,MACJ,wCAGJ,OAAOiU,EAAIzP,MACZ,IATD,kBAWOyP,GAAP,wBAAO,EAAP,sBACD,qDAlCD,IAoCA,uFAUsC,WACpC/nB,EACA0tB,EACAc,GAHoC,sFAKpC,OAAIrf,EAAe,CAAC,EAApB,SAEgC3T,KAAKizB,yBAArC,OAAIC,EAAsB,EAAH,eACd,UAAWvf,EAAb,iBACI,OAATue,GACiB,GAAKA,EAAYgB,GAAlC,6EAKsBlzB,KAAKmzB,4BACvBjB,EACA,aAFF,SAAMa,EAAQ,EAAH,MAIDrjB,WAAW9c,OAAS,IAC5B+gB,EAAQyf,MACNL,EAAMrjB,WAAWqjB,EAAMrjB,WAAW9c,OAAS,GAAGwJ,YACjD,uDAEGwI,EAAAA,cAAe7Q,OAAS6Q,EAAAA,GAAIxC,QAAQyO,SAAS,YAAjD,kHAQ6B7Q,KAAKqzB,QAAQ,aAA9C,QAAIC,EAAuB,EAAH,gBACf,WAAY3f,EAAd,iBACE,OAAPqf,EACcM,GAAd,gFAKsBtzB,KAAKmzB,4BAA4BH,GAArD,SAAMD,EAAQ,EAAH,MACDrjB,WAAW9c,OAAS,IAC5B+gB,EAAQ4f,OACNR,EAAMrjB,WAAWqjB,EAAMrjB,WAAW9c,OAAS,GAAGwJ,YACjD,wDAEGwI,EAAAA,cAAe7Q,OAAS6Q,EAAAA,GAAIxC,QAAQyO,SAAS,YAAjD,oHAQiC7Q,KAAKwzB,kCACxChvB,EACAmP,GAFF,QAA4B,OAAtB8f,EAAyB,EAAH,uBAIrBA,EAAuBhtB,KAAI8kB,SAAAA,GAAI,OAAIA,EAAKpmB,SAAxC,KAAP,yBAAO,EAAP,uCACD,uDArED,IAuEA,wFAQuC,WACrCX,EACAmP,EACAI,GAHqC,gFAKrC,OAAMjJ,EAAO9K,KAAK2yB,2BAChB,CAACnuB,EAAQb,YACToQ,OACAzb,EACAqb,GAJF,SAMwB3T,KAAK+oB,YAC3B,oCACAje,GAFF,OAIA,GAJMmjB,EAAY,EAAH,OAKX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWpM,MAC9B,sBACQ,IAAI/G,GACRyR,EAAIjU,MACJ,kDAFF,gCAKKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,uDA/BD,IAiCA,8EAQ6B,WAC3BtY,EACAmP,EACAI,GAH2B,gFAK3B,OAAMjJ,EAAO9K,KAAK2yB,2BAChB,CAACnuB,EAAQb,YACToQ,OACAzb,EACAqb,GAJF,SAMwB3T,KAAK+oB,YAAY,0BAA2Bje,GAApE,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWjM,MAC9B,sBACQ,IAAIlH,GACRyR,EAAIjU,MACJ,wCAFF,gCAKKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,uDA5BD,IA4BC,4EAE0B,WACzB9S,EACA6I,GAFyB,kGAImB7S,KAAK4uB,yBAC/C5kB,EACA6I,GAFF,OAWC,OAXD,SAAO4K,EAAD,EAACA,QAAgBiW,EAAAA,EAAPz4B,MAKZA,EAAQ,KACQ,OAAhBy4B,IACFz4B,EAAQ,IAAIkgB,GAA0B,CACpCpX,IAAKiG,EACLhL,MAAOmc,GAA0BrY,YAAY4wB,EAAYzzB,SAE5D,kBAEM,CACLwd,QAAAA,EACAxiB,MAAAA,IAFF,wBAAO,EAAP,sBAID,qDAvBA,IAyBD,yEAGwB,WACtBoa,EACAsH,GAFsB,kGAIsB3c,KAAK4uB,yBAC/CvZ,EACAsH,GAFF,OAQC,OARD,SAAOc,EAAD,EAACA,QAAgBiW,EAAAA,EAAPz4B,MAKZA,EAAQ,KACQ,OAAhBy4B,IACFz4B,EAAQia,GAAaye,gBAAgBD,EAAYzzB,OAClD,kBAEM,CACLwd,QAAAA,EACAxiB,MAAAA,IAFF,wBAAO,EAAP,sBAID,qDArBD,IAuBA,+DAGc,WACZoa,EACAsH,GAFY,sFAIC3c,KAAKwxB,mBAAmBnc,EAAcsH,GAChDwR,MAAK1wB,SAAAA,GAAC,OAAIA,EAAExC,KADF,IAEVmzB,OAAM51B,SAAAA,GACL,MAAM,IAAIzE,MACR,mCACEshB,EAAa1R,WACb,KACAnL,EAEL,IATH,cAAO,EAAP,gDAAO,EAAP,sBAUD,qDAjBD,IAmBA,qEAcoB,WAClByI,EACA4V,GAFkB,8FAIM7W,KAAK+oB,YAAY,iBAAkB,CACzD9nB,EAAG0C,WACHkT,IAFF,OAIA,GAJMoX,EAAY,EAAH,OAKX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWpG,MAC9B,sBACQ,IAAI/M,GACRyR,EAAIjU,MADA,qBAEUrX,EAAG0C,WAAW,YAF9B,gCAKK4oB,EAAIzP,QAAX,wBAAO,EAAP,sBACD,qDA9BD,IAgCA,sFAGqC,WACnC8W,GADmC,iFAG9BA,EAAL,4BAES5zB,KAAKupB,kBAAZ,gCACQhV,GAAM,KAAZ,6BAGF,GADMsf,EAAiBC,KAAKC,MAAQ/zB,KAAKwpB,eAAeE,UAClDsK,EAAUH,GA3rKoB,IA4rKQ,OAAxC7zB,KAAKwpB,eAAeC,iBAA6BuK,EAArD,0CACSh0B,KAAKwpB,eAAeC,iBAA3B,yBAISzpB,KAAKi0B,oBAAlB,eAAO,EAAP,iDAAO,EAAP,sBACD,mDAnBD,IAqBA,wEAGuB,iGACrBj0B,KAAKupB,mBAAoB,EAAzB,SAEQ2K,EAAYJ,KAAKC,MACjBI,EAAwBn0B,KAAKwpB,eAAeC,gBAC5C2K,EAAkBD,EACpBA,EAAsBjkB,UACtB,KACKvY,EAAI,EAAb,YAAgBA,EAAI,IAApB,iCACgCqI,KAAKq0B,mBAAmB,aAAtD,OAAqB,GAAf5K,EAAkB,EAAH,KAEjB2K,IAAoB3K,EAAgBvZ,UAAxC,iBACE,OAAAlQ,KAAKwpB,eAAiB,CACpBC,gBAAAA,EACAC,UAAWoK,KAAKC,MAChBpK,sBAAuB,GACvBC,oBAAqB,IAJvB,kBAMOH,GAAP,yBAIIlV,GAAM+f,KAAZ,QAdsB38B,IAAxB,6BAiBM,IAAI5D,MAAJ,iDACsC+/B,KAAKC,MAAQG,EAAU,OADnE,QAIA,OAJA,UAIAl0B,KAAKupB,mBAAoB,EAAzB,oDAAAvpB,KAAA,kBAEH,kDAlCD,IAoCA,gFAG+B,WAC7B6S,GAD6B,sFAI7B,OAJ6B,EAGW6J,GAA4B7J,GAA7DkB,EAAD,EAACA,WAAoBsa,EAAAA,EAARxb,OACb/H,EAAO9K,KAAKguB,WAAW,GAAIja,EAAY,SAAUsa,GAAvD,SACwBruB,KAAK+oB,YAAY,4BAA6Bje,GAAtE,OACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWzQ,IAAwBE,EAAAA,EAAAA,UACtD,sBACQ,IAAI5C,GACRyR,EAAIjU,MADA,0CAAN,gCAKKiU,EAAIzP,QAAX,wBAAO,EAAP,sBACD,mDAjBD,IA2CA,0EACyB,WACvByX,EACAC,EACAC,GAHuB,mIAKnB,YAAaF,GAAjB,iBAGE,GADMthB,EADcshB,EACgB3xB,YAC9B8xB,EACJlyB,EAAAA,GAAAA,KAAYyQ,GAAiB7W,SAAS,WACpCjE,MAAMC,QAAQo8B,SAAwCl8B,IAApBm8B,EAAtC,sBACQ,IAAI1gC,MAAM,qBAAhB,OASF,OANM8e,EAAc2hB,GAAmB,CAAC,GACjCvF,SAAW,SACZ,eAAgBpc,IACpBA,EAAOkB,WAAa/T,KAAK+T,YAGrBjJ,EAAO,CAAC4pB,EAAoB7hB,GAAlC,UACwB7S,KAAK+oB,YAAY,sBAAuBje,GAAhE,QACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWzO,MAC9B,uBACQ,IAAIzrB,MAAM,mCAAqCw4B,EAAIjU,MAAMlW,SAA/D,iCAEKmqB,EAAIzP,QAAX,QAeD,GAXGyX,aAAgC9kB,IAC9BklB,EAA0BJ,GAC9B/nB,EAAc,IAAIiD,IACNE,SAAWglB,EAAWhlB,SAClCnD,EAAYpG,aAAemuB,EAAqBnuB,aAChDoG,EAAYqD,UAAY8kB,EAAW9kB,UACnCrD,EAAYkD,WAAailB,EAAWjlB,aAEpClD,EAAciD,GAAY0D,SAASohB,IAEvBxkB,SAAWvD,EAAYwD,WAAQ1X,OAGrBA,IAApBk8B,GAAkCr8B,MAAMC,QAAQo8B,GAApD,uBACQ,IAAIzgC,MAAM,qBAAhB,QAGF,GAAMqc,EAAUokB,GACZhoB,EAAYqD,YAAaO,EAA7B,kBACE5D,EAAAA,GAAYrK,KAAZ,gBAAoBiO,IAApB,wBAEIwjB,EAAe5zB,KAAKspB,yBAAxB,yBAEgCtpB,KAAK40B,gCACjChB,GADF,QAIA,GAJMnK,EAAkB,EAAH,KAGrBjd,EAAYoD,qBAAuB6Z,EAAgB7Z,qBACnDpD,EAAYxB,gBAAkBye,EAAgBvZ,UAEzCE,EAAL,qDAEA,IAAA5D,EAAAA,GAAYrK,KAAZ,gBAAoBiO,IACf5D,EAAYrH,UAAjB,uBACQ,IAAIpR,MAAM,cAAhB,QAGF,GAAMoR,EAAYqH,EAAYrH,UAAU/I,SAAS,UAE9C4D,KAAKwpB,eAAeI,oBAAoB/Y,SAAS1L,IACjDnF,KAAKwpB,eAAeG,sBAAsB9Y,SAAS1L,GAFtD,iBAME,OAAAnF,KAAKwpB,eAAeI,oBAAoBhyB,KAAKuN,GAA7C,6BAOAyuB,GAAe,EAAf,gCA+BN,OA1BMxxB,EAAUoK,EAAYkF,WACtBjF,EAAWrK,EAAQQ,YACnBqQ,EAAkBzG,EAAYsG,WAAWrG,GACzCioB,EAAqBzhB,EAAgB7W,SAAS,UAC9CyW,EAAc,CAClBoc,SAAU,SACVlb,WAAY/T,KAAK+T,YAGf0gB,IACIhrB,GACJtR,MAAMC,QAAQq8B,GACVA,EACAryB,EAAQuJ,iBACZlF,KAAI1C,SAAAA,GAAG,OAAIA,EAAIJ,UAJC,IAMlBkP,EAAM,SAAe,CACnBoc,SAAU,SACVxlB,UAAAA,IAIA2G,IACFyC,EAAOgiB,WAAY,GAGf/pB,EAAO,CAAC4pB,EAAoB7hB,GAAlC,UACwB7S,KAAK+oB,YAAY,sBAAuBje,GAAhE,QACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWzO,MAC9B,iBASG,KAPG,SAAU+M,EAAIjU,QAChBuC,EAAO0R,EAAIjU,MAAMrY,KAAK4a,OACV1iB,MAAMC,QAAQyiB,KAElBia,GADAC,EAAc,UACWla,EAAKma,KAAKD,GACzCrkB,QAAQ4H,MAAMiU,EAAIjU,MAAMlW,QAAS0yB,IAG/B,IAAIla,GACR,mCAAqC2R,EAAIjU,MAAMlW,QAC/CyY,GAFF,iCAKK0R,EAAIzP,QAAX,yBAAO,EAAP,sBACD,uDAnID,IA6JA,sEACqB,WACnBtQ,EACAyoB,EACAthB,GAHmB,2FAKf,YAAanH,GAAjB,oBACMyoB,IAAoB98B,MAAMC,QAAQ68B,GAAtC,sBACQ,IAAIlhC,MAAM,qBAAhB,OAGF,OAAMkf,EAAkBzG,EAAY5J,YAApC,SACa5C,KAAKk1B,mBAAmBjiB,EAAiBU,GAAtD,cAAO,EAAP,uCAGuBrb,IAArB28B,GAAmC98B,MAAMC,QAAQ68B,GAArD,sBACQ,IAAIlhC,MAAM,qBAAhB,OAGF,GAAMqc,EAAU6kB,GACZzoB,EAAYqD,UAAhB,iBACErD,EAAYrK,KAAZ,MAAAqK,GAAW,OAAS4D,IAApB,wBAEIwjB,EAAe5zB,KAAKspB,yBAAxB,yBAEgCtpB,KAAK40B,gCACjChB,GADF,QAKA,GALMnK,EAAkB,EAAH,KAGrBjd,EAAYoD,qBAAuB6Z,EAAgB7Z,qBACnDpD,EAAYxB,gBAAkBye,EAAgBvZ,UAC9C1D,EAAYrK,KAAZ,MAAAqK,GAAW,OAAS4D,IACf5D,EAAYrH,UAAjB,uBACQ,IAAIpR,MAAM,cAAhB,QAGF,GAAMoR,EAAYqH,EAAYrH,UAAU/I,SAAS,UAC5C4D,KAAKwpB,eAAeG,sBAAsB9Y,SAAS1L,GAAxD,iBAGE,OAAAnF,KAAKwpB,eAAeG,sBAAsB/xB,KAAKuN,GAA/C,6BAOAyuB,GAAe,EAAf,gCAKN,OAAM3gB,EAAkBzG,EAAY5J,YAApC,UACa5C,KAAKk1B,mBAAmBjiB,EAAiBU,GAAtD,eAAO,EAAP,iDAAO,EAAP,sBACD,uDArDD,IAuDA,yEAIwB,WACtBwhB,EACAxhB,GAFsB,8EAItB,OAAM+gB,EAAqBpyB,GAAS6yB,GAAgB/4B,SAAS,UAA7D,SACqB4D,KAAKo1B,uBACxBV,EACA/gB,GAFF,OAAY,OAANmJ,EAAS,EAAH,uBAILA,GAAP,wBAAO,EAAP,sBACD,qDAdD,IAgBA,6EAI4B,WAC1B4X,EACA/gB,GAF0B,wFAsB1B,OAlBMd,EAAc,CAACoc,SAAU,UACzBpb,EAAgBF,GAAWA,EAAQE,cACnCC,EACHH,GAAWA,EAAQG,qBAAwB9T,KAAK+T,WAE/CJ,GAAiC,MAAtBA,EAAQK,aACrBnB,EAAOmB,WAAaL,EAAQK,YAE1BL,GAAqC,MAA1BA,EAAQ1D,iBACrB4C,EAAO5C,eAAiB0D,EAAQ1D,gBAE9B4D,IACFhB,EAAOgB,cAAgBA,GAErBC,IACFjB,EAAOiB,oBAAsBA,GAGzBhJ,EAAO,CAAC4pB,EAAoB7hB,GAAlC,UACwB7S,KAAK+oB,YAAY,kBAAmBje,GAA5D,QACA,GADMmjB,EAAY,EAAH,OAEX,UADE1B,GAAMj5B,EAAAA,EAAAA,IAAO26B,EAAWnG,MAC9B,iBAIG,KAFG,SAAUyE,EAAIjU,QAChBuC,EAAO0R,EAAIjU,MAAMrY,KAAK4a,MAElB,IAAID,GACR,+BAAiC2R,EAAIjU,MAAMlW,QAC3CyY,GAFF,iCAKK0R,EAAIzP,QAAX,yBAAO,EAAP,sBACD,qDAxCD,IA0CA,uBAGAwQ,WAAY,WACVttB,KAAKkpB,wBAAyB,EAC9BlpB,KAAKmpB,uBAAyBkM,aAAY,WAExC,EAAKpM,cAAcqM,OAAO,QAAQlH,OAAM,WAAO,MAC9C,KACHpuB,KAAKu1B,sBACN,GAED,wBAGAhI,SAAW3oB,GACT5E,KAAKkpB,wBAAyB,EAC9BxY,QAAQ4H,MAAM,YAAa1T,EAAIxC,QAChC,GAED,wBAGAorB,SAAWxS,GAAc,WACvBhb,KAAKkpB,wBAAyB,EAC9BlpB,KAAKqpB,yBACFrpB,KAAKqpB,wBAA0B,GAAKr2B,OAAOwiC,iBAC1Cx1B,KAAKopB,2BACP6I,aAAajyB,KAAKopB,0BAClBppB,KAAKopB,yBAA2B,MAE9BppB,KAAKmpB,yBACPsM,cAAcz1B,KAAKmpB,wBACnBnpB,KAAKmpB,uBAAyB,MAGnB,MAATnO,GAOJhb,KAAKiqB,6CAA+C,CAAC,EACrD52B,OAAOqV,QACL1I,KAAKkqB,sBACL5lB,SAAQ,YAA0B,mBAAxBoxB,EAAD,KAAOxT,EAAP,KACT,EAAKyT,iBAAiBD,GAAtB,kBACKxT,GADuB,IAE1BljB,MAAO,iBAXTgB,KAAKu1B,sBAcR,GAED,8BAGQI,SACND,EACAE,GACA,MACMC,EAAY,QAAH,EAAG71B,KAAKkqB,qBAAqBwL,UAA1B,eAAiC12B,MAEnD,GADAgB,KAAKkqB,qBAAqBwL,GAAQE,EAC9BC,IAAcD,EAAiB52B,MAAO,CACxC,IAAM82B,EACJ91B,KAAKgqB,wCAAwC0L,GAC3CI,GACFA,EAAqBxxB,SAAQyxB,SAAAA,GAC3B,IACEA,EAAGH,EAAiB52B,MAEb,CAAP,SAAO,IAGd,CACF,GAED,wCAGQ0xB,SACNsF,EACAhK,GACkC,aAC5B0J,EACJ11B,KAAK+pB,wCAAwCiM,GAC/C,GAAY,MAARN,EACF,OAAO,WAAO,EAEhB,IAAMI,GAA6B9L,EAAAA,KAAAA,yCACjC0L,KAD4BO,EAC5BP,GACI,IAAIxjB,KAEV,OADA4jB,EAAqBzlB,IAAI2b,GAClB,WACL8J,EAAqBtrB,OAAOwhB,GACM,IAA9B8J,EAAqB/tB,aAChB,EAAKiiB,wCAAwC0L,GAGzD,GAED,2EAG0B,qGAC8B,IAAlDriC,OAAOwT,KAAK7G,KAAKkqB,sBAAsBt3B,OAA3C,gBAgBG,OAfGoN,KAAKkpB,yBACPlpB,KAAKkpB,wBAAyB,EAC9BlpB,KAAKopB,yBAA2BzU,YAAW,WACzC,EAAKyU,yBAA2B,KAChC,IACE,EAAKH,cAAciN,OAQpB,CAPC,MAAOtxB,GAEHA,aAAe7Q,OACjB2c,QAAQ8b,IAAR,gDAC2C5nB,EAAIxC,SAGlD,IACA,MACJ,0BAQF,GAJqC,OAAlCpC,KAAKopB,2BACP6I,aAAajyB,KAAKopB,0BAClBppB,KAAKopB,yBAA2B,KAChCppB,KAAKkpB,wBAAyB,GAG3BlpB,KAAKkpB,uBAAV,gBACE,OAAAlpB,KAAKipB,cAAckN,UAAnB,0BAKF,OADMC,EAA4Bp2B,KAAKqpB,wBACjCgN,EAAiC,WACrC,OAAOD,IAA8B,EAAK/M,yBAD5C,UAIM5U,QAAQuE,IAKZ3lB,OAAOwT,KAAK7G,KAAKkqB,sBAAsBzjB,IAAvC,yCAA2C,WAAMivB,GAAN,4EACzC,QACqBp9B,KADf4pB,EAAe,EAAKgI,qBAAqBwL,IAC/C,sDAIQxT,EAAaljB,MAArB,OACO,YADP,MAEO,iBADL,OA+DK,eA9DL,KA8DA,iBAAK,EAAL,GA7DsC,IAAhCkjB,EAAaoU,UAAUvuB,KAA3B,iBAmBG,cALM,EAAKmiB,qBAAqBwL,GACN,iBAAvBxT,EAAaljB,cACR,EAAKirB,6CACV/H,EAAaqU,sBAEhB,UACK,EAAKhB,uBAAX,4DAGI,uBAAC,6FAGH,OAFKzqB,EAAgBoX,EAAhBpX,KAAMmhB,EAAU/J,EAAV+J,OAAAA,EAAAA,KAAAA,EAEX,EAAK0J,iBAAiBD,GAAtB,kBACKxT,GADuB,IAE1BljB,MAAO,iBAFT,SAKS,EAAKiqB,cAAc9uB,KAAK8xB,EAAQnhB,GADzC,OAOA,OAPMyrB,EAA0C,OAEhD,EAAKZ,iBAAiBD,GAAtB,kBACKxT,GADuB,IAE1BqU,qBAAAA,EACAv3B,MAAO,gBAET,EAAKirB,6CACHsM,GACErU,EAAaoU,UAFjB,UAGM,EAAKf,uBAAX,gCAQC,GARD,0BAEI/8B,EAAAA,cAAazE,OACf2c,QAAQ4H,MAAR,UACK2T,EAAO,uBACVnhB,EACAtS,EAAAA,GAAE4J,SAGDi0B,IAAL,mDAIA,SAAKV,iBAAiBD,GAAtB,kBACKxT,GADuB,IAE1BljB,MAAO,aAFT,UAIM,EAAKu2B,uBAAX,yDAlCE,GAAN,QA2CE,oCA3CF,WAuCoC,IAAhCrT,EAAaoU,UAAUvuB,KAA3B,mCAIQ,uBAAC,2FACwByuB,GAAtBD,EAA2CrU,EAA3CqU,qBAAsBC,EAAqBtU,EAArBsU,mBAE3B,EAAKrM,gCAAgC1e,IAAI8qB,GAD3C,gBAYE,EAAKpM,gCAAgC3f,OACnC+rB,GADF,uBAQA,OAJA,EAAKZ,iBAAiBD,GAAtB,kBACKxT,GADuB,IAE1BljB,MAAO,mBAET,EAAK22B,iBAAiBD,GAAtB,kBACKxT,GADuB,IAE1BljB,MAAO,mBAFT,mBAKQ,EAAKiqB,cAAc9uB,KAAKq8B,EAAmB,CAC/CD,IADF,gCAMC,GAND,0BAII/9B,EAAAA,cAAazE,OACf2c,QAAQ4H,MAAR,UAAiBke,EAAkB,WAAUh+B,EAAAA,GAAE4J,SAE5Ci0B,IAAL,mDAIA,SAAKV,iBAAiBD,GAAtB,kBACKxT,GADuB,IAE1BljB,MAAO,gBAFT,UAIM,EAAKu2B,uBAAX,0CAIJ,SAAKI,iBAAiBD,GAAtB,kBACKxT,GADuB,IAE1BljB,MAAO,kBAFT,UAIM,EAAKu2B,uBAAX,yDAlDI,GAAN,4CA3ER,wDALF,iDA4ID,kDApLD,IAsLA,uCAGQkB,SAGNF,EACAG,GAEA,IAAMJ,EACJt2B,KAAKiqB,6CAA6CsM,QAClCj+B,IAAdg+B,GAGJA,EAAUhyB,SAAQyxB,SAAAA,GAChB,IACEA,EAAE,qBAKGW,GAIN,CAFC,MAAOl+B,GACPkY,QAAQ4H,MAAM9f,EACf,IAEJ,GAED,sCAGAi1B,SAAyBkJ,GACvB,OAA+BrjC,EAAAA,EAAAA,IAC7BqjC,EACA1U,IAFKnF,EAAD,EAACA,OAAQoF,EAAAA,EAAAA,aAIfliB,KAAKy2B,0BAAiDvU,EAAc,CAClEpF,EAAO7hB,MACP6hB,EAAOW,SAEV,GAED,+BAGQmZ,SACNC,EAyBA/rB,GACsB,WAChBkrB,EAAuBh2B,KAAK6pB,4BAC5B6L,EAAOoB,GACX,CAACD,EAAmB5K,OAAQnhB,IAC5B,GAEIisB,EAAuB/2B,KAAKkqB,qBAAqBwL,GA4BvD,YA3B6Bp9B,IAAzBy+B,EACF/2B,KAAKkqB,qBAAqBwL,IAAQ,kBAC7BmB,GAD6B,IAEhC/rB,KAAAA,EACAwrB,UAAW,IAAIpkB,IAAI,CAAC2kB,EAAmB7K,WACvChtB,MAAO,YAGT+3B,EAAqBT,UAAUjmB,IAAIwmB,EAAmB7K,UAExDhsB,KAAK+pB,wCAAwCiM,GAAwBN,EACrE11B,KAAK8pB,oDACHkM,IADF,uBAEI,yFAUF,cATO,EAAKlM,oDACVkM,UAEK,EAAKjM,wCAAwCiM,GAEpDj3B,QACmBzG,KAFb4pB,EAAe,EAAKgI,qBAAqBwL,IACzC,iFAEwEM,IAE9E9T,EAAaoU,UAAU9rB,OAAOqsB,EAAmB7K,UAAjD,SACM,EAAKuJ,uBAAX,2CAEFv1B,KAAKu1B,uBACES,CACR,GAED,6BAQAgB,SACEj1B,EACAiqB,EACAjY,GAEA,IAAMjJ,EAAO9K,KAAKguB,WAChB,CAACjsB,EAAU4B,YACXoQ,GAAc/T,KAAK2oB,aAAe,YAClC,UAEF,OAAO3oB,KAAK42B,kBACV,CACE5K,SAAAA,EACAC,OAAQ,mBACRuK,kBAAmB,sBAErB1rB,EAEH,GAED,kFAKiC,WAC/BkrB,GAD+B,sFAGzBh2B,KAAKi3B,+BACTjB,EACA,kBAFF,gDAID,mDAZD,IAcA,6CAGAtI,SAAgCiJ,GAC9B,OAA+BrjC,EAAAA,EAAAA,IAC7BqjC,EACAvU,IAFKtF,EAAD,EAACA,OAAQoF,EAAAA,EAAAA,aAIfliB,KAAKy2B,0BAAwDvU,EAAc,CACzE,CACEgV,UAAWpa,EAAO7hB,MAAM8L,OACxB2sB,YAAa5W,EAAO7hB,MAAMiQ,SAE5B4R,EAAOW,SAEV,GAED,oCAUA0Z,SACEjzB,EACA8nB,EACAjY,EACAqjB,GAEA,IAAMtsB,EAAO9K,KAAKguB,WAChB,CAAC9pB,EAAUP,YACXoQ,GAAc/T,KAAK2oB,aAAe,YAClC,SACAyO,EAAU,CAACA,QAASA,QAAW9+B,GAEjC,OAAO0H,KAAK42B,kBACV,CACE5K,SAAAA,EACAC,OAAQ,mBACRuK,kBAAmB,sBAErB1rB,EAEH,GAED,yFAKwC,WACtCkrB,GADsC,sFAGhCh2B,KAAKi3B,+BACTjB,EACA,0BAFF,gDAID,mDAZD,IAcA,oBAGAqB,SACEzuB,EACAojB,EACAjY,GAEA,IAAMjJ,EAAO9K,KAAKguB,WAChB,CAAmB,kBAAXplB,EAAsB,CAAC0uB,SAAU,CAAC1uB,EAAOxM,aAAewM,GAChEmL,GAAc/T,KAAK2oB,aAAe,aAEpC,OAAO3oB,KAAK42B,kBACV,CACE5K,SAAAA,EACAC,OAAQ,gBACRuK,kBAAmB,mBAErB1rB,EAEH,GAED,2EAK0B,WACxBkrB,GADwB,sFAGlBh2B,KAAKi3B,+BAA+BjB,EAAsB,QAAhE,gDACD,mDATD,IAWA,mCAGAjI,SAAsB4I,GACpB,OAA+BrjC,EAAAA,EAAAA,IAAOqjC,EAAc3O,IAA7ClL,EAAD,EAACA,OAAQoF,EAAAA,EAAAA,aACfliB,KAAKy2B,0BAAwCvU,EAAc,CACzDpF,EAAO7hB,MACP6hB,EAAOW,SAEV,GAED,mCAGAkQ,SAAsBgJ,GACpB,OAA+BrjC,EAAAA,EAAAA,IAAOqjC,EAAcnU,IAA7C1F,EAAD,EAACA,OAAQoF,EAAAA,EAAAA,aACfliB,KAAKy2B,0BAA8CvU,EAAc,CAACpF,GACnE,GAED,0BAMAya,SAAavL,GACX,OAAOhsB,KAAK42B,kBACV,CACE5K,SAAAA,EACAC,OAAQ,gBACRuK,kBAAmB,mBAErB,GAEH,GAED,+EAK8B,WAC5BR,GAD4B,sFAGtBh2B,KAAKi3B,+BACTjB,EACA,eAFF,gDAID,mDAZD,IAcA,0CAGApI,SAA6B+I,GAC3B,OAA+BrjC,EAAAA,EAAAA,IAC7BqjC,EACA3T,IAFKlG,EAAD,EAACA,OAAQoF,EAAAA,EAAAA,aAIfliB,KAAKy2B,0BAA8CvU,EAAc,CAACpF,GACnE,GAED,0BAOA0a,SAAaxL,GACX,OAAOhsB,KAAK42B,kBACV,CACE5K,SAAAA,EACAC,OAAQ,wBACRuK,kBAAmB,2BAErB,GAEH,GAED,+EAK8B,WAC5BR,GAD4B,sFAGtBh2B,KAAKi3B,+BACTjB,EACA,eAFF,gDAID,mDAZD,IAcA,qFAI4C,WAC1CA,EACAyB,GAF0C,4EAI1C,KAAMC,EACJ13B,KAAK8pB,oDACHkM,IAEJ,gCACQ0B,IAAN,6BAEAhnB,QAAQC,KACN,sEACG,WAAIqlB,EAAqB,kBAAUyB,EAAiB,aACrD,uBAHJ,gDAMH,qDArBD,IAqBC,wBAEDzJ,SACEljB,EACA6sB,EACA1I,EACA6D,GAEA,IAAM/e,EAAa4jB,GAAY33B,KAAK2oB,YACpC,GAAI5U,GAAckb,GAAY6D,EAAO,CACnC,IAAInf,EAAe,CAAC,EAChBsb,IACFtb,EAAQsb,SAAWA,GAEjBlb,IACFJ,EAAQI,WAAaA,GAEnB+e,IACFnf,EAAUtgB,OAAOI,OAAOkgB,EAASmf,IAEnChoB,EAAKlT,KAAK+b,EACX,CACD,OAAO7I,CACR,GAED,wCAGA6nB,SACE7nB,EACA6sB,EACA1I,EACA6D,GAEA,IAAM/e,EAAa4jB,GAAY33B,KAAK2oB,YACpC,GAAI5U,IAAe,CAAC,YAAa,aAAalD,SAASkD,GACrD,MAAM,IAAIhgB,MACR,8CACEiM,KAAK2oB,YACL,+CAGN,OAAO3oB,KAAKguB,WAAWljB,EAAM6sB,EAAU1I,EAAU6D,EAClD,GAED,wCAGAjF,SAA2B8I,GACzB,OAA+BrjC,EAAAA,EAAAA,IAC7BqjC,EACA1T,IAFKnG,EAAD,EAACA,OAAQoF,EAAAA,EAAAA,aAIM,sBAAjBpF,EAAO7hB,OAcT+E,KAAKmqB,gCAAgC9Z,IAAI6R,GAE3CliB,KAAKy2B,0BACHvU,EACiB,sBAAjBpF,EAAO7hB,MACH,CAAC,CAACyM,KAAM,YAAaoV,EAAOW,SAC5B,CAAC,CAAC/V,KAAM,SAAUoV,OAAQA,EAAO7hB,OAAQ6hB,EAAOW,SAEvD,GAED,yBAQA4S,SACElrB,EACA6mB,EACAjY,GACsB,WAChBjJ,EAAO9K,KAAKguB,WAChB,CAAC7oB,GACD4O,GAAc/T,KAAK2oB,aAAe,aAE9BqN,EAAuBh2B,KAAK42B,kBAChC,CACE5K,SAAU,SAAC2K,EAAclZ,GACvB,GAA0B,WAAtBkZ,EAAajvB,KAAmB,CAClCskB,EAAS2K,EAAa7Z,OAAQW,GAG9B,IACE,EAAK0S,wBAAwB6F,EAEhB,CAAb,MAAO4B,GAAM,CAGhB,GAEH3L,OAAQ,qBACRuK,kBAAmB,wBAErB1rB,GAEF,OAAOkrB,CACR,GAED,oCAUA6B,SACE1yB,EACA6mB,EACArY,GACsB,WACtB,qBACKA,GAD0B,IAE7BI,WACGJ,GAAWA,EAAQI,YAAe/T,KAAK2oB,aAAe,cAHpD5U,EAAD,EAACA,WAAe+e,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,IAKhBhoB,EAAO9K,KAAKguB,WAChB,CAAC7oB,GACD4O,OACAzb,EACAw6B,GAEIkD,EAAuBh2B,KAAK42B,kBAChC,CACE5K,SAAU,SAAC2K,EAAclZ,GACvBuO,EAAS2K,EAAclZ,GAGvB,IACE,EAAK0S,wBAAwB6F,EAEhB,CAAb,MAAO4B,GAAM,GAIjB3L,OAAQ,qBACRuK,kBAAmB,wBAErB1rB,GAEF,OAAOkrB,CACR,GAED,8EAK6B,WAC3BA,GAD2B,sFAGrBh2B,KAAKi3B,+BACTjB,EACA,oBAFF,gDAID,mDAZD,IAcA,mCAGAlI,SAAsB6I,GACpB,OAA+BrjC,EAAAA,EAAAA,IAAOqjC,EAAczT,IAA7CpG,EAAD,EAACA,OAAQoF,EAAAA,EAAAA,aACfliB,KAAKy2B,0BAA8CvU,EAAc,CAACpF,GACnE,GAED,0BAMAgb,SAAa9L,GACX,OAAOhsB,KAAK42B,kBACV,CACE5K,SAAAA,EACAC,OAAQ,gBACRuK,kBAAmB,mBAErB,GAEH,GAED,+EAK8B,WAC5BR,GAD4B,sFAGtBh2B,KAAKi3B,+BACTjB,EACA,eAFF,gDAID,mDAZD,MAYC,EA7lHI,GC/1FM+B,GAAN,WASLxkC,SAAAA,EAAYykC,IAA0B,oBAR9BC,cAQ8B,EACpCj4B,KAAKi4B,SAAL,OAAgBD,QAAAA,IAAAA,EAAAA,EAAWn2B,IAC5B,CAoDA,OAlDD,+BAuDa,WACX,OAAO,IAAIsB,GAAUnD,KAAKi4B,SAASl2B,UACpC,GAED,qBAGa,WACX,OAAO,IAAI1P,WAAW2N,KAAKi4B,SAASh2B,UACrC,2BA7Dc,WACb,OAAO,IAAI81B,EAAQl2B,KACpB,GAED,2BAYoB,SAClBI,EACA0R,GAEA,GAA6B,KAAzB1R,EAAUQ,WACZ,MAAM,IAAI1O,MAAM,uBAElB,IAAMgO,EAAYE,EAAUhG,MAAM,GAAI,IACtC,IAAK0X,IAAYA,EAAQukB,eAGvB,IAFA,IAAMp2B,EAAgBG,EAAUhG,MAAM,EAAG,IACnCk8B,EAAoBn2B,GAAaF,GAC9Bs2B,EAAK,EAAGA,EAAK,GAAIA,IACxB,GAAIr2B,EAAUq2B,KAAQD,EAAkBC,GACtC,MAAM,IAAIrkC,MAAM,iCAItB,OAAO,IAAIgkC,EAAQ,CAACh2B,UAAAA,EAAWE,UAAAA,GAChC,GAED,sBAKe,SAACgC,GACd,IAAMlC,EAAYC,GAAaiC,GACzBhC,EAAY,IAAI5P,WAAW,IAGjC,OAFA4P,EAAUvB,IAAIuD,GACdhC,EAAUvB,IAAIqB,EAAW,IAClB,IAAIg2B,EAAQ,CAACh2B,UAAAA,EAAWE,UAAAA,GAChC,OA/DI,GCwEMo2B,GAAmChlC,OAAOwiB,OAAO,CAC5DyiB,kBAAmB,CACjBtyB,MAAO,EACPzR,OAAQyS,EAAAA,GAEN,CACAA,EAAAA,GAAiB,eACjBuxB,GAAiB,cACjBvxB,EAAAA,GAAgB,eAGpBwxB,kBAAmB,CACjBxyB,MAAO,EACPzR,OAAQyS,EAAAA,GAEN,CAACA,EAAAA,GAAiB,kBAEtByxB,kBAAmB,CACjBzyB,MAAO,EACPzR,OAAQyS,EAAAA,GAEN,CACAA,EAAAA,GAAiB,eACjBuxB,KACAvxB,EAAAA,GACEnU,KACAmU,EAAAA,GAAoBA,EAAAA,MAAqB,GACzC,gBAIN0xB,sBAAuB,CACrB1yB,MAAO,EACPzR,OAAQyS,EAAAA,GAEN,CAACA,EAAAA,GAAiB,kBAEtB2xB,iBAAkB,CAChB3yB,MAAO,EACPzR,OAAQyS,EAAAA,GAEN,CAACA,EAAAA,GAAiB,oBAuIX4xB,GAAN,WAILrlC,SAAAA,KAAc,eAuKb,OAvKe,8CAMQ,SAACqjB,GACvB,MAAuCzT,GAAU0B,uBAC/C,CAAC+R,EAAOoF,UAAU1Z,YAAYqT,EAAAA,EAAAA,IAAW1Y,OAAO2Z,EAAOiiB,YAAa,IACpE74B,KAAKkE,WAFP,eAAO40B,EAAD,KAAqBC,EAArB,KAMA94B,EAAO2U,GADAyjB,GAAiCC,kBAChB,CAC5BO,WAAY57B,OAAO2Z,EAAOiiB,YAC1BE,SAAUA,IAGNlyB,EAAO,CACX,CACEE,OAAQ+xB,EACRjwB,UAAU,EACVC,YAAY,GAEd,CACE/B,OAAQ6P,EAAOoF,UACfnT,UAAU,EACVC,YAAY,GAEd,CACE/B,OAAQ6P,EAAOtO,MACfO,UAAU,EACVC,YAAY,GAEd,CACE/B,OAAQ4P,GAAczS,UACtB2E,UAAU,EACVC,YAAY,IAIhB,MAAO,CACL,IAAI0G,GAAuB,CACzBtL,UAAWlE,KAAKkE,UAChB2C,KAAMA,EACN5G,KAAMA,IAER64B,EAEH,kCAEuB,SAACliB,GACvB,IACM3W,EAAO2U,GADAyjB,GAAiCG,mBAGxC3xB,EAAO,CACX,CACEE,OAAQ6P,EAAOrN,YACfV,UAAU,EACVC,YAAY,GAEd,CACE/B,OAAQ6P,EAAOoF,UACfnT,UAAU,EACVC,YAAY,IAIhB,OAAO,IAAI0G,GAAuB,CAChCtL,UAAWlE,KAAKkE,UAChB2C,KAAMA,EACN5G,KAAMA,GAET,kCAEuB,SAAC2W,GACvB,IACM3W,EAAO2U,GADAyjB,GAAiCI,kBAChB,CAC5BhvB,UAAWmN,EAAOnN,UAAUhD,KAAIuyB,SAAAA,GAAI,OAAIA,EAAK74B,SAAlC,MAGP0G,EAAO,CACX,CACEE,OAAQ6P,EAAOrN,YACfV,UAAU,EACVC,YAAY,GAEd,CACE/B,OAAQ6P,EAAOoF,UACfnT,UAAU,EACVC,YAAY,IAmBhB,OAfI8N,EAAOtO,OACTzB,EAAKjP,KACH,CACEmP,OAAQ6P,EAAOtO,MACfO,UAAU,EACVC,YAAY,GAEd,CACE/B,OAAQ4P,GAAczS,UACtB2E,UAAU,EACVC,YAAY,IAKX,IAAI0G,GAAuB,CAChCtL,UAAWlE,KAAKkE,UAChB2C,KAAMA,EACN5G,KAAMA,GAET,sCAE2B,SAAC2W,GAC3B,IACM3W,EAAO2U,GADAyjB,GAAiCK,uBAGxC7xB,EAAO,CACX,CACEE,OAAQ6P,EAAOrN,YACfV,UAAU,EACVC,YAAY,GAEd,CACE/B,OAAQ6P,EAAOoF,UACfnT,UAAU,EACVC,YAAY,IAIhB,OAAO,IAAI0G,GAAuB,CAChCtL,UAAWlE,KAAKkE,UAChB2C,KAAMA,EACN5G,KAAMA,GAET,iCAEsB,SAAC2W,GACtB,IACM3W,EAAO2U,GADAyjB,GAAiCM,kBAGxC9xB,EAAO,CACX,CACEE,OAAQ6P,EAAOrN,YACfV,UAAU,EACVC,YAAY,GAEd,CACE/B,OAAQ6P,EAAOoF,UACfnT,UAAU,EACVC,YAAY,GAEd,CACE/B,OAAQ6P,EAAOqiB,UACfpwB,UAAU,EACVC,YAAY,IAIhB,OAAO,IAAI0G,GAAuB,CAChCtL,UAAWlE,KAAKkE,UAChB2C,KAAMA,EACN5G,KAAMA,GAET,OA3KI,GAAM24B,GAMJ10B,UAAuB,IAAIf,GAChC,+CCjQJ,IAuKa+1B,GAAqC7lC,OAAOwiB,OAItD,CACDsjB,aAAc,CACZnzB,MAAO,EACPzR,OAAQyS,EAAAA,GAEN,CACAA,EAAAA,GAAgB,eAChBA,EAAAA,GAAiB,SACjBA,EAAAA,GAAiB,oBAGrBoyB,iBAAkB,CAChBpzB,MAAO,EACPzR,OAAQyS,EAAAA,GAEN,CAACA,EAAAA,GAAgB,eAAgBA,EAAAA,GAAiB,YAEtDqyB,oBAAqB,CACnBrzB,MAAO,EACPzR,OAAQyS,EAAAA,GAEN,CAACA,EAAAA,GAAgB,eAAgBA,EAAAA,GAAiB,YAEtDsyB,oBAAqB,CACnBtzB,MAAO,EACPzR,OAAQyS,EAAAA,GAEN,CAACA,EAAAA,GAAgB,eAAgBnJ,GAAI,sBAO9B07B,GAAN,WAILhmC,SAAAA,KAAc,eA0Db,OAjDD,yCAGmB,SAACqjB,GAClB,IACM3W,EAAO2U,GADAskB,GAAmCC,aAClBviB,GAC9B,OAAO,IAAIpH,GAAuB,CAChC3I,KAAM,GACN3C,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,iCAEsB,SACrB2W,GAEA,IACM3W,EAAO2U,GADAskB,GAAmCE,iBAClBxiB,GAC9B,OAAO,IAAIpH,GAAuB,CAChC3I,KAAM,GACN3C,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,oCAEyB,SACxB2W,GAEA,IACM3W,EAAO2U,GADAskB,GAAmCG,oBAClBziB,GAC9B,OAAO,IAAIpH,GAAuB,CAChC3I,KAAM,GACN3C,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,oCAEyB,SACxB2W,GAEA,IACM3W,EAAO2U,GADAskB,GAAmCI,oBAClB,CAC5BE,cAAev8B,OAAO2Z,EAAO4iB,iBAE/B,OAAO,IAAIhqB,GAAuB,CAChC3I,KAAM,GACN3C,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,OA9DI,GAAMs5B,GASJr1B,UAAuB,IAAIf,GAChC,+CC1NJ,IAuBMs2B,GAA6BzyB,EAAAA,GAYjC,CACAA,EAAAA,GAAgB,iBAChBA,EAAAA,GAAgB,WAChBA,EAAAA,GAAiB,mBACjBA,EAAAA,GAAiB,6BACjBA,EAAAA,GAAiB,mBACjBA,EAAAA,GAAiB,6BACjBA,EAAAA,GAAiB,qBACjBA,EAAAA,GAAiB,mBACjBA,EAAAA,GAAiB,6BAGN0yB,GAAN,WAILnmC,SAAAA,KAAc,eA+Fb,OAtFD,2DAKqC,SACnCqjB,GAEA,IAAO7U,EAAmD6U,EAAnD7U,UAAWK,EAAwCwU,EAAxCxU,QAAS+C,EAA+ByR,EAA/BzR,UAAWw0B,EAAoB/iB,EAApB+iB,iBAEtC56B,GArEqB,KAsEnBgD,EAAUnP,OADN,6BArEe,GAuEoB,+BAAsBmP,EAAUnP,OAAO,WAGhFmM,GAzEoB,KA0ElBoG,EAAUvS,OADN,4BAzEc,GA2EmB,+BAAsBuS,EAAUvS,OAAO,WAG9E,IAAMgnC,EAAkBH,GAA2B3mC,KAC7C+mC,EAAkBD,EAAkB73B,EAAUnP,OAC9CknC,EAAoBD,EAAkB10B,EAAUvS,OAGhD+kB,EAAkBnV,EAAAA,GAAAA,MAAas3B,EAAoB13B,EAAQxP,QAE3DoT,EACgB,MAApB2zB,EACI,MACAA,EAqBN,OAnBAF,GAA2B9kC,OACzB,CACEolC,cAXkB,EAYlBC,QAAS,EACTH,gBAAAA,EACAI,0BAA2Bj0B,EAC3B4zB,gBAAAA,EACAM,0BAA2Bl0B,EAC3B8zB,kBAAAA,EACAK,gBAAiB/3B,EAAQxP,OACzBwnC,wBAAyBp0B,GAE3B2R,GAGFA,EAAgB7X,KAAKiC,EAAW63B,GAChCjiB,EAAgB7X,KAAKqF,EAAW00B,GAChCliB,EAAgB7X,KAAKsC,EAAS03B,GAEvB,IAAItqB,GAAuB,CAChC3I,KAAM,GACN3C,UAAWw1B,EAAex1B,UAC1BjE,KAAM0X,GAET,GAED,6CAIsC,SACpCf,GAEA,IAAOyjB,EAAyCzjB,EAAzCyjB,WAAYj4B,EAA6BwU,EAA7BxU,QAASu3B,EAAoB/iB,EAApB+iB,iBAE5B56B,GA/HsB,KAgIpBs7B,EAAWznC,OADP,8BA/HgB,GAiIqB,+BAAsBynC,EAAWznC,OAAO,WAGnF,IACE,IAAMolC,EAAUD,GAAQuC,cAAcD,GAChCt4B,EAAYi2B,EAAQj2B,UAAU5B,UAC9BgF,EAAYhD,GAAKC,EAAS41B,EAAQ/1B,WAExC,OAAOjC,KAAKu6B,+BAA+B,CACzCx4B,UAAAA,EACAK,QAAAA,EACA+C,UAAAA,EACAw0B,iBAAAA,GAIH,CAFC,MAAOrhB,GACP,MAAM,IAAIvkB,MAAJ,sCAAyCukB,GAChD,CACF,OAnGI,GAAMohB,GASJx1B,UAAuB,IAAIf,GAChC,+CC5DJq3B,GAAAA,GAAAA,eAAiC,SAACz2B,GAChC,QAAM9F,EAAIw8B,GAAAA,EAAAA,OAAYr2B,EAAAA,EAAQL,GAA9B,mBADoD22B,EAArB,iCAAqBA,EAArB,kBAG/B,OADAA,EAAKp2B,SAAQq2B,SAAAA,GAAG,OAAI18B,EAAE28B,OAAOD,EAA7B,IACO18B,EAAE48B,QACV,EAMgCL,GAAAA,GAAAA,kBAC1B,IAAMM,GAAkBN,GAAAA,GC6BzBO,GAA+B/zB,EAAAA,GAcnC,CACAA,EAAAA,GAAgB,iBAChBA,EAAAA,GAAiB,mBACjBA,EAAAA,GAAgB,6BAChBA,EAAAA,GAAiB,oBACjBA,EAAAA,GAAgB,8BAChBA,EAAAA,GAAiB,qBACjBA,EAAAA,GAAiB,mBACjBA,EAAAA,GAAgB,2BAChBA,EAAAA,GAAkB,GAAI,cACtBA,EAAAA,GAAkB,GAAI,aACtBA,EAAAA,GAAgB,gBAGLg0B,GAAN,WAILznC,SAAAA,KAAc,eAoJb,OA3ID,kDAI4B,SAC1BwO,GAEAhD,GAlFqB,KAmFnBgD,EAAUnP,OADN,6BAlFe,GAoFoB,+BAAsBmP,EAAUnP,OAAO,WAGhF,IACE,OAAO4P,EAAAA,GAAAA,KAAYnB,GAAWiB,GAASP,KAAa9F,OAzF3B,GA8F1B,CAFC,MAAOqc,GACP,MAAM,IAAIvkB,MAAJ,+CAAkDukB,GACzD,CACF,GAED,4CAIqC,SACnC1B,GAEA,IAAO7U,EACL6U,EADK7U,UAAWK,EAChBwU,EADgBxU,QAAS+C,EACzByR,EADyBzR,UAAW81B,EACpCrkB,EADoCqkB,WAAYtB,EAChD/iB,EADgD+iB,iBAElD,OAAOqB,EAAiBE,gCAAgC,CACtDC,WAAYH,EAAiBI,sBAAsBr5B,GACnDK,QAAAA,EACA+C,UAAAA,EACA81B,WAAAA,EACAtB,iBAAAA,GAEH,GAED,6CAIsC,SACpC/iB,GAEA,IAQIukB,EAPUE,EAKVzkB,EALFukB,WACA/4B,EAIEwU,EAJFxU,QACA+C,EAGEyR,EAHFzR,UACA81B,EAEErkB,EAFFqkB,WAJI,EAMFrkB,EADF+iB,iBAAAA,OAAgB,IAAG,MAcrB56B,GA7I2B,MAqIvBo8B,EAFsB,kBAAfE,EACLA,EAAWvQ,WAAW,MACXtoB,EAAAA,GAAAA,KAAY64B,EAAWC,OAAO,GAAI,OAElC94B,EAAAA,GAAAA,KAAY64B,EAAY,OAG1BA,GAIFzoC,OADP,0BA7IqB,GA+IiB,+BAAsBuoC,EAAWvoC,OAAO,WAGpF,IAEMinC,EAFY,GAEkBsB,EAAWvoC,OACzCknC,EAAoBD,EAAkB10B,EAAUvS,OAAS,EAGzD+kB,EAAkBnV,EAAAA,GAAAA,MACtBu4B,GAA6BjoC,KAAOsP,EAAQxP,QAsB9C,OAnBAmoC,GAA6BpmC,OAC3B,CACEolC,cARkB,EASlBF,gBAAAA,EACAI,0BAA2BN,EAC3B4B,iBAfc,GAgBdC,2BAA4B7B,EAC5BG,kBAAAA,EACAK,gBAAiB/3B,EAAQxP,OACzBwnC,wBAAyBT,EACzBx0B,UAAW7C,GAAS6C,GACpBg2B,WAAY74B,GAAS64B,GACrBF,WAAAA,GAEFtjB,GAGFA,EAAgB7X,KAAKwC,GAASF,GAAU24B,GAA6BjoC,MAE9D,IAAI0c,GAAuB,CAChC3I,KAAM,GACN3C,UAAW82B,EAAiB92B,UAC5BjE,KAAM0X,GAET,GAED,6CAIsC,SACpCf,GAEA,ID3LF6kB,EACAC,EC0LqBC,EAAmC/kB,EAA/CyjB,WAAkBj4B,EAA6BwU,EAA7BxU,QAASu3B,EAAoB/iB,EAApB+iB,iBAElC56B,GAhMsB,KAiMpB48B,EAAK/oC,OADD,8BAhMgB,GAkMqB,+BAAsB+oC,EAAK/oC,OAAO,WAG7E,IACE,IAAMynC,EAAa/3B,GAASq5B,GACtB55B,EAAY+4B,GAChBT,GACA,GACAp+B,MAAM,GACF2/B,EAAcp5B,EAAAA,GAAAA,KAAYnB,GAAWiB,GAASF,KACpD,GDzMJq5B,ECyM8CG,EDxM9CF,ECwM2DrB,EDvMxDG,GAAAA,GAAmBiB,EAASC,EAAS,CAACG,KAAK,EAAOC,WAAW,KCuM5D,eAAO32B,EAAD,KAAY81B,EAAZ,KAEN,OAAOj7B,KAAKu6B,+BAA+B,CACzCx4B,UAAAA,EACAK,QAAAA,EACA+C,UAAAA,EACA81B,WAAAA,EACAtB,iBAAAA,GAIH,CAFC,MAAOrhB,GACP,MAAM,IAAIvkB,MAAJ,sCAAyCukB,GAChD,CACF,OAxJI,GAAM0iB,GASJ92B,UAAuB,IAAIf,GAChC,mDC7DS44B,GAAkB,IAAI54B,GACjC,+CA+BW64B,IAAN,QAWLzoC,SAAAA,EAAY0oC,EAAuB3hB,EAAe4hB,IAAsB,oBATxED,mBASwE,OAPxE3hB,WAOwE,OALxE4hB,eAKwE,EACtEl8B,KAAKi8B,cAAgBA,EACrBj8B,KAAKsa,MAAQA,EACbta,KAAKk8B,UAAYA,CAClB,IAfUF,GAoBJj3B,QAAkB,IAAIi3B,GAAO,EAAG,EAAG74B,GAAU4B,SAkItD,IAmSao3B,GAA4B9oC,OAAOwiB,OAI7C,CACDumB,WAAY,CACVp2B,MAAO,EACPzR,OAAQyS,EAAAA,GAA6D,CACnEA,EAAAA,GAAiB,e/B1ZG,WAAqC,IAApCjU,EAAmB,UAAH,6CAAG,aAC5C,OAAOiU,EAAAA,GAKL,CAACjF,GAAU,UAAWA,GAAU,eAAgBhP,EACnD,C+BoZKF,G/B/YgB,WAAiC,IAAhCE,EAAmB,UAAH,6CAAG,SACxC,OAAOiU,EAAAA,GAOL,CACEA,EAAAA,GAAkB,iBAClBA,EAAAA,GAAkB,SAClBjF,GAAU,cAEZhP,EAEH,C+BiYKF,MAGJwpC,UAAW,CACTr2B,MAAO,EACPzR,OAAQyS,EAAAA,GAA4D,CAClEA,EAAAA,GAAiB,eACjBnU,GAAiB,iBACjBmU,EAAAA,GAAiB,6BAGrBs1B,SAAU,CACRt2B,MAAO,EACPzR,OAAQyS,EAAAA,GAA2D,CACjEA,EAAAA,GAAiB,kBAGrBu1B,MAAO,CACLv2B,MAAO,EACPzR,OAAQyS,EAAAA,GAAwD,CAC9DA,EAAAA,GAAiB,eACjBA,EAAAA,GAAkB,eAGtBw1B,SAAU,CACRx2B,MAAO,EACPzR,OAAQyS,EAAAA,GAA2D,CACjEA,EAAAA,GAAiB,eACjBA,EAAAA,GAAkB,eAGtBy1B,WAAY,CACVz2B,MAAO,EACPzR,OAAQyS,EAAAA,GAA6D,CACnEA,EAAAA,GAAiB,kBAGrB01B,MAAO,CACL12B,MAAO,EACPzR,OAAQyS,EAAAA,GAAwD,CAC9DA,EAAAA,GAAiB,kBAGrB21B,kBAAmB,CACjB32B,MAAO,EACPzR,OAAQyS,EAAAA,GACN,CACEA,EAAAA,GAAiB,eACjBnU,GAAiB,iBACjBmU,EAAAA,GAAiB,0BACjBnU,GAAkB,iBAClBA,GAAiB,uBA6BZ+pC,IAZ2BvpC,OAAOwiB,OAAO,CACpDgnB,OAAQ,CACN72B,MAAO,GAET82B,WAAY,CACV92B,MAAO,KAOJ,WAILzS,SAAAA,KAAc,eA2Ub,OAzTD,uCAGiB,SAACqjB,GAChB,IAAOmmB,EAAgDnmB,EAAhDmmB,YAAarlB,EAAmCd,EAAnCc,WACdslB,EADiDpmB,EAAvBomB,QACMhB,GAAOj3B,QAEvC9E,EAAO2U,GADAunB,GAA0BC,WACT,CAC5B1kB,WAAY,CACVulB,OAAQ36B,GAASoV,EAAWulB,OAAO36B,YACnC46B,WAAY56B,GAASoV,EAAWwlB,WAAW56B,aAE7C06B,OAAQ,CACNf,cAAee,EAAOf,cACtB3hB,MAAO0iB,EAAO1iB,MACd4hB,UAAW55B,GAAS06B,EAAOd,UAAU55B,eAGnCqV,EAAkB,CACtB9Q,KAAM,CACJ,CAACE,OAAQg2B,EAAal0B,UAAU,EAAOC,YAAY,GACnD,CAAC/B,OAAQyM,GAAoB3K,UAAU,EAAOC,YAAY,IAE5D5E,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEF,OAAO,IAAIuP,GAAuBmI,EACnC,GAED,mCAI4B,SAC1Bf,GAEA,IAAMpK,EAAc,IAAIiD,GACxBjD,EAAY6D,IACVsG,GAAcU,sBAAsB,CAClCN,WAAYH,EAAOG,WACnBC,iBAAkBJ,EAAOmmB,YACzB9lB,WAAYL,EAAOK,WACnBhT,KAAM2S,EAAO3S,KACb4S,SAAUD,EAAOC,SACjBC,MAAO9W,KAAK8W,MACZ5S,UAAWlE,KAAKkE,aAIpB,IAAO64B,EAAmCnmB,EAAnCmmB,YAAarlB,EAAsBd,EAAtBc,WAAYslB,EAAUpmB,EAAVomB,OAChC,OAAOxwB,EAAY6D,IAAIrQ,KAAKm9B,WAAW,CAACJ,YAAAA,EAAarlB,WAAAA,EAAYslB,OAAAA,IAClE,GAED,2BAGoB,SAACpmB,GACnB,IAAMpK,EAAc,IAAIiD,GACxBjD,EAAY6D,IACVsG,GAAcY,cAAc,CAC1BR,WAAYH,EAAOG,WACnBC,iBAAkBJ,EAAOmmB,YACzBlmB,SAAUD,EAAOC,SACjBC,MAAO9W,KAAK8W,MACZ5S,UAAWlE,KAAKkE,aAIpB,IAAO64B,EAAmCnmB,EAAnCmmB,YAAarlB,EAAsBd,EAAtBc,WAAYslB,EAAUpmB,EAAVomB,OAChC,OAAOxwB,EAAY6D,IAAIrQ,KAAKm9B,WAAW,CAACJ,YAAAA,EAAarlB,WAAAA,EAAYslB,OAAAA,IAClE,GAED,sBAKe,SAACpmB,GACd,IAAOmmB,EAA6CnmB,EAA7CmmB,YAAa5nB,EAAgCyB,EAAhCzB,iBAAkBqO,EAAc5M,EAAd4M,WAGhCvjB,EAAO2U,GADAunB,GAA0BG,UAGvC,OAAO,IAAI7sB,IAAcY,IAAI,CAC3BxJ,KAAM,CACJ,CAACE,OAAQg2B,EAAal0B,UAAU,EAAOC,YAAY,GACnD,CAAC/B,OAAQyc,EAAY3a,UAAU,EAAOC,YAAY,GAClD,CAAC/B,OAAQuM,GAAqBzK,UAAU,EAAOC,YAAY,GAC3D,CACE/B,OAAQ0M,GACR5K,UAAU,EACVC,YAAY,GAEd,CAAC/B,OAAQg1B,GAAiBlzB,UAAU,EAAOC,YAAY,GACvD,CAAC/B,OAAQoO,EAAkBtM,UAAU,EAAMC,YAAY,IAEzD5E,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,GAED,uBAIgB,SAAC2W,GACf,IACEmmB,EAKEnmB,EALFmmB,YACA5nB,EAIEyB,EAJFzB,iBACAyC,EAGEhB,EAHFgB,oBACAwlB,EAEExmB,EAFFwmB,uBACAC,EACEzmB,EADFymB,gBAIIp9B,EAAO2U,GADAunB,GAA0BE,UACT,CAC5BiB,cAAeh7B,GAASsV,EAAoBtV,YAC5C86B,uBAAwBA,EAAuBp3B,QAG3Ca,EAAO,CACX,CAACE,OAAQg2B,EAAal0B,UAAU,EAAOC,YAAY,GACnD,CAAC/B,OAAQuM,GAAqBzK,UAAU,EAAOC,YAAY,GAC3D,CAAC/B,OAAQoO,EAAkBtM,UAAU,EAAMC,YAAY,IAKzD,OAHIu0B,GACFx2B,EAAKjP,KAAK,CAACmP,OAAQs2B,EAAiBx0B,UAAU,EAAOC,YAAY,KAE5D,IAAI2G,IAAcY,IAAI,CAC3BxJ,KAAAA,EACA3C,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,GAED,+BAIwB,SAAC2W,GACvB,IACEmmB,EAOEnmB,EAPFmmB,YACAQ,EAME3mB,EANF2mB,cACAC,EAKE5mB,EALF4mB,cACAC,EAIE7mB,EAJF6mB,eACA7lB,EAGEhB,EAHFgB,oBACAwlB,EAEExmB,EAFFwmB,uBACAC,EACEzmB,EADFymB,gBAIIp9B,EAAO2U,GADAunB,GAA0BQ,kBACT,CAC5BW,cAAeh7B,GAASsV,EAAoBtV,YAC5C86B,uBAAwBA,EAAuBp3B,MAC/Cw3B,cAAeA,EACfC,eAAgBn7B,GAASm7B,EAAen7B,cAGpCuE,EAAO,CACX,CAACE,OAAQg2B,EAAal0B,UAAU,EAAOC,YAAY,GACnD,CAAC/B,OAAQw2B,EAAe10B,UAAU,EAAMC,YAAY,GACpD,CAAC/B,OAAQuM,GAAqBzK,UAAU,EAAOC,YAAY,IAK7D,OAHIu0B,GACFx2B,EAAKjP,KAAK,CAACmP,OAAQs2B,EAAiBx0B,UAAU,EAAOC,YAAY,KAE5D,IAAI2G,IAAcY,IAAI,CAC3BxJ,KAAAA,EACA3C,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,GAED,8BAGuB,SAAC2W,GACtB,IAAOmmB,EAA6DnmB,EAA7DmmB,YAAa5nB,EAAgDyB,EAAhDzB,iBAAkBuoB,EAA8B9mB,EAA9B8mB,iBAAkB7mB,EAAYD,EAAZC,SAElD5W,EAAO2U,GADAunB,GAA0BI,MACT,CAAC1lB,SAAAA,IAC/B,OAAO,IAAIrH,GAAuB,CAChC3I,KAAM,CACJ,CAACE,OAAQg2B,EAAal0B,UAAU,EAAOC,YAAY,GACnD,CAAC/B,OAAQ22B,EAAkB70B,UAAU,EAAOC,YAAY,GACxD,CAAC/B,OAAQoO,EAAkBtM,UAAU,EAAMC,YAAY,IAEzD5E,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,GAED,mBAGY,SAAC2W,GACX,IAAMpK,EAAc,IAAIiD,GAUxB,OATAjD,EAAY6D,IACVsG,GAAcY,cAAc,CAC1BR,WAAYH,EAAOzB,iBACnB6B,iBAAkBJ,EAAO8mB,iBACzB7mB,SAAU,EACVC,MAAO9W,KAAK8W,MACZ5S,UAAWlE,KAAKkE,aAGbsI,EAAY6D,IAAIrQ,KAAK29B,iBAAiB/mB,GAC9C,GAED,2BAIoB,SAACA,GACnB,IACEmmB,EAMEnmB,EANFmmB,YACA5nB,EAKEyB,EALFzB,iBACAuoB,EAIE9mB,EAJF8mB,iBACAzmB,EAGEL,EAHFK,WACAhT,EAEE2S,EAFF3S,KACA4S,EACED,EADFC,SAEIrK,EAAc,IAAIiD,GAUxB,OATAjD,EAAY6D,IACVsG,GAAc4B,SAAS,CACrBnB,cAAesmB,EACfzmB,WAAAA,EACAhT,KAAAA,EACA6S,MAAO9W,KAAK8W,MACZ5S,UAAWlE,KAAKkE,aAGbsI,EAAY6D,IACjBrQ,KAAK29B,iBAAiB,CACpBZ,YAAAA,EACA5nB,iBAAAA,EACAuoB,iBAAAA,EACA7mB,SAAAA,IAGL,GAED,mBAGY,SAACD,GACX,IAAOmmB,EAAoDnmB,EAApDmmB,YAAaa,EAAuChnB,EAAvCgnB,kBAAmBzoB,EAAoByB,EAApBzB,iBAEjClV,EAAO2U,GADAunB,GAA0BO,OAGvC,OAAO,IAAIjtB,IAAcY,IAAI,CAC3BxJ,KAAM,CACJ,CAACE,OAAQg2B,EAAal0B,UAAU,EAAOC,YAAY,GACnD,CAAC/B,OAAQ62B,EAAmB/0B,UAAU,EAAOC,YAAY,GACzD,CAAC/B,OAAQuM,GAAqBzK,UAAU,EAAOC,YAAY,GAC3D,CACE/B,OAAQ0M,GACR5K,UAAU,EACVC,YAAY,GAEd,CAAC/B,OAAQoO,EAAkBtM,UAAU,EAAMC,YAAY,IAEzD5E,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,GAED,sBAGe,SAAC2W,GACd,IAAOmmB,EACLnmB,EADKmmB,YAAa5nB,EAClByB,EADkBzB,iBAAkB+B,EACpCN,EADoCM,SAAUL,EAC9CD,EAD8CC,SAAUwmB,EACxDzmB,EADwDymB,gBAGpDp9B,EAAO2U,GADAunB,GAA0BK,SACT,CAAC3lB,SAAAA,IAEzBhQ,EAAO,CACX,CAACE,OAAQg2B,EAAal0B,UAAU,EAAOC,YAAY,GACnD,CAAC/B,OAAQmQ,EAAUrO,UAAU,EAAOC,YAAY,GAChD,CAAC/B,OAAQuM,GAAqBzK,UAAU,EAAOC,YAAY,GAC3D,CACE/B,OAAQ0M,GACR5K,UAAU,EACVC,YAAY,GAEd,CAAC/B,OAAQoO,EAAkBtM,UAAU,EAAMC,YAAY,IAKzD,OAHIu0B,GACFx2B,EAAKjP,KAAK,CAACmP,OAAQs2B,EAAiBx0B,UAAU,EAAOC,YAAY,KAE5D,IAAI2G,IAAcY,IAAI,CAC3BxJ,KAAAA,EACA3C,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,GAED,wBAGiB,SAAC2W,GAChB,IAAOmmB,EAAiCnmB,EAAjCmmB,YAAa5nB,EAAoByB,EAApBzB,iBAEdlV,EAAO2U,GADAunB,GAA0BM,YAGvC,OAAO,IAAIhtB,IAAcY,IAAI,CAC3BxJ,KAAM,CACJ,CAACE,OAAQg2B,EAAal0B,UAAU,EAAOC,YAAY,GACnD,CAAC/B,OAAQuM,GAAqBzK,UAAU,EAAOC,YAAY,GAC3D,CAAC/B,OAAQoO,EAAkBtM,UAAU,EAAMC,YAAY,IAEzD5E,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,OA/UI,IAAM28B,GASJ14B,UAAuB,IAAIf,GAChC,+CAVSy5B,GAoBJ9lB,MAAgB,IC/kBzB,IAmRM+mB,GAA2BxqC,OAAOwiB,OAIrC,CACDioB,kBAAmB,CACjB93B,MAAO,EACPzR,OAAQyS,EAAAA,GAAmE,CACzEA,EAAAA,GAAiB,ehC5KC,WAAmC,IAAlCjU,EAAmB,UAAH,6CAAG,WAC1C,OAAOiU,EAAAA,GAQL,CACEjF,GAAU,cACVA,GAAU,mBACVA,GAAU,wBACViF,EAAAA,GAAgB,eAElBjU,EAEH,CgC4JKF,MAGJwpC,UAAW,CACTr2B,MAAO,EACPzR,OAAQyS,EAAAA,GAA2D,CACjEA,EAAAA,GAAiB,eACjBnU,GAAiB,iBACjBmU,EAAAA,GAAiB,4BAGrBw1B,SAAU,CACRx2B,MAAO,EACPzR,OAAQyS,EAAAA,GAA0D,CAChEA,EAAAA,GAAiB,eACjBA,EAAAA,GAAkB,eAGtB21B,kBAAmB,CACjB32B,MAAO,GACPzR,OAAQyS,EAAAA,GAAmE,CACzEA,EAAAA,GAAiB,ehC5KkB,WAEpC,IADHjU,EAAmB,UAAH,6CAAG,4BAEnB,OAAOiU,EAAAA,GACL,CACEA,EAAAA,GAAiB,yBACjBjF,GAAU,yCACVkF,GAAW,kCACXlF,GAAU,kBAEZhP,EAEH,CgCiKKF,QA4BOkrC,IAZ0B1qC,OAAOwiB,OAAO,CACnDmoB,MAAO,CACLh4B,MAAO,GAET82B,WAAY,CACV92B,MAAO,KAOJ,WAILzS,SAAAA,KAAc,eA0Lb,OAxKD,8CAGwB,SACtBqjB,GAEA,IAAO4M,EAAoC5M,EAApC4M,WAAYC,EAAwB7M,EAAxB6M,WAAYwa,EAAYrnB,EAAZqnB,SAEzBh+B,EAAO2U,GADAipB,GAAyBC,kBACR,CAC5BG,SAAU,CACRxa,WAAYnhB,GAAS27B,EAASxa,WAAWnhB,YACzC47B,gBAAiB57B,GAAS27B,EAASC,gBAAgB57B,YACnD67B,qBAAsB77B,GACpB27B,EAASE,qBAAqB77B,YAEhCuhB,WAAYoa,EAASpa,cAGnBlM,EAAkB,CACtB9Q,KAAM,CACJ,CAACE,OAAQyc,EAAY3a,UAAU,EAAOC,YAAY,GAClD,CAAC/B,OAAQyM,GAAoB3K,UAAU,EAAOC,YAAY,GAC1D,CAAC/B,OAAQuM,GAAqBzK,UAAU,EAAOC,YAAY,GAC3D,CAAC/B,OAAQ0c,EAAY5a,UAAU,EAAMC,YAAY,IAEnD5E,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEF,OAAO,IAAIuP,GAAuBmI,EACnC,GAED,2BAGoB,SAACf,GACnB,IAAMpK,EAAc,IAAIiD,GAWxB,OAVAjD,EAAY6D,IACVsG,GAAcY,cAAc,CAC1BR,WAAYH,EAAOG,WACnBC,iBAAkBJ,EAAO4M,WACzB3M,SAAUD,EAAOC,SACjBC,MAAO9W,KAAK8W,MACZ5S,UAAWlE,KAAKkE,aAIbsI,EAAY6D,IACjBrQ,KAAKo+B,kBAAkB,CACrB5a,WAAY5M,EAAO4M,WACnBC,WAAY7M,EAAOqnB,SAASxa,WAC5Bwa,SAAUrnB,EAAOqnB,WAGtB,GAED,uBAGgB,SAACrnB,GACf,IACE4M,EAIE5M,EAJF4M,WACArO,EAGEyB,EAHFzB,iBACAyC,EAEEhB,EAFFgB,oBACAymB,EACEznB,EADFynB,sBAIIp+B,EAAO2U,GADAipB,GAAyBxB,UACR,CAC5BiB,cAAeh7B,GAASsV,EAAoBtV,YAC5C+7B,sBAAuBA,EAAsBr4B,QAGzCa,EAAO,CACX,CAACE,OAAQyc,EAAY3a,UAAU,EAAOC,YAAY,GAClD,CAAC/B,OAAQuM,GAAqBzK,UAAU,EAAOC,YAAY,GAC3D,CAAC/B,OAAQoO,EAAkBtM,UAAU,EAAMC,YAAY,IAGzD,OAAO,IAAI2G,IAAcY,IAAI,CAC3BxJ,KAAAA,EACA3C,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,GAED,+BAIwB,SAAC2W,GACvB,IACE0nB,EAME1nB,EANF0nB,qCACAC,EAKE3nB,EALF2nB,sCACAC,EAIE5nB,EAJF4nB,+BACA5mB,EAGEhB,EAHFgB,oBACAymB,EAEEznB,EAFFynB,sBACA7a,EACE5M,EADF4M,WAIIvjB,EAAO2U,GADAipB,GAAyBlB,kBACR,CAC5B8B,0BAA2B,CACzBF,sCAAuCj8B,GACrCi8B,EAAsCj8B,YAExCk8B,+BAAgCA,EAChClB,cAAeh7B,GAASsV,EAAoBtV,YAC5C+7B,sBAAuBA,EAAsBr4B,SAI3Ca,EAAO,CACX,CAACE,OAAQyc,EAAY3a,UAAU,EAAOC,YAAY,GAClD,CAAC/B,OAAQuM,GAAqBzK,UAAU,EAAOC,YAAY,GAC3D,CACE/B,OAAQu3B,EACRz1B,UAAU,EACVC,YAAY,IAIhB,OAAO,IAAI2G,IAAcY,IAAI,CAC3BxJ,KAAAA,EACA3C,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,GAED,sBAGe,SAAC2W,GACd,IAAO4M,EAA8D5M,EAA9D4M,WAAYkb,EAAkD9nB,EAAlD8nB,2BAA4B7nB,EAAsBD,EAAtBC,SAAUK,EAAYN,EAAZM,SAEnDjX,EAAO2U,GADAipB,GAAyBrB,SACR,CAAC3lB,SAAAA,IAEzBhQ,EAAO,CACX,CAACE,OAAQyc,EAAY3a,UAAU,EAAOC,YAAY,GAClD,CAAC/B,OAAQmQ,EAAUrO,UAAU,EAAOC,YAAY,GAChD,CAAC/B,OAAQ23B,EAA4B71B,UAAU,EAAMC,YAAY,IAGnE,OAAO,IAAI2G,IAAcY,IAAI,CAC3BxJ,KAAAA,EACA3C,UAAWlE,KAAKkE,UAChBjE,KAAAA,GAEH,GAED,0BAQmB,SACjB2W,EACA+nB,EACAC,GAEA,GAAIhoB,EAAOC,SAAW8nB,EAA4BC,EAChD,MAAM,IAAI7qC,MACR,4DAGJ,OAAOgqC,EAAYc,SAASjoB,EAC7B,OA9LI,IAAMmnB,GASJ75B,UAAuB,IAAIf,GAChC,+CAVS46B,GAoBJjnB,MAAgB,KCrWS,IAAI3T,GACpC,gDAyBiB4Z,EAAAA,EAAAA,IAAK,CACtBnpB,MAAMyoB,EAAAA,EAAAA,MACNyiB,SAAS3hB,EAAAA,EAAAA,KAASd,EAAAA,EAAAA,OAClB0iB,SAAS5hB,EAAAA,EAAAA,KAASd,EAAAA,EAAAA,OAClB2iB,iBAAiB7hB,EAAAA,EAAAA,KAASd,EAAAA,EAAAA,SCnCG,IAAIlZ,GACjC,+CAoEwB6D,EAAAA,GAAqC,CAC7DnU,GAAiB,cACjBA,GAAiB,wBACjBmU,EAAAA,GAAgB,cAChBA,EAAAA,KACAA,EAAAA,GACEA,EAAAA,GAAoB,CAClBA,EAAAA,GAAkB,QAClBA,EAAAA,GAAiB,uBAEnBA,EAAAA,GAAoBA,EAAAA,MAAqB,GACzC,SAEFA,EAAAA,GAAgB,iBAChBA,EAAAA,GAAkB,YAClBA,EAAAA,KACAA,EAAAA,GACEA,EAAAA,GAAoB,CAClBA,EAAAA,GAAkB,SAClBnU,GAAiB,qBAEnBmU,EAAAA,GAAoBA,EAAAA,MAAqB,GACzC,oBAEFA,EAAAA,GACE,CACEA,EAAAA,GACEA,EAAAA,GAAoB,CAClBnU,GAAiB,oBACjBmU,EAAAA,GAAkB,+BAClBA,EAAAA,GAAkB,iBAEpB,GACA,OAEFA,EAAAA,GAAkB,OAClBA,EAAAA,GAAgB,YAElB,eAEFA,EAAAA,KACAA,EAAAA,GACEA,EAAAA,GAAoB,CAClBA,EAAAA,GAAkB,SAClBA,EAAAA,GAAkB,WAClBA,EAAAA,GAAkB,iBAEpBA,EAAAA,GAAoBA,EAAAA,MAAqB,GACzC,gBAEFA,EAAAA,GACE,CAACA,EAAAA,GAAkB,QAASA,EAAAA,GAAkB,cAC9C,mBCzGG,0CCnBD,SAAUi4B,GAAwBC,GACtC,OAAO,SAACC,EAA2B5S,EAA2B6S,EAA8BC,GAC1F,MAAmB,mBAAfF,EAAIlT,QACNM,EAAIzP,OAASoiB,EACNG,KAEFD,IAEX,CAEM,SAAUE,GAA+BC,GAC7C,OAAO,SACLJ,EACA5S,EACA6S,EACAC,GAEA,MAAmB,2BAAfF,EAAIlT,QACNM,EAAIzP,OAASyiB,EACNF,KAEFD,IAEX,CAEM,SAAUI,GAAuBD,GACrC,IAAQL,EAAYK,EAAZL,QAER,OAAOO,EAAAA,EAAAA,IAAgB,CAACR,GAAwBC,GAAUI,GAA+BC,IAC3F,CAEM,SAAUG,GAAoBH,GAIlC,IAAQI,EAAcJ,EAAdI,UACFpX,GAAkBqX,EAAAA,EAAAA,IAAsB,CAAED,UAAAA,IAEhD,MAAO,CAAEE,mBADiBJ,EAAAA,EAAAA,IAAgB,CAACD,GAAuBD,GAAiBhX,IACvDA,gBAAAA,EAC9B,CC7BgB,SAAAuX,GAA8FC,GAAA,IAAhEC,EAAW,EAAXA,YAC5C,OAAOC,EAAAA,EAAAA,IAAqB,mCAAC,SAAOlU,EAAAA,EAASjO,EAAUshB,GAAI,uEAC3C,GACC,gBADIrT,EAAXE,OACoB,CAAAiU,EAAAA,KAAAA,EAAA,+BAASd,KAAM,UAEtCY,EAAa,CAAFE,EAAAA,KAAAA,EAAA,YAAQ,IAAInsC,MAAM,oDAAmD,cAAAmsC,EAAAA,KAAAA,EAE9DF,EAAYjU,GAAQ,OAChB,OADrB5gB,EAAW,EAAH,KACd2S,EAAShB,OAAS3R,EAAS,uBACpB7S,GAAS,4CACjB,uDAT2B,GAU9B,CAEgB,SAAA6nC,GAIfC,GAAA,IAHCC,EAAe,EAAfA,gBAIA,OAAOJ,EAAAA,EAAAA,IAAqB,mCAAC,SAAOlU,EAAAA,EAASjO,EAAUshB,GAAI,uEAC3C,GACC,oBADIrT,EAAXE,OACwB,CAAAqU,EAAAA,KAAAA,EAAA,+BAASlB,KAAM,UAE1CiB,EAAiB,CAAFC,EAAAA,KAAAA,EAAA,YAAQ,IAAIvsC,MAAM,wDAAuD,cAAAusC,EAAAA,KAAAA,EAEtED,EAAgBtU,GAAQ,OACpB,OADrB5gB,EAAW,EAAH,KACd2S,EAAShB,OAAS3R,EAAS,uBACpB7S,GAAS,4CACjB,uDAT2B,GAU9B,CAEgB,SAAAioC,GACdC,EACAC,GAEA,OAAOR,EAAAA,EAAAA,IAAqB,mCAAa,SAAOlU,EAAAA,EAASjO,EAAUshB,GAAI,uEACvD,GAAKrT,EAAXE,SACOuU,EAAY,CAAAE,EAAAA,KAAAA,EAAA,+BAAStB,KAAM,UAErCqB,EAAS,CAAFC,EAAAA,KAAAA,EAAA,YAAQ,IAAI3sC,MAA4BysC,sBAAAA,OAAAA,EAA4B,gCAAAE,EAAAA,KAAAA,EAE3DD,EAAQ1U,GAAQ,OAEZ,OAFnBjP,EAAS,EAAH,KAEZgB,EAAShB,OAASA,EAAO,uBAClBxkB,GAAS,4CACjB,uDAV2B,GAW9B,CAEM,SAAUqoC,GAAuBC,GACrC,IAAQZ,EACNY,EADMZ,YAAaK,EACnBO,EADmBP,gBAAiBQ,EACpCD,EADoCC,gBAAiBC,EACrDF,EADqDE,uBAAwBC,EAC7EH,EAD6EG,oBAAqBC,EAClGJ,EADkGI,YAAaC,EAC/GL,EAD+GK,cAAeC,EAC9HN,EAD8HM,aAGhI,OAAOzB,EAAAA,EAAAA,IAAgB,CACrBU,GAAgC,CAAEE,gBAAAA,IAClCP,GAA4B,CAAEE,YAAAA,IAC9BO,GAAmE,kBAAmBM,GACtFN,GAA6E,yBAA0BO,GACvGP,GAAuE,sBAAuBQ,GAC9FR,GAAiE,cAAeS,GAChFT,GAA0C,mBAAoBU,GAC9DV,GAA0C,kBAAmBW,IAEjE,qgCCnEA,IAAsBC,GAAwB,aAAAC,EAAAA,EAAAA,GAAAA,EAAAA,GAAA,YAC5C,SAAwFD,EAAAA,GAAA,IAA1EtuB,EAAM,EAANA,OAAQ7T,EAAK,EAALA,MAAK,OAAAqiC,EAAAA,EAAAA,GAAAA,KAAAA,GACnBC,EAAAA,KAAAA,KAAAA,CAAEzuB,OAAQ,CAAE0uB,YAAa,GAAF,MAAO1uB,EAAO0uB,aAAW,IAAEC,eAAgBC,EAAAA,iBAAAA,UAA6BziC,MAAAA,GACvG,CAoCC,OApCA0iC,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAA39B,IAAAA,cAAA9I,MAAAA,WAAA,wBAEM,WAAkB2Q,GAAsB,wEACtC6I,EAAAA,OAAAA,SAAAA,QAAQC,WAAS,2CACzB,mDAJAzZ,IAIA,CAAA8I,IAAAA,gBAAA9I,MAAAA,WAAA,wBAEM,WAAoB0mC,GAAmB,iFAgBH,OAfnCC,EAAS,IAAIC,EAAAA,GAEbjB,EAAmB5gC,KAAK8hC,oBAAoBH,GAC5CI,EAAmBpB,GAAuBC,GAChDgB,EAAOhqC,KAAKmqC,GAENC,EAAmBxC,GAAuBx/B,KAAK6S,OAAO0uB,aAC5DK,EAAOhqC,KAAKoqC,IAENC,EAAwBjiC,KAAKkiC,yBAAyBP,KAE1DC,EAAOhqC,KAAKqqC,GAGRE,GAAWC,EAAAA,EAAAA,IAAmBR,GACpC5hC,KAAKqiC,0BAA0BF,GAAU7B,EAAAA,KAAAA,GACnCtgC,KAAKsiC,gBAAe,iDAC3B,mDApBArnC,IAoBA,CAAA8I,IAAAA,gBAAA9I,MAAAA,WAAA,IAESsnC,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,uEAIL,OAHKhB,EAAgBvhC,KAAK6S,OAArB0uB,YACRvhC,KAAK46B,OAAO,CACVsE,QAASqC,EAAYrC,UACpB,kBACIqC,EAAYrC,SAAW,IAAE,gDACjC,kDARAjkC,IAQA,CAAA8I,IAAAA,2BAAA9I,MAES,SAAyB2Q,GAEnC,KAAC,EAvC2C,CAAQ42B,EAAAA,ICAzCC,GAA0B,SAACd,GACtC,IAAMf,EAAsC,CAC1CP,gBAAiB,WAAF,IAAEqC,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,0FACRf,EAAiB5/B,UAAY,CAACwB,IAAAA,OAAYo+B,EAAiB5/B,UAAU5B,YAAc,IAAE,2CAC7F,kDAFgB,GAGjB6/B,YAAa,WAAF,IAAE2C,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,0FAAahB,EAAiB5/B,UAAY,CAACwB,IAAAA,OAAYo+B,EAAiB5/B,UAAU5B,YAAc,IAAE,2CAAC,kDAAnG,GACb8gC,cAAe,WAAF,IAAE2B,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,uEACPC,EAAAA,UAAAA,IAAAA,qBAAkC,2CACzC,kDAFc,GAGf3B,aAAc,WAAF,IAAE4B,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,uEACND,EAAAA,UAAAA,IAAAA,qBAAkC,2CACzC,kDAFa,GAGdhC,gBAAiB,WAAF,wBAAE,WAAO1B,GAA0C,8EAAA4D,EAAAA,KAAAA,EACtCpB,EAAiBd,gBAAgB1B,EAAIvoB,OAAOxU,SAAQ,OAA7D,OAAXoK,EAAc,EAAH,uBACVA,GAAW,2CACnB,mDAHgB,GAIjBw0B,YAAa,WAAF,wBAAE,WAAO7B,GAAmE,8EAAA6D,EAAAA,KAAAA,EAC/DrB,EAAiBX,YAAY7B,EAAIvoB,OAAOxU,QAAS+8B,EAAIvoB,OAAOqsB,SAAQ,OAA7E,OAAPC,EAAU,EAAH,KACNA,EAAAA,OAAAA,SAAAA,EAAQ/9B,WAAS,2CACzB,mDAHY,GAIb47B,oBAAqB,WAAF,wBAAE,WAAO5B,GAA4C,8EACvD,QAAX,EAACA,EAAIvoB,cAAM,OAAVusB,EAAY/gC,SAAsB,QAAV+8B,EAAAA,EAAIvoB,cAAM,OAAVwsB,EAAYhhC,QAAQxP,OAAM,CAAAywC,EAAAA,KAAAA,EAAA,YAC/CR,EAAAA,UAAAA,IAAAA,cAA4B,WAAU,cAAAQ,EAAAA,KAAAA,EAEpB1B,EAAiBZ,oBAAoB5B,EAAIvoB,OAAOxU,SAAQ,OAAjE,OAAXoK,EAAc,EAAH,uBACVA,GAAW,2CACnB,mDANoB,GAOrBs0B,uBAAwB,WAAF,wBAAE,WAAO3B,GAA0C,8EAAAmE,EAAAA,KAAAA,EACnD3B,EAAiBb,uBAAuB3B,EAAIvoB,OAAOxU,SAAQ,OAApE,OAALmhC,EAAQ,EAAH,KACJD,EAAAA,OAAAA,SAAAA,CAAEn+B,UAAWo+B,EAAMp+B,YAAW,2CACtC,mDAHuB,IAK1B,OAAOy7B,CACT,2kBCrCM,SAAU4C,GAAsCrB,GACpD,OAAOlC,EAAAA,EAAAA,IAAqB,mCAAC,SAAOd,EAAAA,EAA6B5S,EAA4BkX,GAA6B,8EAAAvD,EAAAA,KAAAA,EACnGiC,EAASpW,QAAQ,GAAD,GAChCoT,IACH,OAFIriB,EAAS,EAAH,KAGZyP,EAAIzP,OAASA,EAAO,2CACrB,uDAL2B,GAM9B,4bCHA,IAAa4mB,GAAwB,aAAAtC,EAAAA,EAAAA,GAAAA,EAAAA,GAAA,gCAAAC,EAAAA,EAAAA,GAAAA,KAAAA,GAAA,wBAOlC,OAPkCK,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAA39B,IAAAA,sBAAA9I,MACzB,SAAoB0mC,GAC5B,OAAOc,GAAwBd,EACjC,GAAC,CAAA59B,IAAAA,2BAAA9I,MAES,SAAyB0mC,GACjC,OAAO6B,GAAsC7B,EAC/C,KAAC,EAPkC,CAAQR,+bCH7C,IAAawC,GAA2B,aAAAvC,EAAAA,EAAAA,GAAAA,EAAAA,GAAA,gCAAAC,EAAAA,EAAAA,GAAAA,KAAAA,GAAA,wBAGrC,OAHqCK,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAA39B,IAAAA,sBAAA9I,MAC5B,SAAoB0mC,GAC5B,OCE4B,SAACA,EAAkCiC,GACjE,IAAMhD,EAAsC,CAC1CP,gBAAiB,WAAF,IAAEqC,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,gFAAAxC,EAAAA,KAAAA,EACQyB,EAAiBxL,UAAS,OAArC,OAAqC0N,EAAAA,EAAAA,KAAzC5jC,EAAI,EAAJA,KAAI,kBACL,CAACA,EAAK8B,YAAU,2CACxB,kDAHgB,GAIjBi+B,YAAa,WAAF,IAAE2C,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,gFAAArC,EAAAA,KAAAA,EACYqB,EAAiBxL,UAAS,OAArC,OAAqC2N,EAAAA,EAAAA,KAAzC7jC,EAAI,EAAJA,KAAI,kBACL,CAACA,EAAK8B,YAAU,2CACxB,kDAHY,GAIbk/B,cAAe,WAAF,IAAE2B,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,uEACPC,EAAAA,UAAAA,IAAAA,qBAAkC,2CACzC,kDAFc,GAGf3B,aAAc,WAAF,IAAE4B,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,uEACND,EAAAA,UAAAA,IAAAA,qBAAkC,2CACzC,kDAFa,GAGdhC,gBAAiB,WAAF,wBAAE,WAAO1B,GAA0C,+EAC5B,GAA9B4E,EAAY5E,EAAIvoB,OAAOxU,QACb,CAAF2gC,EAAAA,KAAAA,EAAA,YAAQF,EAAAA,UAAAA,IAAAA,eAA6B,CAAEzgC,QAAS,gCAAgC,cAAA2gC,EAAAA,KAAAA,EACvEpB,EAAiBd,gBAAgBt9B,IAAAA,OAAYwgC,EAAUlyB,qBAAoB,OAAtF,GAAsFmyB,EAAAA,EAAAA,MAA1F/jC,EAAI,EAAJA,MACE8B,WAAc9B,EAAKkF,UAAS,CAAA49B,EAAAA,KAAAA,EAAA,YAAQ,IAAIhvC,MAAM,uCAAsC,OAGpC,OAFpDgO,EAAY,IAAIoB,GAAUlD,EAAK8B,WAC/BoD,EAAY5B,IAAAA,OAAYtD,EAAKkF,WACnC4+B,EAAUvxB,aAAazQ,EAAWS,GAAO/P,KAAK0S,IAAY,kBACnD4+B,GAAS,4CACjB,mDATgB,GAUjB/C,YAAa,WAAF,wBAAE,WAAO7B,GAAyC,8EAAA6D,EAAAA,KAAAA,EACpCrB,EAAiBX,YAAY7B,EAAIvoB,OAAOxU,SAAQ,OAAzD,OAAR0b,EAAW,EAAH,KACPva,EAAAA,OAAAA,SAAAA,IAAAA,OAAYua,EAAS7d,KAAKkF,YAAU,2CAC5C,mDAHY,GAIb27B,uBAAwB,WAAF,wBAAE,WAAO3B,GAA0C,uFAC9B,GAAnCgD,EAAWyB,IACF,CAAFP,EAAAA,KAAAA,EAAA,YAAQR,EAAAA,UAAAA,SAAAA,OAA0B,CAAEzgC,QAAS,8BAA+B4Y,KAAM,OAAO,OAClE,GAA9B+oB,EAAY5E,EAAIvoB,OAAOxU,QACb,CAAFihC,EAAAA,KAAAA,EAAA,YAAQR,EAAAA,UAAAA,IAAAA,eAA6B,CAAEzgC,QAAS,gCAAgC,cAAAihC,EAAAA,KAAAA,EACvE1B,EAAiBd,gBAAgBt9B,IAAAA,OAAYwgC,EAAUlyB,qBAAoB,OAAtF,GAAsFoyB,EAAAA,EAAAA,MAA1FhkC,EAAI,EAAJA,MACE8B,WAAc9B,EAAKkF,UAAS,CAAAk+B,EAAAA,KAAAA,GAAA,YAAQ,IAAItvC,MAAM,uCAAsC,QAGpC,OAFpDgO,EAAY,IAAIoB,GAAUlD,EAAK8B,WAC/BoD,EAAY5B,IAAAA,OAAYtD,EAAKkF,WACnC4+B,EAAUvxB,aAAazQ,EAAWS,GAAO/P,KAAK0S,IAAYk+B,EAAAA,KAAAA,GAC/BlB,EAASpW,QAA2B,CAAEE,OAAQ,yBAA0BrV,OAAQ,KAAK,QAC9D,OAD5C2qB,EAAc,EAAH,KACX2C,EAAO,IAAI/b,GAAWoZ,EAAY5B,WAAU0D,EAAAA,KAAAA,GAChCa,EAAKhP,mBAAmB6O,EAAUnhC,aAAY,QAAvD,OAAH2pB,EAAM,EAAH,KACF8W,EAAAA,OAAAA,SAAAA,CAAEl+B,UAAWonB,IAAK,4CAC1B,mDAduB,GAexBwU,oBAAqB,WAAF,wBAAE,WAAO5B,GAA4C,gGACvD,QAAX,EAACA,EAAIvoB,cAAM,OAAVusB,EAAY/gC,SAAsB,QAAV+8B,EAAAA,EAAIvoB,cAAM,OAAVwsB,EAAYhhC,QAAQxP,OAAM,CAAA0wC,EAAAA,KAAAA,EAAA,YAC/CT,EAAAA,UAAAA,IAAAA,cAA4B,WAAU,OAQ9C,IALMsB,EAAUhF,EAAIvoB,OAAOxU,QACnBxP,EAAWuxC,EAAXvxC,OAEFwxC,EAAa,GAEVzsC,EAAI,EAAGA,EAAI/E,EAAQ+E,IAC1BysC,EAAWxsC,KAAK2L,IAAAA,OAAY47B,EAAIvoB,OAAOxU,QAAQzK,GAAGka,qBACnD,OAAAyxB,EAAAA,KAAAA,EAC2B3B,EAAiBZ,oBAAoBqD,GAAW,OAA3D,GAA2DC,EAAAA,EAAAA,KAApE1J,EAAG,EAAHA,KAAK16B,EAAI,EAAJA,MAEH8B,YAA4B,QAAf,EAAA9B,EAAKyP,kBAAU,aAAf40B,EAAiB1xC,UAAWA,EAAM,CAAA0wC,EAAAA,KAAAA,GAAA,YAAQ,IAAIvvC,MAAM4mC,GAAI,QAI/E,IAFM54B,EAAY,IAAIoB,GAAUlD,EAAK8B,WAE5BpK,EAAI,EAAGA,EAAI/E,EAAQ+E,IACpBwN,EAAY5B,IAAAA,OAAYtD,EAAKyP,WAAW/X,IAC9CwsC,EAAQxsC,GAAG6a,aAAazQ,EAAWS,GAAO/P,KAAK0S,IAChD,yBAEMg/B,GAAO,4CACf,mDAzBoB,IA2BvB,OAAOvD,CACT,CD3EW2D,CAAiB5C,EAAkB3hC,KAAK4jC,uBAAuBhqC,KAAKoG,MAC7E,KAAC,EAHqC,CAAQmhC,+bEAhD,IAAaqD,GAAyB,aAAApD,EAAAA,EAAAA,GAAAA,EAAAA,GAAA,gCAAAC,EAAAA,EAAAA,GAAAA,KAAAA,GAAA,wBAGnC,OAHmCK,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAA39B,IAAAA,sBAAA9I,MAC1B,SAAoB0mC,GAC5B,OCE+B,SAACA,EAAkCiC,GACpE,IAAMa,EAA2BhC,GAAwBd,GAUzD,OATA8C,EAAyB3D,uBAAsB,mCAAG,WAAO3B,GAA0C,+EACxD,GAAnCgD,EAAWyB,IACF,CAAF1D,EAAAA,KAAAA,EAAA,YAAQ2C,EAAAA,UAAAA,SAAAA,OAA0B,CAAEzgC,QAAS,8BAA+B4Y,KAAM,OAAO,cAAAklB,EAAAA,KAAAA,EAC5EyB,EAAiBd,gBAAgB1B,EAAIvoB,OAAOxU,SAAQ,OAA7D,OAAXoK,EAAc,EAAH,KAAA0zB,EAAAA,KAAAA,EACUiC,EAASpW,QAA2B,CAAEE,OAAQ,yBAA0BrV,OAAQ,KAAK,OAC9D,OAD5C2qB,EAAc,EAAH,KACX2C,EAAO,IAAI/b,GAAWoZ,EAAY5B,WAAUO,EAAAA,KAAAA,GAChCgE,EAAKhP,mBAAmB1oB,EAAY5J,aAAY,QAAzD,OAAH2pB,EAAM,EAAH,KACF2T,EAAAA,OAAAA,SAAAA,CAAE/6B,UAAWonB,IAAK,4CAC1B,mDAR8C,GASxCkY,CACT,CDdWC,CAAoB/C,EAAkB3hC,KAAK4jC,uBAAuBhqC,KAAKoG,MAChF,KAAC,EAHmC,CAAQmhC,+bEC9C,IAAawD,GAAuB,aAAAvD,EAAAA,EAAAA,GAAAA,EAAAA,GAAA,gCAAAC,EAAAA,EAAAA,GAAAA,KAAAA,GAAA,wBAGjC,OAHiCK,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAA39B,IAAAA,sBAAA9I,MACxB,SAAoB0mC,GAC5B,OCE6B,SAACA,EAAgCiC,GAChE,IAAMhD,EAAmB6B,GAAwBd,GAcjD,OAbAf,EAAiBI,YAAW,mCAAG,WAAO7B,GAAyC,gFAAAe,EAAAA,KAAAA,EACjDyB,EAAiBx/B,KAAKg9B,EAAIvoB,OAAOxU,QAAS,QAAO,OAA5D,OAA4DyhC,EAAAA,EAAAA,KAArE1+B,EAAS,EAATA,UAAS,kBACVA,GAAS,2CACjB,mDAH2B,GAI5By7B,EAAiBE,uBAAsB,mCAAG,WAAO3B,GAA0C,+EAChD,GAAnCgD,EAAWyB,IACF,CAAFtD,EAAAA,KAAAA,EAAA,YAAQuC,EAAAA,UAAAA,SAAAA,OAA0B,CAAEzgC,QAAS,8BAA+B4Y,KAAM,OAAO,cAAAslB,EAAAA,KAAAA,EAC5EqB,EAAiBd,gBAAgB1B,EAAIvoB,OAAOxU,SAAQ,OAA7D,OAAXoK,EAAc,EAAH,KAAA8zB,EAAAA,KAAAA,EACU6B,EAASpW,QAA2B,CAAEE,OAAQ,yBAA0BrV,OAAQ,KAAK,OAC9D,OAD5C2qB,EAAc,EAAH,KACX2C,EAAO,IAAI/b,GAAWoZ,EAAY5B,WAAUW,EAAAA,KAAAA,GAChC4D,EAAKhP,mBAAmB1oB,EAAY5J,aAAY,QAAzD,OAAH2pB,EAAM,EAAH,KACF+T,EAAAA,OAAAA,SAAAA,CAAEn7B,UAAWonB,IAAK,4CAC1B,mDARsC,GAShCqU,CACT,CDlBWgE,CAAkBjD,EAAkB3hC,KAAK4jC,uBAAuBhqC,KAAKoG,MAC9E,KAAC,EAHiC,CAAQmhC,IEC/B0D,GAAmB,SAAClD,GAC/B,IAAMf,EAAsC,CAC1CP,gBAAiB,WAAF,IAAEqC,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,8EAAAxC,EAAAA,KAAAA,EACQyB,EAAiB5V,QAAkB,CACxDE,OAAQ,yBACRrV,OAAQ,CAAC,IACT,OAHY,OAARzL,EAAW,EAAH,uBAIPA,GAAQ,2CAChB,kDANgB,GAQjB60B,YAAa,WAAF,IAAE2C,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,8EAAArC,EAAAA,KAAAA,EACYqB,EAAiB5V,QAAkB,CACxDE,OAAQ,yBACRrV,OAAQ,CAAC,IACT,OAHY,OAARzL,EAAW,EAAH,uBAIPA,GAAQ,2CAChB,kDANY,GAQb81B,cAAe,WAAF,IAAE2B,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,uEACPC,EAAAA,UAAAA,IAAAA,qBAAkC,2CACzC,kDAFc,GAGf3B,aAAc,WAAF,IAAE4B,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,uEACND,EAAAA,UAAAA,IAAAA,qBAAkC,2CACzC,kDAFa,GAGd7B,YAAa,WAAF,wBAAE,WAAO7B,GAAyC,4EAC5C,QAD4C,EACtDA,EAAIvoB,cAAM,OAAVusB,EAAY/gC,QAAS,CAAF2gC,EAAAA,KAAAA,EAAA,YAChBF,EAAAA,UAAAA,IAAAA,cAA4B,WAAU,cAAAE,EAAAA,KAAAA,EAExBpB,EAAiBX,YAAY7B,EAAIvoB,OAAOxU,SAAQ,OAAzD,OAAPA,EAAU,EAAH,uBACNA,GAAO,2CACf,mDANY,GAQby+B,gBAAiB,WAAF,wBAAE,WAAO1B,GAA0C,8EACjD,QADiD,EAC3DA,EAAIvoB,cAAM,OAAVwsB,EAAYhhC,QAAS,CAAF4gC,EAAAA,KAAAA,EAAA,YAChBH,EAAAA,UAAAA,IAAAA,cAA4B,WAAU,OAEV,OAA9BkB,EAAY5E,EAAIvoB,OAAOxU,QAAO4gC,EAAAA,KAAAA,EACbrB,EAAiBd,gBAAgBkD,GAAU,OAApD,OAARjmB,EAAW,EAAH,uBACPA,GAAQ,2CAChB,mDAPgB,GASjBgjB,uBAAwB,WAAF,wBAAE,WAAO3B,GAA0C,8EACxD,QADwD,EAClEA,EAAIvoB,cAAM,OAAVkuB,EAAY1iC,QAAS,CAAFihC,EAAAA,KAAAA,EAAA,YAChBR,EAAAA,UAAAA,IAAAA,cAA4B,WAAU,OAEV,OAA9BkB,EAAY5E,EAAIvoB,OAAOxU,QAAOihC,EAAAA,KAAAA,EACb1B,EAAiB1tB,gBAAgB8vB,GAAU,OAApD,OAARjmB,EAAW,EAAH,KACPulB,EAAAA,OAAAA,SAAAA,CAAEl+B,UAAW2Y,IAAU,2CAC/B,mDAPuB,GASxBijB,oBAAqB,WAAF,wBAAE,WAAO5B,GAA4C,gFACvD,QAAX,EAACA,EAAIvoB,cAAM,OAAVmuB,EAAY3iC,SAAsB,QAAV+8B,EAAAA,EAAIvoB,cAAM,OAAVouB,EAAY5iC,QAAQxP,OAAM,CAAA0wC,EAAAA,KAAAA,EAAA,YAC/CT,EAAAA,UAAAA,IAAAA,cAA4B,WAAU,OAEP,OAAjCjqB,EAAeumB,EAAIvoB,OAAOxU,QAAOkhC,EAAAA,KAAAA,EAChB3B,EAAiBZ,oBAAoBnoB,GAAa,OAA3D,OAARkF,EAAW,EAAH,uBACPA,GAAQ,2CAChB,mDAPoB,IASvB,OAAO8iB,CACT,sgCCxDA,IAAaqE,GAAsB,aAAA7D,EAAAA,EAAAA,GAAAA,EAAAA,GAAA,YACjC,SAAwF6D,EAAAA,GAAA,IAA1EpyB,EAAM,EAANA,OAAQ7T,EAAK,EAALA,MAAK,OAAAqiC,EAAAA,EAAAA,GAAAA,KAAAA,GACnBC,EAAAA,KAAAA,KAAAA,CAAEzuB,OAAQ,CAAE0uB,YAAa,GAAF,MAAO1uB,EAAO0uB,aAAW,IAAEC,eAAgBC,EAAAA,iBAAAA,UAA6BziC,MAAAA,GACvG,CAqDC,OArDA0iC,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAA39B,IAAAA,cAAA9I,MAAAA,WAAA,wBAEM,WAAkB2Q,GAAsB,wEACtC6I,EAAAA,OAAAA,SAAAA,QAAQC,WAAS,2CACzB,mDAJAzZ,IAIA,CAAA8I,IAAAA,gBAAA9I,MAAAA,WAAA,wBAEM,WAAoB0mC,GAAsC,iEACX,OAApD3hC,KAAKklC,6BAA6BvD,GAAkBrB,EAAAA,KAAAA,EAC9CtgC,KAAKmlC,YAAYxD,GAAiB,gDACzC,mDALA1mC,IAKA,CAAA8I,IAAAA,gBAAA9I,MAAAA,WAAA,IAESsnC,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,8EACHviC,KAAKmiC,SAAU,CAAFzB,EAAAA,KAAAA,EAAA,YAAQmC,EAAAA,UAAAA,SAAAA,OAA0B,CAAEzgC,QAAS,2CAA4C4Y,KAAM,OAAO,OACzG,OAAPkkB,EAAYl/B,KAAK6S,OAAO0uB,YAAxBrC,QAAOwB,EAAAA,KAAAA,EAEgB1gC,KAAKmiC,SAASpW,QAAyB,CACpEE,OAAQ,mBACR,OAE0I,GAJtImZ,EAAmB,EAAH,KAIhBC,GAAsBC,EAAAA,EAAAA,aAAYF,EAAiBhpC,YAAcgpC,EAAmB,KAAH,OAAQpa,SAASoa,EAAkB,IAAIhpC,SAAS,KACnI8iC,IAAYmG,EAAmB,CAAA3E,EAAAA,KAAAA,EAAA,YAC3B6E,EAAAA,0BAAAA,mBAA6C,oCAAD,OAAqCF,EAAmB,uBAAenG,IAAU,OAI9E,OAFvDl/B,KAAK46B,OAAO,CAAEsE,QAASmG,IACvBrlC,KAAKmiC,SAASqD,KAAK,UAAW,CAAEtG,QAASl/B,KAAKhB,MAAMkgC,UACpDl/B,KAAKmiC,SAASqD,KAAK,eAAgBxlC,KAAKhB,MAAMkgC,SAAS,kBAChDl/B,KAAKhB,MAAMkgC,SAAO,iDAC1B,kDAlBAjkC,IAkBA,CAAA8I,IAAAA,cAAA9I,MAAAA,WAAA,wBAEO,WAAkB0mC,GAAsC,+EAQrB,OAPnCf,EAAmBiE,GAAiBlD,GACpCI,EAAmBpB,GAAuBC,GAC1CqB,EAAwBuB,GAAsC7B,IAC9DC,EAAS,IAAIC,EAAAA,IACZjqC,KAAKmqC,GACZH,EAAOhqC,KAAKqqC,GACNE,GAAWC,EAAAA,EAAAA,IAAmBR,GACpC5hC,KAAKqiC,0BAA0BF,GAAUsD,EAAAA,KAAAA,GACnCzlC,KAAKsiC,gBAAe,iDAC3B,mDAZArnC,IAYA,CAAA8I,IAAAA,+BAAA9I,MAAAA,WAAA,wBAEO,WAAmC0mC,GAAsC,4EAC/EA,EAAiBtU,GAAG,kBAAiB,mCAAE,WAAOliB,GAAkB,iEAC9Du6B,EAAKvD,SAASqD,KAAK,kBAAmBr6B,GAAU,2CACjD,mDAFoC,IAGrCw2B,EAAiBtU,GAAG,eAAc,mCAAE,WAAO6R,GAAe,uEAKrD,OAJGmG,GAAsBC,EAAAA,EAAAA,aAAYpG,GAAWA,EAAU,KAAH,OAAQlU,SAASkU,EAAS,IAAI9iC,SAAS,KAEjGspC,EAAKC,UAAU,CACbpE,YAAkBqE,GAAAA,GAAAA,CAAAA,EAAAA,EAAK/yB,OAAO0uB,aAAW,IAAErC,QAASmG,MACnDrC,EAAAA,KAAAA,EACG0C,EAAKG,cAAclE,GAAiB,2CAC3C,mDAPiC,IAO/B,2CACJ,mDAdA1mC,MAcA,EAxDgC,CAAQunC,EAAAA,+hCCF3C,SAAsBV,GAAoB,GAAD,gCAsExC,qBAAAgE,IAtEM,8GASJ,GARDpK,EAAAA,EAAAA,QACAkI,EAAsB,EAAtBA,uBAKMmC,EAAmB,WACvB,OAAOhO,GAAQuC,cAAc93B,GAAO/P,KAAKipC,EAAS,SAE7B,kBAAZA,EAAoB,CAAAsK,EAAAA,KAAAA,EAAA,YAAQT,EAAAA,0BAAAA,cAAwC,4BAA2B,OAyDzG,OAxDKU,EAAUF,IACVnF,EAAsC,CAC1CP,gBAAiB,WAAF,IAAEqC,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,0FACR,CAACuD,EAAQlkC,UAAU4B,aAAW,2CACtC,kDAFgB,GAGjBq8B,YAAa,WAAF,IAAE2C,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,0FAAY,CAACsD,EAAQlkC,UAAU4B,aAAW,6FAA1C,GAEbs9B,cAAe,WAAF,IAAE2B,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,0FAAYlH,GAAO,6FAAnB,GACfwF,aAAc,WAAF,IAAE4B,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,0FAAYv/B,IAAAA,OAAY0iC,EAAQhkC,YAAU,6FAA1C,GAEd4+B,gBAAiB,WAAF,wBAAE,WAAO1B,GAA0C,4EACjD,QADiD,EAC3DA,EAAIvoB,cAAM,OAAVusB,EAAY/gC,QAAS,CAAF2gC,EAAAA,KAAAA,EAAA,YAChBF,EAAAA,UAAAA,IAAAA,cAA4B,WAAU,OAGb,OAD3Br2B,EAAc2yB,EAAIvoB,OAAOxU,SACnBkQ,YAAY2zB,GAAS,kBAC1Bz5B,GAAW,2CACnB,mDAPgB,GASjBw0B,YAAa,WAAF,wBAAE,WAAO7B,GAAyC,4EAC5C,QAD4C,EACtDA,EAAIvoB,cAAM,OAAVwsB,EAAYhhC,QAAS,CAAF4gC,EAAAA,KAAAA,EAAA,YAChBH,EAAAA,UAAAA,IAAAA,cAA4B,WAAU,OAE6B,OAArEqD,EAAYC,KAAAA,KAAAA,SAAmBhH,EAAIvoB,OAAOxU,QAAS6jC,EAAQhkC,WAAU,kBACpEikC,GAAS,2CACjB,mDANY,GAQbpF,uBAAwB,WAAF,wBAAE,WAAO3B,GAA0C,gFACxD,QADwD,EAClEA,EAAIvoB,cAAM,OAAVkuB,EAAY1iC,QAAS,CAAFihC,EAAAA,KAAAA,EAAA,YAChBR,EAAAA,UAAAA,IAAAA,cAA4B,WAAU,OAEO,GAA/CuD,EAAuBxC,IACF,CAAFP,EAAAA,KAAAA,EAAA,YAAQR,EAAAA,UAAAA,SAAAA,OAA0B,CAAEzgC,QAAS,8BAA+B4Y,KAAM,OAAO,OAGxF,OADpBxO,EAAc2yB,EAAIvoB,OAAOxU,SACnBD,KAAK8jC,GAAS5C,EAAAA,KAAAA,EAER+C,EAAqBra,QAAgB,CACrDE,OAAQ,kBACRrV,OAAQ,CAACrT,IAAAA,OAAYiJ,EAAY5J,gBACjC,OAHO,OAAHyjC,EAAM,EAAH,KAIFhD,EAAAA,OAAAA,SAAAA,CAAEl+B,UAAWkhC,IAAK,4CAC1B,mDAfuB,GAiBxBtF,oBAAqB,WAAF,wBAAE,WAAO5B,GAA4C,sFACvD,QAAX,EAACA,EAAIvoB,cAAM,OAAVmuB,EAAY3iC,SAAsB,QAAV+8B,EAAAA,EAAIvoB,cAAM,OAAVouB,EAAY5iC,QAAQxP,OAAM,CAAA0wC,EAAAA,KAAAA,EAAA,YAC/CT,EAAAA,UAAAA,IAAAA,cAA4B,WAAU,OAGxCyD,EAAiB,QAAb,EAAGnH,EAAIvoB,cAAM,aAAV2vB,EAAYnkC,QAAOokC,EACfF,GAAAA,GAAQ,IAAE,IAA3B,IAA6BE,EAAAA,MAAAA,EAAAA,EAAAA,KAAAA,MAAlBC,EAAE,QACSA,EACRn0B,YAAY2zB,EACzB,UAAAO,EAAAA,EAAAA,EAAA,SAAAA,EAAAA,GAAA,0BACMF,GAAI,2CACZ,mDAXoB,IAYtB,kBAEM1F,GAAgB,2CACxB,6hCCxDD,IAAa8F,GAAyB,aAAAtF,EAAAA,EAAAA,GAAAA,EAAAA,GAAA,YACpC,SAAiGsF,EAAAA,GAAA,IAAnF7zB,EAAM,EAANA,OAAQ7T,EAAK,EAALA,MAAK,OAAAqiC,EAAAA,EAAAA,GAAAA,KAAAA,GACnBC,EAAAA,KAAAA,KAAAA,CAAEzuB,OAAQ,CAAE0uB,YAAa,GAAF,MAAO1uB,EAAO0uB,aAAW,IAAEC,eAAgBC,EAAAA,iBAAAA,UAA6BziC,MAAAA,GACvG,CAmHC,OAnHA0iC,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAA39B,IAAAA,SAAA9I,MAAAA,WAAA,IAWM0rC,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,oEACA3mC,KAAKhB,MAAMq7B,WAAU,CAAA6F,EAAAA,KAAAA,EAAA,YAClB2C,EAAAA,UAAAA,SAAAA,OAA0B,CAAEzgC,QAAS,4EAA6E4Y,KAAM,OAAO,cAAAklB,EAAAA,KAAAA,EACjIlgC,KAAK6lC,cAAc7lC,KAAKhB,MAAMq7B,YAAW,gCACxCr6B,KAAKomC,qBAAqBra,QAA2B,CAAEE,OAAQ,kBAAiB,gDACxF,kDAhBAhxB,IAgBA,CAAA8I,IAAAA,gBAAA9I,MAAAA,WAAA,wBAEM,WAAoBygC,GAAe,wFAAA4E,EAAAA,KAAAA,EACTwB,GAAoB,CAAEpG,QAAAA,EAASkI,uBAAwB5jC,KAAK4jC,uBAAuBhqC,KAAKoG,QAAQ,OAatF,OAbnC4gC,EAAmB,EAAH,KAEhBmB,EAAmBpB,GAAuBC,GAE1CgB,EAAS,IAAIC,EAAAA,GAAY+E,EACDlH,GAAoB1/B,KAAK6S,OAAO0uB,aAAtD1B,EAAiB,EAAjBA,kBACR+B,EAAOhqC,KAAKoI,KAAK6mC,4BACjBjF,EAAOhqC,KAAKoI,KAAK8mC,wBACjBlF,EAAOhqC,KAAKmqC,GACZH,EAAOhqC,KAAKioC,GAENsC,GAAWC,EAAAA,EAAAA,IAAmBR,GAEpC5hC,KAAKqiC,0BAA0BF,GAAU7B,EAAAA,KAAAA,GAEnCtgC,KAAKsiC,gBAAe,iDAC3B,mDAnBArnC,IAmBA,CAAA8I,IAAAA,gBAAA9I,MAAAA,WAAA,wBAEM,WAAoB2b,GAA8B,oEAClD5W,KAAKomC,qBAAsB,CAAF1F,EAAAA,KAAAA,EAAA,YAAQmC,EAAAA,UAAAA,SAAAA,OAA0B,CAAEzgC,QAAS,8BAA+B4Y,KAAM,OAAO,cAAA0lB,EAAAA,KAAAA,EAC7F1gC,KAAKomC,qBAAqBra,QAAyB,CAAEE,OAAQ,qBAAqB,OAA3F,GAAG,EAAH,OACGrV,EAAOyjB,WAAU,CAAAqG,EAAAA,KAAAA,GAAA,aAAAA,EAAAA,KAAAA,EAC7B1gC,KAAK6lC,cAAcjvB,EAAOyjB,YAAW,OAClB,OADkBqG,EAC3C,GAAA1gC,KAAKomC,qBAAoB1F,EAAAA,KAAAA,GACP1gC,KAAKomC,qBAAqBra,QAA2B,CAAEE,OAAQ,oBAAoB,QAAAyU,EAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,CAAnGv1B,SAAU,EAAF,IAAAu1B,EADgB8E,GAAAA,KAAI,UAAC,kBAAmB,EAAF,qDAInD,mDAXAvqC,IAWA,CAAA8I,IAAAA,cAAA9I,MAAAA,WAAA,wBAEM,WAAkB2b,GAA2B,4EAC7C5W,KAAKomC,qBAAsB,CAAFX,EAAAA,KAAAA,EAAA,YAAQ5C,EAAAA,UAAAA,SAAAA,OAA0B,CAAEzgC,QAAS,8BAA+B4Y,KAAM,OAAO,OAKvF,OAJ1BumB,EAAcvhC,KAAK+mC,eAAenwB,EAAOsoB,SAC/Cl/B,KAAK46B,OAAO,CACVsE,QAAS,YAEXl/B,KAAK2lC,UAAU,CAAEpE,YAAAA,IAAekE,EAAAA,KAAAA,EACVzlC,KAAKomC,qBAAqBra,QAAyB,CAAEE,OAAQ,qBAAqB,OAA3F,OAAPyP,EAAU,EAAH,KAAA+J,EAAAA,KAAAA,GACPzlC,KAAK6lC,cAAcnK,GAAQ,iDAClC,mDAXAzgC,IAWA,CAAA8I,IAAAA,gBAAA9I,MAAAA,WAAA,IAESsnC,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,4EACHviC,KAAKomC,qBAAsB,CAAFrD,EAAAA,KAAAA,EAAA,YAAQF,EAAAA,UAAAA,SAAAA,OAA0B,CAAEzgC,QAAS,8BAA+B4Y,KAAM,OAAO,cAAA+nB,EAAAA,KAAAA,EAClG/iC,KAAKomC,qBAAqBra,QAAyB,CACtEE,OAAQ,YACRrV,OAAQ,KACR,OACiB,GAJbowB,EAAS,EAAH,KAIJzF,EAAgBvhC,KAAK6S,OAArB0uB,YACO,OAAXyF,EAAe,CAAAjE,EAAAA,KAAAA,EAAA,YACXwC,EAAAA,0BAAAA,mBAA6C,sDAAD,OAAuDhE,EAAY5B,YAAY,OAKlI,OAJD3/B,KAAK46B,OAAO,CAAEsE,QAASqC,EAAYrC,UAC/Bl/B,KAAKhB,MAAMkgC,UAAYqC,EAAYrC,UACrCl/B,KAAKmiC,SAASqD,KAAK,eAAgBxlC,KAAKhB,MAAMkgC,SAC9Cl/B,KAAKmiC,SAASqD,KAAK,UAAW,CAAEtG,QAASl/B,KAAKhB,MAAMkgC,WACrD,kBACMl/B,KAAKhB,MAAMkgC,SAAO,iDAC1B,kDAjBAjkC,IAiBA,CAAA8I,IAAAA,2BAAA9I,MAEO,WAAwB,WACxBgsC,EAA4C,CAChDC,kBAAmB,WAAF,wBAAE,WAAO/H,GAAyC,oFAC5DA,EAAIvoB,OAAQ,CAAFosB,EAAAA,KAAAA,EAAA,YAAQH,EAAAA,UAAAA,IAAAA,cAA4B,0BAAyB,OACN,GADMM,EACDhE,EAAIvoB,OAAvEsoB,EAAAA,EAAAA,QAASiI,EAAAA,EAAAA,UAAWC,EAAO,EAAPA,QAASC,EAAiB,EAAjBA,kBAAmBC,EAAc,EAAdA,eAEnDpI,EAAS,CAAF8D,EAAAA,KAAAA,EAAA,YAAQH,EAAAA,UAAAA,IAAAA,cAA4B,kCAAiC,UAC5EuE,GAA8B,IAAnBA,EAAQx0C,OAAY,CAAAowC,EAAAA,KAAAA,EAAA,YAAQH,EAAAA,UAAAA,IAAAA,cAA4B,kCAAiC,UACpGyE,EAAgB,CAAFtE,EAAAA,KAAAA,EAAA,YAAQH,EAAAA,UAAAA,IAAAA,cAA4B,yCAAwC,OAC/F6C,EAAK6B,SAAS,CACZ/F,eAAgBC,EAAAA,iBAAAA,OAChBvC,QAAAA,EACAsI,QAAQF,OAAAA,QAAc,IAAdA,OAAc,EAAdA,EAAgBG,SAAU,MAClCC,YAAYJ,OAAAA,QAAc,IAAdA,OAAc,EAAdA,EAAgB1zC,OAAQ,SACpC+zC,YAAaR,EACbxH,UAAWyH,EAAQ,GACnBQ,eAAeP,OAAAA,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAoB,KAAM,KACxC,4CACJ,mDAhBkB,GAiBnBQ,kBAAmB,WAAF,wBAAE,WAAO1I,GAAqC,oEACxDA,EAAIvoB,OAAQ,CAAFysB,EAAAA,KAAAA,EAAA,YAAQR,EAAAA,UAAAA,IAAAA,cAA4B,0BAAyB,UACvE1D,EAAIvoB,OAAOsoB,QAAS,CAAFmE,EAAAA,KAAAA,EAAA,YAAQR,EAAAA,UAAAA,IAAAA,cAA4B,mBAAkB,cAAAQ,EAAAA,KAAAA,EACvEqC,EAAKoC,YAAY3I,EAAIvoB,QAAO,2CACnC,mDAJkB,IAOrB,gBdpCsGmxB,GAAA,IAA5Db,EAAiB,EAAjBA,kBAAmBW,EAAiB,EAAjBA,kBAC/D,OAAOpI,EAAAA,EAAAA,IAAgB,CACrBc,GAA2D,iBAAkB2G,GAC7E3G,GAAuD,oBAAqBsH,IAEhF,Cc8BkCG,CAA4Bf,EAE5D,GAAC,CAAAljC,IAAAA,uBAAA9I,MAEO,WAAoB,WACpBgtC,EAAoC,CACxCC,iBAAkB,WAAF,wBAAE,WAAO/I,GAAwC,0EAC1DA,EAAIvoB,OAAQ,CAAF0sB,EAAAA,KAAAA,EAAA,YAAQT,EAAAA,UAAAA,IAAAA,cAA4B,0BAAyB,UACvE1D,EAAIvoB,OAAOyjB,WAAY,CAAFiJ,EAAAA,KAAAA,EAAA,YAAQT,EAAAA,UAAAA,IAAAA,cAA4B,sBAAqB,OACjE,OAAVxI,EAAe8E,EAAIvoB,OAAnByjB,WAAUiJ,EAAAA,KAAAA,EACZ6E,EAAKC,cAAc,CAAE/N,WAAAA,IAAa,2CACzC,mDALiB,IAOpB,OdtCY,SAA8DgO,GAAA,IAApCH,EAAgB,EAAhBA,iBACxC,OAAOzI,EAAAA,EAAAA,IAAgB,CAACc,GAA0D,gBAAiB2H,IACrG,CcoCWI,CAAwBL,EACjC,KAAC,EAtHmC,CAAQzF,EAAAA,YAAjCkE,GAAyB,yDAKA,WAAO9vB,GAG1C,uEACsG,OAA/F2xB,EAAkB,IAAI7B,GAAyB,CAAE7zB,OAAQ,CAAE0uB,YAAa3qB,EAAO2qB,eAAgByE,EAAAA,KAAAA,EAC/FuC,EAAgB1C,cAAcjvB,EAAO8kB,SAAQ,gCAC5C6M,GAAe,2CACvB,mDAZmC,IClBtC,IAAaC,GAAY,WAGvB,WAAYrG,IAAkCd,EAAAA,EAAAA,GAAAA,KAAAA,IAAAoH,EAAAA,EAAAA,GAAAA,KAAAA,gBAAAA,GAC5CzoC,KAAKmiC,SAAWA,CAClB,CAqDC,OArDAT,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAA39B,IAAAA,kBAAA9I,MAAAA,WAAA,IAEMynC,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,8EAAAxC,EAAAA,KAAAA,EACkBlgC,KAAKmiC,SAASpW,QAAkB,CACrDE,OAAQ,kBACRrV,OAAQ,CAAC,IACT,OAHY,OAARzL,EAAW,EAAH,uBAIPA,GAAQ,gDAChB,kDARAlQ,IAQA,CAAA8I,IAAAA,yBAAA9I,MAAAA,WAAA,wBAEM,WAA6BuR,GAAwB,gFAAA8zB,EAAAA,KAAAA,EAC9BtgC,KAAKmiC,SAASpW,QAA+B,CACvEE,OAAQ,yBACRrV,OAAQ,CACNxU,QAASoK,KAEX,OALe,OAKfk8B,EAAAA,EAAAA,KALMvjC,EAAS,EAATA,UAMDm7B,EAAAA,OAAAA,SAAAA,CAAEn7B,UAAAA,IAAW,gDACrB,mDAVAlK,IAUA,CAAA8I,IAAAA,kBAAA9I,MAAAA,WAAA,wBAEM,WAAsBuR,GAAwB,8EAAAk0B,EAAAA,KAAAA,EAClB1gC,KAAKmiC,SAASpW,QAAQ,CACrDE,OAAQ,kBACRrV,OAAQ,CACNxU,QAASoK,KAEX,OALqB,OAAjBm8B,EAAoB,EAAH,uBAMhBA,GAAiB,gDACzB,mDAVA1tC,IAUA,CAAA8I,IAAAA,sBAAA9I,MAAAA,WAAA,wBAEM,WAA0B2d,GAA2B,8EAAA6sB,EAAAA,KAAAA,EACxBzlC,KAAKmiC,SAASpW,QAAQ,CACtDE,OAAQ,sBACRrV,OAAQ,CACNxU,QAASwW,KAEX,OALsB,OAAlBgwB,EAAqB,EAAH,uBAMjBA,GAAkB,gDAC1B,mDAVA3tC,IAUA,CAAA8I,IAAAA,cAAA9I,MAAAA,WAAA,wBAEM,WAAkBgF,GAAgB,8EAAA8iC,EAAAA,KAAAA,EAChB/iC,KAAKmiC,SAASpW,QAAoB,CACvDE,OAAQ,cACRrV,OAAQ,CACNxU,QAASnC,KAEX,OALY,OAAR6d,EAAW,EAAH,uBAMPA,GAAsB,gDAC9B,mDAVA7iB,IAUA,CAAA8I,IAAAA,UAAA9I,MAAAA,WAAA,wBAEM,WAAiB6P,GAAsB,8EAAAk4B,EAAAA,KAAAA,EACvBhjC,KAAKmiC,SAASpW,QAAWjhB,GAAK,OAAvC,OAANgS,EAAS,EAAH,uBACLA,GAAW,gDACnB,mDALA7hB,MAKA,EA1DsB,2CCGb,8FAEN4tC,EAASC,EAAQ,OACjBC,EAAUD,EAAQ,OAClBE,EACe,oBAAXC,QAAkD,oBAAlBA,OAAY,IAChDA,OAAY,IAAE,8BACd,KAENrsC,EAAQ,GAAS4F,EAEjB5F,EAAQ,GAAoB,GAE5B,IAAMssC,EAAe,WAwDrB,SAASC,EAAcv2C,GACrB,GAAIA,EAASs2C,EACX,MAAM,IAAI/1C,WAAW,cAAgBP,EAAS,kCAGhD,IAAMw2C,EAAM,IAAI/2C,WAAWO,GAE3B,OADAS,OAAOg2C,eAAeD,EAAK5mC,EAAOhP,WAC3B41C,CACT,CAYA,SAAS5mC,EAAQksB,EAAK4a,EAAkB12C,GAEtC,GAAmB,kBAAR87B,EAAkB,CAC3B,GAAgC,kBAArB4a,EACT,MAAM,IAAIh3C,UACR,sEAGJ,OAAOi3C,EAAY7a,EACrB,CACA,OAAOj8B,EAAKi8B,EAAK4a,EAAkB12C,EACrC,CAIA,SAASH,EAAMwI,EAAOquC,EAAkB12C,GACtC,GAAqB,kBAAVqI,EACT,OAqHJ,SAAqBohB,EAAQ4S,GACH,kBAAbA,GAAsC,KAAbA,IAClCA,EAAW,QAGb,IAAKzsB,EAAOgnC,WAAWva,GACrB,MAAM,IAAI38B,UAAU,qBAAuB28B,GAG7C,IAAMr8B,EAAwC,EAA/B6P,EAAW4Z,EAAQ4S,GAC9Bma,EAAMD,EAAav2C,GAEjB62C,EAASL,EAAIjtC,MAAMkgB,EAAQ4S,GAE7Bwa,IAAW72C,IAIbw2C,EAAMA,EAAIntC,MAAM,EAAGwtC,IAGrB,OAAOL,CACT,CA3IWM,CAAWzuC,EAAOquC,GAG3B,GAAIK,YAAYC,OAAO3uC,GACrB,OAkJJ,SAAwB4uC,GACtB,GAAIC,GAAWD,EAAWx3C,YAAa,CACrC,IAAMmK,EAAO,IAAInK,WAAWw3C,GAC5B,OAAOE,EAAgBvtC,EAAK9J,OAAQ8J,EAAK7J,WAAY6J,EAAKiG,WAC5D,CACA,OAAOunC,EAAcH,EACvB,CAxJWI,CAAchvC,GAGvB,GAAa,MAATA,EACF,MAAM,IAAI3I,UACR,yHACiD2I,GAIrD,GAAI6uC,GAAW7uC,EAAO0uC,cACjB1uC,GAAS6uC,GAAW7uC,EAAMvI,OAAQi3C,aACrC,OAAOI,EAAgB9uC,EAAOquC,EAAkB12C,GAGlD,GAAiC,qBAAtBs3C,oBACNJ,GAAW7uC,EAAOivC,oBAClBjvC,GAAS6uC,GAAW7uC,EAAMvI,OAAQw3C,oBACrC,OAAOH,EAAgB9uC,EAAOquC,EAAkB12C,GAGlD,GAAqB,kBAAVqI,EACT,MAAM,IAAI3I,UACR,yEAIJ,IAAM63C,EAAUlvC,EAAMkvC,SAAWlvC,EAAMkvC,UACvC,GAAe,MAAXA,GAAmBA,IAAYlvC,EACjC,OAAOuH,EAAO/P,KAAK03C,EAASb,EAAkB12C,GAGhD,IAAMR,EAkJR,SAAqB+mB,GACnB,GAAI3W,EAAO4nC,SAASjxB,GAAM,CACxB,IAAMjZ,EAA4B,EAAtBmqC,EAAQlxB,EAAIvmB,QAClBw2C,EAAMD,EAAajpC,GAEzB,OAAmB,IAAfkpC,EAAIx2C,QAIRumB,EAAI3c,KAAK4sC,EAAK,EAAG,EAAGlpC,GAHXkpC,CAKX,CAEA,QAAmB9wC,IAAf6gB,EAAIvmB,OACN,MAA0B,kBAAfumB,EAAIvmB,QAAuB03C,GAAYnxB,EAAIvmB,QAC7Cu2C,EAAa,GAEfa,EAAc7wB,GAGvB,GAAiB,WAAbA,EAAIzR,MAAqBvP,MAAMC,QAAQ+gB,EAAIlZ,MAC7C,OAAO+pC,EAAc7wB,EAAIlZ,KAE7B,CAzKYsqC,CAAWtvC,GACrB,GAAI7I,EAAG,OAAOA,EAEd,GAAsB,qBAAX62C,QAAgD,MAAtBA,OAAOuB,aACH,oBAA9BvvC,EAAMguC,OAAOuB,aACtB,OAAOhoC,EAAO/P,KAAKwI,EAAMguC,OAAOuB,aAAa,UAAWlB,EAAkB12C,GAG5E,MAAM,IAAIN,UACR,yHACiD2I,EAErD,CAmBA,SAASwvC,EAAY1iC,GACnB,GAAoB,kBAATA,EACT,MAAM,IAAIzV,UAAU,0CACf,GAAIyV,EAAO,EAChB,MAAM,IAAI5U,WAAW,cAAgB4U,EAAO,iCAEhD,CA0BA,SAASwhC,EAAaxhC,GAEpB,OADA0iC,EAAW1iC,GACJohC,EAAaphC,EAAO,EAAI,EAAoB,EAAhBsiC,EAAQtiC,GAC7C,CAuCA,SAASiiC,EAAerxB,GAGtB,IAFA,IAAM/lB,EAAS+lB,EAAM/lB,OAAS,EAAI,EAA4B,EAAxBy3C,EAAQ1xB,EAAM/lB,QAC9Cw2C,EAAMD,EAAav2C,GAChB+E,EAAI,EAAGA,EAAI/E,EAAQ+E,GAAK,EAC/ByxC,EAAIzxC,GAAgB,IAAXghB,EAAMhhB,GAEjB,OAAOyxC,CACT,CAUA,SAASW,EAAiBpxB,EAAOhmB,EAAYC,GAC3C,GAAID,EAAa,GAAKgmB,EAAMlW,WAAa9P,EACvC,MAAM,IAAIQ,WAAW,wCAGvB,GAAIwlB,EAAMlW,WAAa9P,GAAcC,GAAU,GAC7C,MAAM,IAAIO,WAAW,wCAGvB,IAAIi2C,EAYJ,OAVEA,OADiB9wC,IAAf3F,QAAuC2F,IAAX1F,EACxB,IAAIP,WAAWsmB,QACDrgB,IAAX1F,EACH,IAAIP,WAAWsmB,EAAOhmB,GAEtB,IAAIN,WAAWsmB,EAAOhmB,EAAYC,GAI1CS,OAAOg2C,eAAeD,EAAK5mC,EAAOhP,WAE3B41C,CACT,CA2BA,SAASiB,EAASz3C,GAGhB,GAAIA,GAAUs2C,EACZ,MAAM,IAAI/1C,WAAW,0DACa+1C,EAAa9sC,SAAS,IAAM,UAEhE,OAAgB,EAATxJ,CACT,CAsGA,SAAS6P,EAAY4Z,EAAQ4S,GAC3B,GAAIzsB,EAAO4nC,SAAS/tB,GAClB,OAAOA,EAAOzpB,OAEhB,GAAI+2C,YAAYC,OAAOvtB,IAAWytB,GAAWztB,EAAQstB,aACnD,OAAOttB,EAAO5Z,WAEhB,GAAsB,kBAAX4Z,EACT,MAAM,IAAI/pB,UACR,kGAC0B+pB,GAI9B,IAAMnc,EAAMmc,EAAOzpB,OACb83C,EAAaC,UAAU/3C,OAAS,IAAsB,IAAjB+3C,UAAU,GACrD,IAAKD,GAAqB,IAARxqC,EAAW,OAAO,EAIpC,IADA,IAAI0qC,GAAc,IAEhB,OAAQ3b,GACN,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAO/uB,EACT,IAAK,OACL,IAAK,QACH,OAAO2qC,EAAYxuB,GAAQzpB,OAC7B,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAa,EAANsN,EACT,IAAK,MACH,OAAOA,IAAQ,EACjB,IAAK,SACH,OAAO4qC,EAAczuB,GAAQzpB,OAC/B,QACE,GAAIg4C,EACF,OAAOF,GAAa,EAAIG,EAAYxuB,GAAQzpB,OAE9Cq8B,GAAY,GAAKA,GAAU8b,cAC3BH,GAAc,EAGtB,CAGA,SAASI,EAAc/b,EAAUpzB,EAAOwjC,GACtC,IAAIuL,GAAc,EAclB,SALctyC,IAAVuD,GAAuBA,EAAQ,KACjCA,EAAQ,GAINA,EAAQmE,KAAKpN,OACf,MAAO,GAOT,SAJY0F,IAAR+mC,GAAqBA,EAAMr/B,KAAKpN,UAClCysC,EAAMr/B,KAAKpN,QAGTysC,GAAO,EACT,MAAO,GAOT,IAHAA,KAAS,KACTxjC,KAAW,GAGT,MAAO,GAKT,IAFKozB,IAAUA,EAAW,UAGxB,OAAQA,GACN,IAAK,MACH,OAAOgc,EAASjrC,KAAMnE,EAAOwjC,GAE/B,IAAK,OACL,IAAK,QACH,OAAO6L,EAAUlrC,KAAMnE,EAAOwjC,GAEhC,IAAK,QACH,OAAO8L,EAAWnrC,KAAMnE,EAAOwjC,GAEjC,IAAK,SACL,IAAK,SACH,OAAO+L,EAAYprC,KAAMnE,EAAOwjC,GAElC,IAAK,SACH,OAAOgM,EAAYrrC,KAAMnE,EAAOwjC,GAElC,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOiM,EAAatrC,KAAMnE,EAAOwjC,GAEnC,QACE,GAAIuL,EAAa,MAAM,IAAIt4C,UAAU,qBAAuB28B,GAC5DA,GAAYA,EAAW,IAAI8b,cAC3BH,GAAc,EAGtB,CAUA,SAASW,EAAMn5C,EAAGwnB,EAAG4xB,GACnB,IAAM7zC,EAAIvF,EAAEwnB,GACZxnB,EAAEwnB,GAAKxnB,EAAEo5C,GACTp5C,EAAEo5C,GAAK7zC,CACT,CA2IA,SAAS8zC,EAAsB/4C,EAAQ0mB,EAAKzmB,EAAYs8B,EAAUyc,GAEhE,GAAsB,IAAlBh5C,EAAOE,OAAc,OAAQ,EAmBjC,GAhB0B,kBAAfD,GACTs8B,EAAWt8B,EACXA,EAAa,GACJA,EAAa,WACtBA,EAAa,WACJA,GAAc,aACvBA,GAAc,YAGZ23C,GADJ33C,GAAcA,KAGZA,EAAa+4C,EAAM,EAAKh5C,EAAOE,OAAS,GAItCD,EAAa,IAAGA,EAAaD,EAAOE,OAASD,GAC7CA,GAAcD,EAAOE,OAAQ,CAC/B,GAAI84C,EAAK,OAAQ,EACZ/4C,EAAaD,EAAOE,OAAS,CACpC,MAAO,GAAID,EAAa,EAAG,CACzB,IAAI+4C,EACC,OAAQ,EADJ/4C,EAAa,CAExB,CAQA,GALmB,kBAARymB,IACTA,EAAM5W,EAAO/P,KAAK2mB,EAAK6V,IAIrBzsB,EAAO4nC,SAAShxB,GAElB,OAAmB,IAAfA,EAAIxmB,QACE,EAEH+4C,EAAaj5C,EAAQ0mB,EAAKzmB,EAAYs8B,EAAUyc,GAClD,GAAmB,kBAARtyB,EAEhB,OADAA,GAAY,IACgC,oBAAjC/mB,WAAWmB,UAAUge,QAC1Bk6B,EACKr5C,WAAWmB,UAAUge,QAAQrX,KAAKzH,EAAQ0mB,EAAKzmB,GAE/CN,WAAWmB,UAAUo4C,YAAYzxC,KAAKzH,EAAQ0mB,EAAKzmB,GAGvDg5C,EAAaj5C,EAAQ,CAAC0mB,GAAMzmB,EAAYs8B,EAAUyc,GAG3D,MAAM,IAAIp5C,UAAU,uCACtB,CAEA,SAASq5C,EAAcppC,EAAK6W,EAAKzmB,EAAYs8B,EAAUyc,GACrD,IA0BI/zC,EA1BAk0C,EAAY,EACZC,EAAYvpC,EAAI3P,OAChBm5C,EAAY3yB,EAAIxmB,OAEpB,QAAiB0F,IAAb22B,IAEe,UADjBA,EAAW3yB,OAAO2yB,GAAU8b,gBACY,UAAb9b,GACV,YAAbA,GAAuC,aAAbA,GAAyB,CACrD,GAAI1sB,EAAI3P,OAAS,GAAKwmB,EAAIxmB,OAAS,EACjC,OAAQ,EAEVi5C,EAAY,EACZC,GAAa,EACbC,GAAa,EACbp5C,GAAc,CAChB,CAGF,SAASq5C,EAAM5C,EAAKzxC,GAClB,OAAkB,IAAdk0C,EACKzC,EAAIzxC,GAEJyxC,EAAI6C,aAAat0C,EAAIk0C,EAEhC,CAGA,GAAIH,EAAK,CACP,IAAIQ,GAAc,EAClB,IAAKv0C,EAAIhF,EAAYgF,EAAIm0C,EAAWn0C,IAClC,GAAIq0C,EAAKzpC,EAAK5K,KAAOq0C,EAAK5yB,GAAqB,IAAhB8yB,EAAoB,EAAIv0C,EAAIu0C,IAEzD,IADoB,IAAhBA,IAAmBA,EAAav0C,GAChCA,EAAIu0C,EAAa,IAAMH,EAAW,OAAOG,EAAaL,OAEtC,IAAhBK,IAAmBv0C,GAAKA,EAAIu0C,GAChCA,GAAc,CAGpB,MAEE,IADIv5C,EAAao5C,EAAYD,IAAWn5C,EAAam5C,EAAYC,GAC5Dp0C,EAAIhF,EAAYgF,GAAK,EAAGA,IAAK,CAEhC,IADA,IAAIw0C,GAAQ,EACHvuC,EAAI,EAAGA,EAAImuC,EAAWnuC,IAC7B,GAAIouC,EAAKzpC,EAAK5K,EAAIiG,KAAOouC,EAAK5yB,EAAKxb,GAAI,CACrCuuC,GAAQ,EACR,KACF,CAEF,GAAIA,EAAO,OAAOx0C,CACpB,CAGF,OAAQ,CACV,CAcA,SAASy0C,EAAUhD,EAAK/sB,EAAQnpB,EAAQN,GACtCM,EAASF,OAAOE,IAAW,EAC3B,IAAMm5C,EAAYjD,EAAIx2C,OAASM,EAC1BN,GAGHA,EAASI,OAAOJ,IACHy5C,IACXz5C,EAASy5C,GAJXz5C,EAASy5C,EAQX,IAKI10C,EALE20C,EAASjwB,EAAOzpB,OAMtB,IAJIA,EAAS05C,EAAS,IACpB15C,EAAS05C,EAAS,GAGf30C,EAAI,EAAGA,EAAI/E,IAAU+E,EAAG,CAC3B,IAAMupB,EAAS8J,SAAS3O,EAAOif,OAAW,EAAJ3jC,EAAO,GAAI,IACjD,GAAI2yC,GAAYppB,GAAS,OAAOvpB,EAChCyxC,EAAIl2C,EAASyE,GAAKupB,CACpB,CACA,OAAOvpB,CACT,CAEA,SAAS40C,EAAWnD,EAAK/sB,EAAQnpB,EAAQN,GACvC,OAAO45C,EAAW3B,EAAYxuB,EAAQ+sB,EAAIx2C,OAASM,GAASk2C,EAAKl2C,EAAQN,EAC3E,CAEA,SAAS65C,EAAYrD,EAAK/sB,EAAQnpB,EAAQN,GACxC,OAAO45C,EAypCT,SAAuBllC,GAErB,IADA,IAAMsF,EAAY,GACTjV,EAAI,EAAGA,EAAI2P,EAAI1U,SAAU+E,EAEhCiV,EAAUhV,KAAyB,IAApB0P,EAAIolC,WAAW/0C,IAEhC,OAAOiV,CACT,CAhqCoB+/B,CAAatwB,GAAS+sB,EAAKl2C,EAAQN,EACvD,CAEA,SAASg6C,EAAaxD,EAAK/sB,EAAQnpB,EAAQN,GACzC,OAAO45C,EAAW1B,EAAczuB,GAAS+sB,EAAKl2C,EAAQN,EACxD,CAEA,SAASi6C,EAAWzD,EAAK/sB,EAAQnpB,EAAQN,GACvC,OAAO45C,EA0pCT,SAAyBllC,EAAKwlC,GAG5B,IAFA,IAAIja,EAAGka,EAAIl5C,EACL+Y,EAAY,GACTjV,EAAI,EAAGA,EAAI2P,EAAI1U,WACjBk6C,GAAS,GAAK,KADan1C,EAIhCo1C,GADAla,EAAIvrB,EAAIolC,WAAW/0C,KACT,EACV9D,EAAKg/B,EAAI,IACTjmB,EAAUhV,KAAK/D,GACf+Y,EAAUhV,KAAKm1C,GAGjB,OAAOngC,CACT,CAxqCoBogC,CAAe3wB,EAAQ+sB,EAAIx2C,OAASM,GAASk2C,EAAKl2C,EAAQN,EAC9E,CA8EA,SAASy4C,EAAajC,EAAKvtC,EAAOwjC,GAChC,OAAc,IAAVxjC,GAAewjC,IAAQ+J,EAAIx2C,OACtBi2C,EAAOoE,cAAc7D,GAErBP,EAAOoE,cAAc7D,EAAIntC,MAAMJ,EAAOwjC,GAEjD,CAEA,SAAS6L,EAAW9B,EAAKvtC,EAAOwjC,GAC9BA,EAAMlrC,KAAKkM,IAAI+oC,EAAIx2C,OAAQysC,GAI3B,IAHA,IAAM9S,EAAM,GAER50B,EAAIkE,EACDlE,EAAI0nC,GAAK,CACd,IAAM6N,EAAY9D,EAAIzxC,GAClBw1C,EAAY,KACZC,EAAoBF,EAAY,IAChC,EACCA,EAAY,IACT,EACCA,EAAY,IACT,EACA,EAEZ,GAAIv1C,EAAIy1C,GAAoB/N,EAAK,CAC/B,IAAIgO,OAAU,EAAEC,OAAS,EAAEC,OAAU,EAAEC,OAAa,EAEpD,OAAQJ,GACN,KAAK,EACCF,EAAY,MACdC,EAAYD,GAEd,MACF,KAAK,EAEyB,OAAV,KADlBG,EAAajE,EAAIzxC,EAAI,OAEnB61C,GAA6B,GAAZN,IAAqB,EAAoB,GAAbG,GACzB,MAClBF,EAAYK,GAGhB,MACF,KAAK,EACHH,EAAajE,EAAIzxC,EAAI,GACrB21C,EAAYlE,EAAIzxC,EAAI,GACQ,OAAV,IAAb01C,IAAsD,OAAV,IAAZC,KACnCE,GAA6B,GAAZN,IAAoB,IAAoB,GAAbG,IAAsB,EAAmB,GAAZC,GACrD,OAAUE,EAAgB,OAAUA,EAAgB,SACtEL,EAAYK,GAGhB,MACF,KAAK,EACHH,EAAajE,EAAIzxC,EAAI,GACrB21C,EAAYlE,EAAIzxC,EAAI,GACpB41C,EAAanE,EAAIzxC,EAAI,GACO,OAAV,IAAb01C,IAAsD,OAAV,IAAZC,IAAsD,OAAV,IAAbC,KAClEC,GAA6B,GAAZN,IAAoB,IAAqB,GAAbG,IAAsB,IAAmB,GAAZC,IAAqB,EAAoB,GAAbC,GAClF,OAAUC,EAAgB,UAC5CL,EAAYK,GAItB,CAEkB,OAAdL,GAGFA,EAAY,MACZC,EAAmB,GACVD,EAAY,QAErBA,GAAa,MACb5gB,EAAI30B,KAAKu1C,IAAc,GAAK,KAAQ,OACpCA,EAAY,MAAqB,KAAZA,GAGvB5gB,EAAI30B,KAAKu1C,GACTx1C,GAAKy1C,CACP,CAEA,OAQF,SAAgCK,GAC9B,IAAMvtC,EAAMutC,EAAW76C,OACvB,GAAIsN,GAAOwtC,EACT,OAAOpxC,OAAOqxC,aAAaC,MAAMtxC,OAAQmxC,GAI3C,IAAIlhB,EAAM,GACN50B,EAAI,EACR,KAAOA,EAAIuI,GACTqsB,GAAOjwB,OAAOqxC,aAAaC,MACzBtxC,OACAmxC,EAAWxxC,MAAMtE,EAAGA,GAAK+1C,IAG7B,OAAOnhB,CACT,CAxBSshB,CAAsBthB,EAC/B,CA39BA/pB,EAAOsrC,oBAUP,WAEE,IACE,IAAMvrC,EAAM,IAAIlQ,WAAW,GACrB07C,EAAQ,CAAEC,IAAK,WAAc,OAAO,EAAG,GAG7C,OAFA36C,OAAOg2C,eAAe0E,EAAO17C,WAAWmB,WACxCH,OAAOg2C,eAAe9mC,EAAKwrC,GACN,KAAdxrC,EAAIyrC,KAGb,CAFE,MAAOx1C,GACP,OAAO,CACT,CACF,CArB6By1C,GAExBzrC,EAAOsrC,qBAA0C,qBAAZp9B,SACb,oBAAlBA,QAAQ4H,OACjB5H,QAAQ4H,MACN,iJAkBJjlB,OAAO+R,eAAe5C,EAAOhP,UAAW,SAAU,CAChD06C,YAAY,EACZnoC,IAAK,WACH,GAAKvD,EAAO4nC,SAASpqC,MACrB,OAAOA,KAAKtN,MACd,IAGFW,OAAO+R,eAAe5C,EAAOhP,UAAW,SAAU,CAChD06C,YAAY,EACZnoC,IAAK,WACH,GAAKvD,EAAO4nC,SAASpqC,MACrB,OAAOA,KAAKrN,UACd,IAoCF6P,EAAO2rC,SAAW,KA8DlB3rC,EAAO/P,KAAO,SAAUwI,EAAOquC,EAAkB12C,GAC/C,OAAOH,EAAKwI,EAAOquC,EAAkB12C,EACvC,EAIAS,OAAOg2C,eAAe7mC,EAAOhP,UAAWnB,WAAWmB,WACnDH,OAAOg2C,eAAe7mC,EAAQnQ,YA8B9BmQ,EAAOgF,MAAQ,SAAUO,EAAMjI,EAAMmvB,GACnC,OArBF,SAAgBlnB,EAAMjI,EAAMmvB,GAE1B,OADAwb,EAAW1iC,GACPA,GAAQ,EACHohC,EAAaphC,QAETzP,IAATwH,EAIyB,kBAAbmvB,EACVka,EAAaphC,GAAMjI,KAAKA,EAAMmvB,GAC9Bka,EAAaphC,GAAMjI,KAAKA,GAEvBqpC,EAAaphC,EACtB,CAOSP,CAAMO,EAAMjI,EAAMmvB,EAC3B,EAUAzsB,EAAO+mC,YAAc,SAAUxhC,GAC7B,OAAOwhC,EAAYxhC,EACrB,EAIAvF,EAAO4rC,gBAAkB,SAAUrmC,GACjC,OAAOwhC,EAAYxhC,EACrB,EA6GAvF,EAAO4nC,SAAW,SAAmBh4C,GACnC,OAAY,MAALA,IAA6B,IAAhBA,EAAEi8C,WACpBj8C,IAAMoQ,EAAOhP,SACjB,EAEAgP,EAAO8rC,QAAU,SAAkBC,EAAGn8C,GAGpC,GAFI03C,GAAWyE,EAAGl8C,cAAak8C,EAAI/rC,EAAO/P,KAAK87C,EAAGA,EAAEr7C,OAAQq7C,EAAE9rC,aAC1DqnC,GAAW13C,EAAGC,cAAaD,EAAIoQ,EAAO/P,KAAKL,EAAGA,EAAEc,OAAQd,EAAEqQ,cACzDD,EAAO4nC,SAASmE,KAAO/rC,EAAO4nC,SAASh4C,GAC1C,MAAM,IAAIE,UACR,yEAIJ,GAAIi8C,IAAMn8C,EAAG,OAAO,EAKpB,IAHA,IAAIqL,EAAI8wC,EAAE37C,OACN8K,EAAItL,EAAEQ,OAED+E,EAAI,EAAGuI,EAAM/L,KAAKkM,IAAI5C,EAAGC,GAAI/F,EAAIuI,IAAOvI,EAC/C,GAAI42C,EAAE52C,KAAOvF,EAAEuF,GAAI,CACjB8F,EAAI8wC,EAAE52C,GACN+F,EAAItL,EAAEuF,GACN,KACF,CAGF,OAAI8F,EAAIC,GAAW,EACfA,EAAID,EAAU,EACX,CACT,EAEA+E,EAAOgnC,WAAa,SAAqBva,GACvC,OAAQ3yB,OAAO2yB,GAAU8b,eACvB,IAAK,MACL,IAAK,OACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAO,EACT,QACE,OAAO,EAEb,EAEAvoC,EAAOmC,OAAS,SAAiB6pC,EAAM57C,GACrC,IAAKuF,MAAMC,QAAQo2C,GACjB,MAAM,IAAIl8C,UAAU,+CAGtB,GAAoB,IAAhBk8C,EAAK57C,OACP,OAAO4P,EAAOgF,MAAM,GAGtB,IAAI7P,EACJ,QAAeW,IAAX1F,EAEF,IADAA,EAAS,EACJ+E,EAAI,EAAGA,EAAI62C,EAAK57C,SAAU+E,EAC7B/E,GAAU47C,EAAK72C,GAAG/E,OAItB,IAAMF,EAAS8P,EAAO+mC,YAAY32C,GAC9B+L,EAAM,EACV,IAAKhH,EAAI,EAAGA,EAAI62C,EAAK57C,SAAU+E,EAAG,CAChC,IAAIyxC,EAAMoF,EAAK72C,GACf,GAAImyC,GAAWV,EAAK/2C,YACdsM,EAAMyqC,EAAIx2C,OAASF,EAAOE,QACvB4P,EAAO4nC,SAAShB,KAAMA,EAAM5mC,EAAO/P,KAAK22C,IAC7CA,EAAI5sC,KAAK9J,EAAQiM,IAEjBtM,WAAWmB,UAAUkN,IAAIvG,KACvBzH,EACA02C,EACAzqC,OAGC,KAAK6D,EAAO4nC,SAAShB,GAC1B,MAAM,IAAI92C,UAAU,+CAEpB82C,EAAI5sC,KAAK9J,EAAQiM,EACnB,CACAA,GAAOyqC,EAAIx2C,MACb,CACA,OAAOF,CACT,EAiDA8P,EAAOC,WAAaA,EA8EpBD,EAAOhP,UAAU66C,WAAY,EAQ7B7rC,EAAOhP,UAAUi7C,OAAS,WACxB,IAAMvuC,EAAMF,KAAKpN,OACjB,GAAIsN,EAAM,IAAM,EACd,MAAM,IAAI/M,WAAW,6CAEvB,IAAK,IAAIwE,EAAI,EAAGA,EAAIuI,EAAKvI,GAAK,EAC5B4zC,EAAKvrC,KAAMrI,EAAGA,EAAI,GAEpB,OAAOqI,IACT,EAEAwC,EAAOhP,UAAUk7C,OAAS,WACxB,IAAMxuC,EAAMF,KAAKpN,OACjB,GAAIsN,EAAM,IAAM,EACd,MAAM,IAAI/M,WAAW,6CAEvB,IAAK,IAAIwE,EAAI,EAAGA,EAAIuI,EAAKvI,GAAK,EAC5B4zC,EAAKvrC,KAAMrI,EAAGA,EAAI,GAClB4zC,EAAKvrC,KAAMrI,EAAI,EAAGA,EAAI,GAExB,OAAOqI,IACT,EAEAwC,EAAOhP,UAAUm7C,OAAS,WACxB,IAAMzuC,EAAMF,KAAKpN,OACjB,GAAIsN,EAAM,IAAM,EACd,MAAM,IAAI/M,WAAW,6CAEvB,IAAK,IAAIwE,EAAI,EAAGA,EAAIuI,EAAKvI,GAAK,EAC5B4zC,EAAKvrC,KAAMrI,EAAGA,EAAI,GAClB4zC,EAAKvrC,KAAMrI,EAAI,EAAGA,EAAI,GACtB4zC,EAAKvrC,KAAMrI,EAAI,EAAGA,EAAI,GACtB4zC,EAAKvrC,KAAMrI,EAAI,EAAGA,EAAI,GAExB,OAAOqI,IACT,EAEAwC,EAAOhP,UAAU4I,SAAW,WAC1B,IAAMxJ,EAASoN,KAAKpN,OACpB,OAAe,IAAXA,EAAqB,GACA,IAArB+3C,UAAU/3C,OAAqBs4C,EAAUlrC,KAAM,EAAGpN,GAC/Co4C,EAAa4C,MAAM5tC,KAAM2qC,UAClC,EAEAnoC,EAAOhP,UAAUo7C,eAAiBpsC,EAAOhP,UAAU4I,SAEnDoG,EAAOhP,UAAUiQ,OAAS,SAAiBrR,GACzC,IAAKoQ,EAAO4nC,SAASh4C,GAAI,MAAM,IAAIE,UAAU,6BAC7C,OAAI0N,OAAS5N,GACsB,IAA5BoQ,EAAO8rC,QAAQtuC,KAAM5N,EAC9B,EAEAoQ,EAAOhP,UAAUq7C,QAAU,WACzB,IAAIvnC,EAAM,GACJgS,EAAM1c,EAAQ,GAGpB,OAFA0K,EAAMtH,KAAK5D,SAAS,MAAO,EAAGkd,GAAKw1B,QAAQ,UAAW,OAAOC,OACzD/uC,KAAKpN,OAAS0mB,IAAKhS,GAAO,SACvB,WAAaA,EAAM,GAC5B,EACI0hC,IACFxmC,EAAOhP,UAAUw1C,GAAuBxmC,EAAOhP,UAAUq7C,SAG3DrsC,EAAOhP,UAAU86C,QAAU,SAAkBU,EAAQnzC,EAAOwjC,EAAK4P,EAAWC,GAI1E,GAHIpF,GAAWkF,EAAQ38C,cACrB28C,EAASxsC,EAAO/P,KAAKu8C,EAAQA,EAAO97C,OAAQ87C,EAAOvsC,cAEhDD,EAAO4nC,SAAS4E,GACnB,MAAM,IAAI18C,UACR,wFAC2B08C,GAiB/B,QAbc12C,IAAVuD,IACFA,EAAQ,QAEEvD,IAAR+mC,IACFA,EAAM2P,EAASA,EAAOp8C,OAAS,QAEf0F,IAAd22C,IACFA,EAAY,QAEE32C,IAAZ42C,IACFA,EAAUlvC,KAAKpN,QAGbiJ,EAAQ,GAAKwjC,EAAM2P,EAAOp8C,QAAUq8C,EAAY,GAAKC,EAAUlvC,KAAKpN,OACtE,MAAM,IAAIO,WAAW,sBAGvB,GAAI87C,GAAaC,GAAWrzC,GAASwjC,EACnC,OAAO,EAET,GAAI4P,GAAaC,EACf,OAAQ,EAEV,GAAIrzC,GAASwjC,EACX,OAAO,EAQT,GAAIr/B,OAASgvC,EAAQ,OAAO,EAS5B,IAPA,IAAIvxC,GAJJyxC,KAAa,IADbD,KAAe,GAMXvxC,GAPJ2hC,KAAS,IADTxjC,KAAW,GASLqE,EAAM/L,KAAKkM,IAAI5C,EAAGC,GAElByxC,EAAWnvC,KAAK/D,MAAMgzC,EAAWC,GACjCE,EAAaJ,EAAO/yC,MAAMJ,EAAOwjC,GAE9B1nC,EAAI,EAAGA,EAAIuI,IAAOvI,EACzB,GAAIw3C,EAASx3C,KAAOy3C,EAAWz3C,GAAI,CACjC8F,EAAI0xC,EAASx3C,GACb+F,EAAI0xC,EAAWz3C,GACf,KACF,CAGF,OAAI8F,EAAIC,GAAW,EACfA,EAAID,EAAU,EACX,CACT,EA2HA+E,EAAOhP,UAAUqd,SAAW,SAAmBuI,EAAKzmB,EAAYs8B,GAC9D,OAAoD,IAA7CjvB,KAAKwR,QAAQ4H,EAAKzmB,EAAYs8B,EACvC,EAEAzsB,EAAOhP,UAAUge,QAAU,SAAkB4H,EAAKzmB,EAAYs8B,GAC5D,OAAOwc,EAAqBzrC,KAAMoZ,EAAKzmB,EAAYs8B,GAAU,EAC/D,EAEAzsB,EAAOhP,UAAUo4C,YAAc,SAAsBxyB,EAAKzmB,EAAYs8B,GACpE,OAAOwc,EAAqBzrC,KAAMoZ,EAAKzmB,EAAYs8B,GAAU,EAC/D,EA4CAzsB,EAAOhP,UAAU2I,MAAQ,SAAgBkgB,EAAQnpB,EAAQN,EAAQq8B,GAE/D,QAAe32B,IAAXpF,EACF+7B,EAAW,OACXr8B,EAASoN,KAAKpN,OACdM,EAAS,OAEJ,QAAeoF,IAAX1F,GAA0C,kBAAXM,EACxC+7B,EAAW/7B,EACXN,EAASoN,KAAKpN,OACdM,EAAS,MAEJ,KAAIumB,SAASvmB,GAUlB,MAAM,IAAIa,MACR,2EAVFb,KAAoB,EAChBumB,SAAS7mB,IACXA,KAAoB,OACH0F,IAAb22B,IAAwBA,EAAW,UAEvCA,EAAWr8B,EACXA,OAAS0F,EAMb,CAEA,IAAM+zC,EAAYrsC,KAAKpN,OAASM,EAGhC,SAFeoF,IAAX1F,GAAwBA,EAASy5C,KAAWz5C,EAASy5C,GAEpDhwB,EAAOzpB,OAAS,IAAMA,EAAS,GAAKM,EAAS,IAAOA,EAAS8M,KAAKpN,OACrE,MAAM,IAAIO,WAAW,0CAGlB87B,IAAUA,EAAW,QAG1B,IADA,IAAI2b,GAAc,IAEhB,OAAQ3b,GACN,IAAK,MACH,OAAOmd,EAASpsC,KAAMqc,EAAQnpB,EAAQN,GAExC,IAAK,OACL,IAAK,QACH,OAAO25C,EAAUvsC,KAAMqc,EAAQnpB,EAAQN,GAEzC,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAO65C,EAAWzsC,KAAMqc,EAAQnpB,EAAQN,GAE1C,IAAK,SAEH,OAAOg6C,EAAY5sC,KAAMqc,EAAQnpB,EAAQN,GAE3C,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOi6C,EAAU7sC,KAAMqc,EAAQnpB,EAAQN,GAEzC,QACE,GAAIg4C,EAAa,MAAM,IAAIt4C,UAAU,qBAAuB28B,GAC5DA,GAAY,GAAKA,GAAU8b,cAC3BH,GAAc,EAGtB,EAEApoC,EAAOhP,UAAUoQ,OAAS,WACxB,MAAO,CACL8D,KAAM,SACNzH,KAAM9H,MAAM3E,UAAUyI,MAAM9B,KAAK6F,KAAKqvC,MAAQrvC,KAAM,GAExD,EAyFA,IAAM0tC,EAAuB,KAoB7B,SAASvC,EAAY/B,EAAKvtC,EAAOwjC,GAC/B,IAAIiQ,EAAM,GACVjQ,EAAMlrC,KAAKkM,IAAI+oC,EAAIx2C,OAAQysC,GAE3B,IAAK,IAAI1nC,EAAIkE,EAAOlE,EAAI0nC,IAAO1nC,EAC7B23C,GAAOhzC,OAAOqxC,aAAsB,IAATvE,EAAIzxC,IAEjC,OAAO23C,CACT,CAEA,SAASlE,EAAahC,EAAKvtC,EAAOwjC,GAChC,IAAIiQ,EAAM,GACVjQ,EAAMlrC,KAAKkM,IAAI+oC,EAAIx2C,OAAQysC,GAE3B,IAAK,IAAI1nC,EAAIkE,EAAOlE,EAAI0nC,IAAO1nC,EAC7B23C,GAAOhzC,OAAOqxC,aAAavE,EAAIzxC,IAEjC,OAAO23C,CACT,CAEA,SAASrE,EAAU7B,EAAKvtC,EAAOwjC,GAC7B,IAAMn/B,EAAMkpC,EAAIx2C,SAEXiJ,GAASA,EAAQ,KAAGA,EAAQ,KAC5BwjC,GAAOA,EAAM,GAAKA,EAAMn/B,KAAKm/B,EAAMn/B,GAGxC,IADA,IAAIK,EAAM,GACD5I,EAAIkE,EAAOlE,EAAI0nC,IAAO1nC,EAC7B4I,GAAOgvC,GAAoBnG,EAAIzxC,IAEjC,OAAO4I,CACT,CAEA,SAAS+qC,EAAclC,EAAKvtC,EAAOwjC,GAIjC,IAHA,IAAMx+B,EAAQuoC,EAAIntC,MAAMJ,EAAOwjC,GAC3B9S,EAAM,GAED50B,EAAI,EAAGA,EAAIkJ,EAAMjO,OAAS,EAAG+E,GAAK,EACzC40B,GAAOjwB,OAAOqxC,aAAa9sC,EAAMlJ,GAAqB,IAAfkJ,EAAMlJ,EAAI,IAEnD,OAAO40B,CACT,CAiCA,SAASijB,EAAat8C,EAAQu8C,EAAK78C,GACjC,GAAKM,EAAS,IAAO,GAAKA,EAAS,EAAG,MAAM,IAAIC,WAAW,sBAC3D,GAAID,EAASu8C,EAAM78C,EAAQ,MAAM,IAAIO,WAAW,wCAClD,CAyQA,SAASu8C,EAAUtG,EAAKnuC,EAAO/H,EAAQu8C,EAAKn2B,EAAKjZ,GAC/C,IAAKmC,EAAO4nC,SAAShB,GAAM,MAAM,IAAI92C,UAAU,+CAC/C,GAAI2I,EAAQqe,GAAOre,EAAQoF,EAAK,MAAM,IAAIlN,WAAW,qCACrD,GAAID,EAASu8C,EAAMrG,EAAIx2C,OAAQ,MAAM,IAAIO,WAAW,qBACtD,CA+FA,SAASw8C,EAAgBvG,EAAKnuC,EAAO/H,EAAQmN,EAAKiZ,GAChDs2B,EAAW30C,EAAOoF,EAAKiZ,EAAK8vB,EAAKl2C,EAAQ,GAEzC,IAAIW,EAAKb,OAAOiI,EAAQgC,OAAO,aAC/BmsC,EAAIl2C,KAAYW,EAChBA,IAAW,EACXu1C,EAAIl2C,KAAYW,EAChBA,IAAW,EACXu1C,EAAIl2C,KAAYW,EAChBA,IAAW,EACXu1C,EAAIl2C,KAAYW,EAChB,IAAIk5C,EAAK/5C,OAAOiI,GAASgC,OAAO,IAAMA,OAAO,aAQ7C,OAPAmsC,EAAIl2C,KAAY65C,EAChBA,IAAW,EACX3D,EAAIl2C,KAAY65C,EAChBA,IAAW,EACX3D,EAAIl2C,KAAY65C,EAChBA,IAAW,EACX3D,EAAIl2C,KAAY65C,EACT75C,CACT,CAEA,SAAS28C,EAAgBzG,EAAKnuC,EAAO/H,EAAQmN,EAAKiZ,GAChDs2B,EAAW30C,EAAOoF,EAAKiZ,EAAK8vB,EAAKl2C,EAAQ,GAEzC,IAAIW,EAAKb,OAAOiI,EAAQgC,OAAO,aAC/BmsC,EAAIl2C,EAAS,GAAKW,EAClBA,IAAW,EACXu1C,EAAIl2C,EAAS,GAAKW,EAClBA,IAAW,EACXu1C,EAAIl2C,EAAS,GAAKW,EAClBA,IAAW,EACXu1C,EAAIl2C,EAAS,GAAKW,EAClB,IAAIk5C,EAAK/5C,OAAOiI,GAASgC,OAAO,IAAMA,OAAO,aAQ7C,OAPAmsC,EAAIl2C,EAAS,GAAK65C,EAClBA,IAAW,EACX3D,EAAIl2C,EAAS,GAAK65C,EAClBA,IAAW,EACX3D,EAAIl2C,EAAS,GAAK65C,EAClBA,IAAW,EACX3D,EAAIl2C,GAAU65C,EACP75C,EAAS,CAClB,CAkHA,SAAS48C,EAAc1G,EAAKnuC,EAAO/H,EAAQu8C,EAAKn2B,EAAKjZ,GACnD,GAAInN,EAASu8C,EAAMrG,EAAIx2C,OAAQ,MAAM,IAAIO,WAAW,sBACpD,GAAID,EAAS,EAAG,MAAM,IAAIC,WAAW,qBACvC,CAEA,SAAS48C,EAAY3G,EAAKnuC,EAAO/H,EAAQ88C,EAAcC,GAOrD,OANAh1C,GAASA,EACT/H,KAAoB,EACf+8C,GACHH,EAAa1G,EAAKnuC,EAAO/H,EAAQ,GAEnC61C,EAAQ5sC,MAAMitC,EAAKnuC,EAAO/H,EAAQ88C,EAAc,GAAI,GAC7C98C,EAAS,CAClB,CAUA,SAASg9C,EAAa9G,EAAKnuC,EAAO/H,EAAQ88C,EAAcC,GAOtD,OANAh1C,GAASA,EACT/H,KAAoB,EACf+8C,GACHH,EAAa1G,EAAKnuC,EAAO/H,EAAQ,GAEnC61C,EAAQ5sC,MAAMitC,EAAKnuC,EAAO/H,EAAQ88C,EAAc,GAAI,GAC7C98C,EAAS,CAClB,CAzkBAsP,EAAOhP,UAAUyI,MAAQ,SAAgBJ,EAAOwjC,GAC9C,IAAMn/B,EAAMF,KAAKpN,QACjBiJ,IAAUA,GAGE,GACVA,GAASqE,GACG,IAAGrE,EAAQ,GACdA,EAAQqE,IACjBrE,EAAQqE,IANVm/B,OAAc/mC,IAAR+mC,EAAoBn/B,IAAQm/B,GASxB,GACRA,GAAOn/B,GACG,IAAGm/B,EAAM,GACVA,EAAMn/B,IACfm/B,EAAMn/B,GAGJm/B,EAAMxjC,IAAOwjC,EAAMxjC,GAEvB,IAAMs0C,EAASnwC,KAAKW,SAAS9E,EAAOwjC,GAIpC,OAFAhsC,OAAOg2C,eAAe8G,EAAQ3tC,EAAOhP,WAE9B28C,CACT,EAUA3tC,EAAOhP,UAAU48C,WACjB5tC,EAAOhP,UAAUoB,WAAa,SAAqB1B,EAAQuP,EAAYwtC,GACrE/8C,KAAoB,EACpBuP,KAA4B,EACvBwtC,GAAUT,EAAYt8C,EAAQuP,EAAYzC,KAAKpN,QAKpD,IAHA,IAAIwmB,EAAMpZ,KAAK9M,GACXm9C,EAAM,EACN14C,EAAI,IACCA,EAAI8K,IAAe4tC,GAAO,MACjCj3B,GAAOpZ,KAAK9M,EAASyE,GAAK04C,EAG5B,OAAOj3B,CACT,EAEA5W,EAAOhP,UAAU88C,WACjB9tC,EAAOhP,UAAUsB,WAAa,SAAqB5B,EAAQuP,EAAYwtC,GACrE/8C,KAAoB,EACpBuP,KAA4B,EACvBwtC,GACHT,EAAYt8C,EAAQuP,EAAYzC,KAAKpN,QAKvC,IAFA,IAAIwmB,EAAMpZ,KAAK9M,IAAWuP,GACtB4tC,EAAM,EACH5tC,EAAa,IAAM4tC,GAAO,MAC/Bj3B,GAAOpZ,KAAK9M,IAAWuP,GAAc4tC,EAGvC,OAAOj3B,CACT,EAEA5W,EAAOhP,UAAU+8C,UACjB/tC,EAAOhP,UAAUg9C,UAAY,SAAoBt9C,EAAQ+8C,GAGvD,OAFA/8C,KAAoB,EACf+8C,GAAUT,EAAYt8C,EAAQ,EAAG8M,KAAKpN,QACpCoN,KAAK9M,EACd,EAEAsP,EAAOhP,UAAUi9C,aACjBjuC,EAAOhP,UAAUk9C,aAAe,SAAuBx9C,EAAQ+8C,GAG7D,OAFA/8C,KAAoB,EACf+8C,GAAUT,EAAYt8C,EAAQ,EAAG8M,KAAKpN,QACpCoN,KAAK9M,GAAW8M,KAAK9M,EAAS,IAAM,CAC7C,EAEAsP,EAAOhP,UAAUm9C,aACjBnuC,EAAOhP,UAAUy4C,aAAe,SAAuB/4C,EAAQ+8C,GAG7D,OAFA/8C,KAAoB,EACf+8C,GAAUT,EAAYt8C,EAAQ,EAAG8M,KAAKpN,QACnCoN,KAAK9M,IAAW,EAAK8M,KAAK9M,EAAS,EAC7C,EAEAsP,EAAOhP,UAAUo9C,aACjBpuC,EAAOhP,UAAUqC,aAAe,SAAuB3C,EAAQ+8C,GAI7D,OAHA/8C,KAAoB,EACf+8C,GAAUT,EAAYt8C,EAAQ,EAAG8M,KAAKpN,SAElCoN,KAAK9M,GACT8M,KAAK9M,EAAS,IAAM,EACpB8M,KAAK9M,EAAS,IAAM,IACD,SAAnB8M,KAAK9M,EAAS,EACrB,EAEAsP,EAAOhP,UAAUq9C,aACjBruC,EAAOhP,UAAUyC,aAAe,SAAuB/C,EAAQ+8C,GAI7D,OAHA/8C,KAAoB,EACf+8C,GAAUT,EAAYt8C,EAAQ,EAAG8M,KAAKpN,QAEpB,SAAfoN,KAAK9M,IACT8M,KAAK9M,EAAS,IAAM,GACrB8M,KAAK9M,EAAS,IAAM,EACrB8M,KAAK9M,EAAS,GAClB,EAEAsP,EAAOhP,UAAUs9C,gBAAkBC,IAAmB,SAA0B79C,GAE9E89C,EADA99C,KAAoB,EACG,UACvB,IAAM+9C,EAAQjxC,KAAK9M,GACbg+C,EAAOlxC,KAAK9M,EAAS,QACboF,IAAV24C,QAAgC34C,IAAT44C,GACzBC,EAAYj+C,EAAQ8M,KAAKpN,OAAS,GAGpC,IAAMiB,EAAKo9C,EACTjxC,OAAO9M,GAAU,KAAH,IAAG,EAAK,GACtB8M,OAAO9M,GAAU,KAAH,IAAG,EAAK,IACtB8M,OAAO9M,GAAU,KAAH,IAAG,EAAK,IAElB65C,EAAK/sC,OAAO9M,GAChB8M,OAAO9M,GAAU,KAAH,IAAG,EAAK,GACtB8M,OAAO9M,GAAU,KAAH,IAAG,EAAK,IACtBg+C,EAAO,KAAH,IAAG,EAAK,IAEd,OAAOj0C,OAAOpJ,IAAOoJ,OAAO8vC,IAAO9vC,OAAO,IAC5C,IAEAuF,EAAOhP,UAAU49C,gBAAkBL,IAAmB,SAA0B79C,GAE9E89C,EADA99C,KAAoB,EACG,UACvB,IAAM+9C,EAAQjxC,KAAK9M,GACbg+C,EAAOlxC,KAAK9M,EAAS,QACboF,IAAV24C,QAAgC34C,IAAT44C,GACzBC,EAAYj+C,EAAQ8M,KAAKpN,OAAS,GAGpC,IAAMm6C,EAAKkE,EAAQ,KAAH,IAAG,EAAK,IACtBjxC,OAAO9M,GAAU,KAAH,IAAG,EAAK,IACtB8M,OAAO9M,GAAU,KAAH,IAAG,EAAK,GACtB8M,OAAO9M,GAEHW,EAAKmM,OAAO9M,GAAU,KAAH,IAAG,EAAK,IAC/B8M,OAAO9M,GAAU,KAAH,IAAG,EAAK,IACtB8M,OAAO9M,GAAU,KAAH,IAAG,EAAK,GACtBg+C,EAEF,OAAQj0C,OAAO8vC,IAAO9vC,OAAO,KAAOA,OAAOpJ,EAC7C,IAEA2O,EAAOhP,UAAUyB,UAAY,SAAoB/B,EAAQuP,EAAYwtC,GACnE/8C,KAAoB,EACpBuP,KAA4B,EACvBwtC,GAAUT,EAAYt8C,EAAQuP,EAAYzC,KAAKpN,QAKpD,IAHA,IAAIwmB,EAAMpZ,KAAK9M,GACXm9C,EAAM,EACN14C,EAAI,IACCA,EAAI8K,IAAe4tC,GAAO,MACjCj3B,GAAOpZ,KAAK9M,EAASyE,GAAK04C,EAM5B,OAFIj3B,IAFJi3B,GAAO,OAESj3B,GAAOjlB,KAAKoB,IAAI,EAAG,EAAIkN,IAEhC2W,CACT,EAEA5W,EAAOhP,UAAU4B,UAAY,SAAoBlC,EAAQuP,EAAYwtC,GACnE/8C,KAAoB,EACpBuP,KAA4B,EACvBwtC,GAAUT,EAAYt8C,EAAQuP,EAAYzC,KAAKpN,QAKpD,IAHA,IAAI+E,EAAI8K,EACJ4tC,EAAM,EACNj3B,EAAMpZ,KAAK9M,IAAWyE,GACnBA,EAAI,IAAM04C,GAAO,MACtBj3B,GAAOpZ,KAAK9M,IAAWyE,GAAK04C,EAM9B,OAFIj3B,IAFJi3B,GAAO,OAESj3B,GAAOjlB,KAAKoB,IAAI,EAAG,EAAIkN,IAEhC2W,CACT,EAEA5W,EAAOhP,UAAU69C,SAAW,SAAmBn+C,EAAQ+8C,GAGrD,OAFA/8C,KAAoB,EACf+8C,GAAUT,EAAYt8C,EAAQ,EAAG8M,KAAKpN,QACtB,IAAfoN,KAAK9M,IAC0B,GAA5B,IAAO8M,KAAK9M,GAAU,GADK8M,KAAK9M,EAE3C,EAEAsP,EAAOhP,UAAU89C,YAAc,SAAsBp+C,EAAQ+8C,GAC3D/8C,KAAoB,EACf+8C,GAAUT,EAAYt8C,EAAQ,EAAG8M,KAAKpN,QAC3C,IAAMwmB,EAAMpZ,KAAK9M,GAAW8M,KAAK9M,EAAS,IAAM,EAChD,OAAc,MAANkmB,EAAsB,WAANA,EAAmBA,CAC7C,EAEA5W,EAAOhP,UAAU+9C,YAAc,SAAsBr+C,EAAQ+8C,GAC3D/8C,KAAoB,EACf+8C,GAAUT,EAAYt8C,EAAQ,EAAG8M,KAAKpN,QAC3C,IAAMwmB,EAAMpZ,KAAK9M,EAAS,GAAM8M,KAAK9M,IAAW,EAChD,OAAc,MAANkmB,EAAsB,WAANA,EAAmBA,CAC7C,EAEA5W,EAAOhP,UAAU4C,YAAc,SAAsBlD,EAAQ+8C,GAI3D,OAHA/8C,KAAoB,EACf+8C,GAAUT,EAAYt8C,EAAQ,EAAG8M,KAAKpN,QAEnCoN,KAAK9M,GACV8M,KAAK9M,EAAS,IAAM,EACpB8M,KAAK9M,EAAS,IAAM,GACpB8M,KAAK9M,EAAS,IAAM,EACzB,EAEAsP,EAAOhP,UAAU+C,YAAc,SAAsBrD,EAAQ+8C,GAI3D,OAHA/8C,KAAoB,EACf+8C,GAAUT,EAAYt8C,EAAQ,EAAG8M,KAAKpN,QAEnCoN,KAAK9M,IAAW,GACrB8M,KAAK9M,EAAS,IAAM,GACpB8M,KAAK9M,EAAS,IAAM,EACpB8M,KAAK9M,EAAS,EACnB,EAEAsP,EAAOhP,UAAUg+C,eAAiBT,IAAmB,SAAyB79C,GAE5E89C,EADA99C,KAAoB,EACG,UACvB,IAAM+9C,EAAQjxC,KAAK9M,GACbg+C,EAAOlxC,KAAK9M,EAAS,QACboF,IAAV24C,QAAgC34C,IAAT44C,GACzBC,EAAYj+C,EAAQ8M,KAAKpN,OAAS,GAGpC,IAAMwmB,EAAMpZ,KAAK9M,EAAS,GACxB8M,KAAK9M,EAAS,GAAK,KAAH,IAAG,EAAK,GACxB8M,KAAK9M,EAAS,GAAK,KAAH,IAAG,EAAK,KACvBg+C,GAAQ,IAEX,OAAQj0C,OAAOmc,IAAQnc,OAAO,KAC5BA,OAAOg0C,EACPjxC,OAAO9M,GAAU,KAAH,IAAG,EAAK,GACtB8M,OAAO9M,GAAU,KAAH,IAAG,EAAK,IACtB8M,OAAO9M,GAAU,KAAH,IAAG,EAAK,IAC1B,IAEAsP,EAAOhP,UAAUi+C,eAAiBV,IAAmB,SAAyB79C,GAE5E89C,EADA99C,KAAoB,EACG,UACvB,IAAM+9C,EAAQjxC,KAAK9M,GACbg+C,EAAOlxC,KAAK9M,EAAS,QACboF,IAAV24C,QAAgC34C,IAAT44C,GACzBC,EAAYj+C,EAAQ8M,KAAKpN,OAAS,GAGpC,IAAMwmB,GAAO63B,GAAS,IACpBjxC,OAAO9M,GAAU,KAAH,IAAG,EAAK,IACtB8M,OAAO9M,GAAU,KAAH,IAAG,EAAK,GACtB8M,OAAO9M,GAET,OAAQ+J,OAAOmc,IAAQnc,OAAO,KAC5BA,OAAO+C,OAAO9M,GAAU,KAAH,IAAG,EAAK,IAC7B8M,OAAO9M,GAAU,KAAH,IAAG,EAAK,IACtB8M,OAAO9M,GAAU,KAAH,IAAG,EAAK,GACtBg+C,EACJ,IAEA1uC,EAAOhP,UAAUkD,YAAc,SAAsBxD,EAAQ+8C,GAG3D,OAFA/8C,KAAoB,EACf+8C,GAAUT,EAAYt8C,EAAQ,EAAG8M,KAAKpN,QACpCm2C,EAAQiD,KAAKhsC,KAAM9M,GAAQ,EAAM,GAAI,EAC9C,EAEAsP,EAAOhP,UAAUqD,YAAc,SAAsB3D,EAAQ+8C,GAG3D,OAFA/8C,KAAoB,EACf+8C,GAAUT,EAAYt8C,EAAQ,EAAG8M,KAAKpN,QACpCm2C,EAAQiD,KAAKhsC,KAAM9M,GAAQ,EAAO,GAAI,EAC/C,EAEAsP,EAAOhP,UAAUwD,aAAe,SAAuB9D,EAAQ+8C,GAG7D,OAFA/8C,KAAoB,EACf+8C,GAAUT,EAAYt8C,EAAQ,EAAG8M,KAAKpN,QACpCm2C,EAAQiD,KAAKhsC,KAAM9M,GAAQ,EAAM,GAAI,EAC9C,EAEAsP,EAAOhP,UAAU2D,aAAe,SAAuBjE,EAAQ+8C,GAG7D,OAFA/8C,KAAoB,EACf+8C,GAAUT,EAAYt8C,EAAQ,EAAG8M,KAAKpN,QACpCm2C,EAAQiD,KAAKhsC,KAAM9M,GAAQ,EAAO,GAAI,EAC/C,EAQAsP,EAAOhP,UAAUk+C,YACjBlvC,EAAOhP,UAAUqB,YAAc,SAAsBoG,EAAO/H,EAAQuP,EAAYwtC,IAC9Eh1C,GAASA,EACT/H,KAAoB,EACpBuP,KAA4B,EACvBwtC,IAEHP,EAAS1vC,KAAM/E,EAAO/H,EAAQuP,EADbtO,KAAKoB,IAAI,EAAG,EAAIkN,GAAc,EACK,GAGtD,IAAI4tC,EAAM,EACN14C,EAAI,EAER,IADAqI,KAAK9M,GAAkB,IAAR+H,IACNtD,EAAI8K,IAAe4tC,GAAO,MACjCrwC,KAAK9M,EAASyE,GAAMsD,EAAQo1C,EAAO,IAGrC,OAAOn9C,EAASuP,CAClB,EAEAD,EAAOhP,UAAUm+C,YACjBnvC,EAAOhP,UAAUuB,YAAc,SAAsBkG,EAAO/H,EAAQuP,EAAYwtC,IAC9Eh1C,GAASA,EACT/H,KAAoB,EACpBuP,KAA4B,EACvBwtC,IAEHP,EAAS1vC,KAAM/E,EAAO/H,EAAQuP,EADbtO,KAAKoB,IAAI,EAAG,EAAIkN,GAAc,EACK,GAGtD,IAAI9K,EAAI8K,EAAa,EACjB4tC,EAAM,EAEV,IADArwC,KAAK9M,EAASyE,GAAa,IAARsD,IACVtD,GAAK,IAAM04C,GAAO,MACzBrwC,KAAK9M,EAASyE,GAAMsD,EAAQo1C,EAAO,IAGrC,OAAOn9C,EAASuP,CAClB,EAEAD,EAAOhP,UAAUo+C,WACjBpvC,EAAOhP,UAAUq+C,WAAa,SAAqB52C,EAAO/H,EAAQ+8C,GAKhE,OAJAh1C,GAASA,EACT/H,KAAoB,EACf+8C,GAAUP,EAAS1vC,KAAM/E,EAAO/H,EAAQ,EAAG,IAAM,GACtD8M,KAAK9M,GAAmB,IAAR+H,EACT/H,EAAS,CAClB,EAEAsP,EAAOhP,UAAUs+C,cACjBtvC,EAAOhP,UAAUu+C,cAAgB,SAAwB92C,EAAO/H,EAAQ+8C,GAMtE,OALAh1C,GAASA,EACT/H,KAAoB,EACf+8C,GAAUP,EAAS1vC,KAAM/E,EAAO/H,EAAQ,EAAG,MAAQ,GACxD8M,KAAK9M,GAAmB,IAAR+H,EAChB+E,KAAK9M,EAAS,GAAM+H,IAAU,EACvB/H,EAAS,CAClB,EAEAsP,EAAOhP,UAAUw+C,cACjBxvC,EAAOhP,UAAUy+C,cAAgB,SAAwBh3C,EAAO/H,EAAQ+8C,GAMtE,OALAh1C,GAASA,EACT/H,KAAoB,EACf+8C,GAAUP,EAAS1vC,KAAM/E,EAAO/H,EAAQ,EAAG,MAAQ,GACxD8M,KAAK9M,GAAW+H,IAAU,EAC1B+E,KAAK9M,EAAS,GAAc,IAAR+H,EACb/H,EAAS,CAClB,EAEAsP,EAAOhP,UAAU0+C,cACjB1vC,EAAOhP,UAAUuC,cAAgB,SAAwBkF,EAAO/H,EAAQ+8C,GAQtE,OAPAh1C,GAASA,EACT/H,KAAoB,EACf+8C,GAAUP,EAAS1vC,KAAM/E,EAAO/H,EAAQ,EAAG,WAAY,GAC5D8M,KAAK9M,EAAS,GAAM+H,IAAU,GAC9B+E,KAAK9M,EAAS,GAAM+H,IAAU,GAC9B+E,KAAK9M,EAAS,GAAM+H,IAAU,EAC9B+E,KAAK9M,GAAmB,IAAR+H,EACT/H,EAAS,CAClB,EAEAsP,EAAOhP,UAAU2+C,cACjB3vC,EAAOhP,UAAU0C,cAAgB,SAAwB+E,EAAO/H,EAAQ+8C,GAQtE,OAPAh1C,GAASA,EACT/H,KAAoB,EACf+8C,GAAUP,EAAS1vC,KAAM/E,EAAO/H,EAAQ,EAAG,WAAY,GAC5D8M,KAAK9M,GAAW+H,IAAU,GAC1B+E,KAAK9M,EAAS,GAAM+H,IAAU,GAC9B+E,KAAK9M,EAAS,GAAM+H,IAAU,EAC9B+E,KAAK9M,EAAS,GAAc,IAAR+H,EACb/H,EAAS,CAClB,EA8CAsP,EAAOhP,UAAU4+C,iBAAmBrB,IAAmB,SAA2B91C,GAAmB,IAAZ/H,EAAS,UAAH,6CAAG,EAChG,OAAOy8C,EAAe3vC,KAAM/E,EAAO/H,EAAQ+J,OAAO,GAAIA,OAAO,sBAC/D,IAEAuF,EAAOhP,UAAU6+C,iBAAmBtB,IAAmB,SAA2B91C,GAAmB,IAAZ/H,EAAS,UAAH,6CAAG,EAChG,OAAO28C,EAAe7vC,KAAM/E,EAAO/H,EAAQ+J,OAAO,GAAIA,OAAO,sBAC/D,IAEAuF,EAAOhP,UAAU0B,WAAa,SAAqB+F,EAAO/H,EAAQuP,EAAYwtC,GAG5E,GAFAh1C,GAASA,EACT/H,KAAoB,GACf+8C,EAAU,CACb,IAAM9d,EAAQh+B,KAAKoB,IAAI,EAAI,EAAIkN,EAAc,GAE7CitC,EAAS1vC,KAAM/E,EAAO/H,EAAQuP,EAAY0vB,EAAQ,GAAIA,EACxD,CAEA,IAAIx6B,EAAI,EACJ04C,EAAM,EACNiC,EAAM,EAEV,IADAtyC,KAAK9M,GAAkB,IAAR+H,IACNtD,EAAI8K,IAAe4tC,GAAO,MAC7Bp1C,EAAQ,GAAa,IAARq3C,GAAsC,IAAzBtyC,KAAK9M,EAASyE,EAAI,KAC9C26C,EAAM,GAERtyC,KAAK9M,EAASyE,IAAOsD,EAAQo1C,GAAQ,GAAKiC,EAAM,IAGlD,OAAOp/C,EAASuP,CAClB,EAEAD,EAAOhP,UAAU6B,WAAa,SAAqB4F,EAAO/H,EAAQuP,EAAYwtC,GAG5E,GAFAh1C,GAASA,EACT/H,KAAoB,GACf+8C,EAAU,CACb,IAAM9d,EAAQh+B,KAAKoB,IAAI,EAAI,EAAIkN,EAAc,GAE7CitC,EAAS1vC,KAAM/E,EAAO/H,EAAQuP,EAAY0vB,EAAQ,GAAIA,EACxD,CAEA,IAAIx6B,EAAI8K,EAAa,EACjB4tC,EAAM,EACNiC,EAAM,EAEV,IADAtyC,KAAK9M,EAASyE,GAAa,IAARsD,IACVtD,GAAK,IAAM04C,GAAO,MACrBp1C,EAAQ,GAAa,IAARq3C,GAAsC,IAAzBtyC,KAAK9M,EAASyE,EAAI,KAC9C26C,EAAM,GAERtyC,KAAK9M,EAASyE,IAAOsD,EAAQo1C,GAAQ,GAAKiC,EAAM,IAGlD,OAAOp/C,EAASuP,CAClB,EAEAD,EAAOhP,UAAU++C,UAAY,SAAoBt3C,EAAO/H,EAAQ+8C,GAM9D,OALAh1C,GAASA,EACT/H,KAAoB,EACf+8C,GAAUP,EAAS1vC,KAAM/E,EAAO/H,EAAQ,EAAG,KAAO,KACnD+H,EAAQ,IAAGA,EAAQ,IAAOA,EAAQ,GACtC+E,KAAK9M,GAAmB,IAAR+H,EACT/H,EAAS,CAClB,EAEAsP,EAAOhP,UAAUg/C,aAAe,SAAuBv3C,EAAO/H,EAAQ+8C,GAMpE,OALAh1C,GAASA,EACT/H,KAAoB,EACf+8C,GAAUP,EAAS1vC,KAAM/E,EAAO/H,EAAQ,EAAG,OAAS,OACzD8M,KAAK9M,GAAmB,IAAR+H,EAChB+E,KAAK9M,EAAS,GAAM+H,IAAU,EACvB/H,EAAS,CAClB,EAEAsP,EAAOhP,UAAUi/C,aAAe,SAAuBx3C,EAAO/H,EAAQ+8C,GAMpE,OALAh1C,GAASA,EACT/H,KAAoB,EACf+8C,GAAUP,EAAS1vC,KAAM/E,EAAO/H,EAAQ,EAAG,OAAS,OACzD8M,KAAK9M,GAAW+H,IAAU,EAC1B+E,KAAK9M,EAAS,GAAc,IAAR+H,EACb/H,EAAS,CAClB,EAEAsP,EAAOhP,UAAU6C,aAAe,SAAuB4E,EAAO/H,EAAQ+8C,GAQpE,OAPAh1C,GAASA,EACT/H,KAAoB,EACf+8C,GAAUP,EAAS1vC,KAAM/E,EAAO/H,EAAQ,EAAG,YAAa,YAC7D8M,KAAK9M,GAAmB,IAAR+H,EAChB+E,KAAK9M,EAAS,GAAM+H,IAAU,EAC9B+E,KAAK9M,EAAS,GAAM+H,IAAU,GAC9B+E,KAAK9M,EAAS,GAAM+H,IAAU,GACvB/H,EAAS,CAClB,EAEAsP,EAAOhP,UAAUgD,aAAe,SAAuByE,EAAO/H,EAAQ+8C,GASpE,OARAh1C,GAASA,EACT/H,KAAoB,EACf+8C,GAAUP,EAAS1vC,KAAM/E,EAAO/H,EAAQ,EAAG,YAAa,YACzD+H,EAAQ,IAAGA,EAAQ,WAAaA,EAAQ,GAC5C+E,KAAK9M,GAAW+H,IAAU,GAC1B+E,KAAK9M,EAAS,GAAM+H,IAAU,GAC9B+E,KAAK9M,EAAS,GAAM+H,IAAU,EAC9B+E,KAAK9M,EAAS,GAAc,IAAR+H,EACb/H,EAAS,CAClB,EAEAsP,EAAOhP,UAAUk/C,gBAAkB3B,IAAmB,SAA0B91C,GAAmB,IAAZ/H,EAAS,UAAH,6CAAG,EAC9F,OAAOy8C,EAAe3vC,KAAM/E,EAAO/H,GAAS+J,OAAO,sBAAuBA,OAAO,sBACnF,IAEAuF,EAAOhP,UAAUm/C,gBAAkB5B,IAAmB,SAA0B91C,GAAmB,IAAZ/H,EAAS,UAAH,6CAAG,EAC9F,OAAO28C,EAAe7vC,KAAM/E,EAAO/H,GAAS+J,OAAO,sBAAuBA,OAAO,sBACnF,IAiBAuF,EAAOhP,UAAUmD,aAAe,SAAuBsE,EAAO/H,EAAQ+8C,GACpE,OAAOF,EAAW/vC,KAAM/E,EAAO/H,GAAQ,EAAM+8C,EAC/C,EAEAztC,EAAOhP,UAAUsD,aAAe,SAAuBmE,EAAO/H,EAAQ+8C,GACpE,OAAOF,EAAW/vC,KAAM/E,EAAO/H,GAAQ,EAAO+8C,EAChD,EAYAztC,EAAOhP,UAAUyD,cAAgB,SAAwBgE,EAAO/H,EAAQ+8C,GACtE,OAAOC,EAAYlwC,KAAM/E,EAAO/H,GAAQ,EAAM+8C,EAChD,EAEAztC,EAAOhP,UAAU4D,cAAgB,SAAwB6D,EAAO/H,EAAQ+8C,GACtE,OAAOC,EAAYlwC,KAAM/E,EAAO/H,GAAQ,EAAO+8C,EACjD,EAGAztC,EAAOhP,UAAUgJ,KAAO,SAAewyC,EAAQ4D,EAAa/2C,EAAOwjC,GACjE,IAAK78B,EAAO4nC,SAAS4E,GAAS,MAAM,IAAI18C,UAAU,+BAQlD,GAPKuJ,IAAOA,EAAQ,GACfwjC,GAAe,IAARA,IAAWA,EAAMr/B,KAAKpN,QAC9BggD,GAAe5D,EAAOp8C,SAAQggD,EAAc5D,EAAOp8C,QAClDggD,IAAaA,EAAc,GAC5BvT,EAAM,GAAKA,EAAMxjC,IAAOwjC,EAAMxjC,GAG9BwjC,IAAQxjC,EAAO,OAAO,EAC1B,GAAsB,IAAlBmzC,EAAOp8C,QAAgC,IAAhBoN,KAAKpN,OAAc,OAAO,EAGrD,GAAIggD,EAAc,EAChB,MAAM,IAAIz/C,WAAW,6BAEvB,GAAI0I,EAAQ,GAAKA,GAASmE,KAAKpN,OAAQ,MAAM,IAAIO,WAAW,sBAC5D,GAAIksC,EAAM,EAAG,MAAM,IAAIlsC,WAAW,2BAG9BksC,EAAMr/B,KAAKpN,SAAQysC,EAAMr/B,KAAKpN,QAC9Bo8C,EAAOp8C,OAASggD,EAAcvT,EAAMxjC,IACtCwjC,EAAM2P,EAAOp8C,OAASggD,EAAc/2C,GAGtC,IAAMqE,EAAMm/B,EAAMxjC,EAalB,OAXImE,OAASgvC,GAAqD,oBAApC38C,WAAWmB,UAAUq/C,WAEjD7yC,KAAK6yC,WAAWD,EAAa/2C,EAAOwjC,GAEpChtC,WAAWmB,UAAUkN,IAAIvG,KACvB60C,EACAhvC,KAAKW,SAAS9E,EAAOwjC,GACrBuT,GAIG1yC,CACT,EAMAsC,EAAOhP,UAAUsM,KAAO,SAAesZ,EAAKvd,EAAOwjC,EAAKpQ,GAEtD,GAAmB,kBAAR7V,EAAkB,CAS3B,GARqB,kBAAVvd,GACTozB,EAAWpzB,EACXA,EAAQ,EACRwjC,EAAMr/B,KAAKpN,QACa,kBAARysC,IAChBpQ,EAAWoQ,EACXA,EAAMr/B,KAAKpN,aAEI0F,IAAb22B,GAA8C,kBAAbA,EACnC,MAAM,IAAI38B,UAAU,6BAEtB,GAAwB,kBAAb28B,IAA0BzsB,EAAOgnC,WAAWva,GACrD,MAAM,IAAI38B,UAAU,qBAAuB28B,GAE7C,GAAmB,IAAf7V,EAAIxmB,OAAc,CACpB,IAAMooB,EAAO5B,EAAIszB,WAAW,IACV,SAAbzd,GAAuBjU,EAAO,KAClB,WAAbiU,KAEF7V,EAAM4B,EAEV,CACF,KAA0B,kBAAR5B,EAChBA,GAAY,IACY,mBAARA,IAChBA,EAAMpmB,OAAOomB,IAIf,GAAIvd,EAAQ,GAAKmE,KAAKpN,OAASiJ,GAASmE,KAAKpN,OAASysC,EACpD,MAAM,IAAIlsC,WAAW,sBAGvB,GAAIksC,GAAOxjC,EACT,OAAOmE,KAQT,IAAIrI,EACJ,GANAkE,KAAkB,EAClBwjC,OAAc/mC,IAAR+mC,EAAoBr/B,KAAKpN,OAASysC,IAAQ,EAE3CjmB,IAAKA,EAAM,GAGG,kBAARA,EACT,IAAKzhB,EAAIkE,EAAOlE,EAAI0nC,IAAO1nC,EACzBqI,KAAKrI,GAAKyhB,MAEP,CACL,IAAMvY,EAAQ2B,EAAO4nC,SAAShxB,GAC1BA,EACA5W,EAAO/P,KAAK2mB,EAAK6V,GACf/uB,EAAMW,EAAMjO,OAClB,GAAY,IAARsN,EACF,MAAM,IAAI5N,UAAU,cAAgB8mB,EAClC,qCAEJ,IAAKzhB,EAAI,EAAGA,EAAI0nC,EAAMxjC,IAASlE,EAC7BqI,KAAKrI,EAAIkE,GAASgF,EAAMlJ,EAAIuI,EAEhC,CAEA,OAAOF,IACT,EAMA,IAAM8yC,EAAS,CAAC,EAChB,SAASC,EAAGC,EAAKC,EAAYC,GAC3BJ,EAAOE,GAAI,8BACT,aAAe,MAeG,OAfH,UACb,eAEA3/C,OAAO+R,eAAe,EAAD,GAAO,UAAW,CACrCnK,MAAOg4C,EAAWrF,MAAM,EAAD,GAAOjD,WAC9B9kC,UAAU,EACVstC,cAAc,IAIhB,EAAKv/C,KAAO,GAAH,OAAM,EAAKA,KAAI,aAAKo/C,EAAG,KAGhC,EAAKI,aAEE,EAAKx/C,KAAI,CAClB,CAiBC,OAjBA,qBAED,WACE,OAAOo/C,CACT,EAAC,IAED,SAAU/3C,GACR5H,OAAO+R,eAAepF,KAAM,OAAQ,CAClCmzC,cAAc,EACdjF,YAAY,EACZjzC,MAAAA,EACA4K,UAAU,GAEd,GAAC,sBAED,WACE,MAAO,GAAP,OAAU7F,KAAKpM,KAAI,aAAKo/C,EAAG,cAAMhzC,KAAKoC,QACxC,KAAC,EAlCQ,CAA2B8wC,EAoCxC,CA+BA,SAASG,EAAuBj6B,GAI9B,IAHA,IAAImT,EAAM,GACN50B,EAAIyhB,EAAIxmB,OACNiJ,EAAmB,MAAXud,EAAI,GAAa,EAAI,EAC5BzhB,GAAKkE,EAAQ,EAAGlE,GAAK,EAC1B40B,EAAM,IAAH,OAAOnT,EAAInd,MAAMtE,EAAI,EAAGA,IAAE,OAAG40B,GAElC,MAAO,GAAP,OAAUnT,EAAInd,MAAM,EAAGtE,IAAE,OAAG40B,EAC9B,CAYA,SAASqjB,EAAY30C,EAAOoF,EAAKiZ,EAAK8vB,EAAKl2C,EAAQuP,GACjD,GAAIxH,EAAQqe,GAAOre,EAAQoF,EAAK,CAC9B,IACIyf,EADElG,EAAmB,kBAARvZ,EAAmB,IAAM,GAY1C,MARIyf,EAFArd,EAAa,EACH,IAARpC,GAAaA,IAAQpD,OAAO,GACtB,OAAH,OAAU2c,EAAC,mBAAWA,EAAC,eAA0B,GAAlBnX,EAAa,IAAM,OAAGmX,GAElD,gBAASA,EAAC,eAA0B,GAAlBnX,EAAa,GAAS,GAAC,OAAGmX,EAAC,2BACvB,GAAlBnX,EAAa,GAAS,GAAC,OAAGmX,GAGhC,MAAH,OAASvZ,GAAG,OAAGuZ,EAAC,mBAAWN,GAAG,OAAGM,GAElC,IAAIk5B,EAAOQ,iBAAiB,QAASxzB,EAAO7kB,EACpD,EAtBF,SAAsBmuC,EAAKl2C,EAAQuP,GACjCuuC,EAAe99C,EAAQ,eACHoF,IAAhB8wC,EAAIl2C,SAAsDoF,IAA7B8wC,EAAIl2C,EAASuP,IAC5C0uC,EAAYj+C,EAAQk2C,EAAIx2C,QAAU6P,EAAa,GAEnD,CAkBE8wC,CAAYnK,EAAKl2C,EAAQuP,EAC3B,CAEA,SAASuuC,EAAgB/1C,EAAOrH,GAC9B,GAAqB,kBAAVqH,EACT,MAAM,IAAI63C,EAAOU,qBAAqB5/C,EAAM,SAAUqH,EAE1D,CAEA,SAASk2C,EAAal2C,EAAOrI,EAAQ8U,GACnC,GAAIvT,KAAKC,MAAM6G,KAAWA,EAExB,MADA+1C,EAAe/1C,EAAOyM,GAChB,IAAIorC,EAAOQ,iBAAiB5rC,GAAQ,SAAU,aAAczM,GAGpE,GAAIrI,EAAS,EACX,MAAM,IAAIkgD,EAAOW,yBAGnB,MAAM,IAAIX,EAAOQ,iBAAiB5rC,GAAQ,SAAQ,aACVA,EAAO,EAAI,EAAC,mBAAW9U,GAC7BqI,EACpC,CAvFA83C,EAAE,4BACA,SAAUn/C,GACR,OAAIA,EACK,GAAP,OAAUA,EAAI,gCAGT,gDACT,GAAGT,YACL4/C,EAAE,wBACA,SAAUn/C,EAAM61C,GACd,MAAO,QAAP,OAAe71C,EAAI,mEAA2D61C,EAChF,GAAGn3C,WACLygD,EAAE,oBACA,SAAUzrC,EAAKwY,EAAO4zB,GACpB,IAAI/Y,EAAM,iBAAH,OAAoBrzB,EAAG,sBAC1BqsC,EAAWD,EAWf,OAVI1gD,OAAOC,UAAUygD,IAAUv/C,KAAKy/C,IAAIF,GAAS,KAAH,IAAG,EAAK,IACpDC,EAAWN,EAAsB/2C,OAAOo3C,IACd,kBAAVA,IAChBC,EAAWr3C,OAAOo3C,IACdA,EAAQ,KAAH,IAAGz2C,OAAO,GAAMA,OAAO,MAAOy2C,GAAS,KAAD,IAAEz2C,OAAO,GAAMA,OAAO,QACnE02C,EAAWN,EAAsBM,IAEnCA,GAAY,KAEdhZ,GAAO,eAAJ,OAAmB7a,EAAK,sBAAc6zB,EAE3C,GAAGxgD,YAiEL,IAAM0gD,EAAoB,oBAgB1B,SAAShJ,EAAaxuB,EAAQywB,GAE5B,IAAIK,EADJL,EAAQA,GAAS1f,IAMjB,IAJA,IAAMx6B,EAASypB,EAAOzpB,OAClBkhD,EAAgB,KACdjzC,EAAQ,GAELlJ,EAAI,EAAGA,EAAI/E,IAAU+E,EAAG,CAI/B,IAHAw1C,EAAY9wB,EAAOqwB,WAAW/0C,IAGd,OAAUw1C,EAAY,MAAQ,CAE5C,IAAK2G,EAAe,CAElB,GAAI3G,EAAY,MAAQ,EAEjBL,GAAS,IAAM,GAAGjsC,EAAMjJ,KAAK,IAAM,IAAM,KAC9C,QACF,CAAO,GAAID,EAAI,IAAM/E,EAAQ,EAEtBk6C,GAAS,IAAM,GAAGjsC,EAAMjJ,KAAK,IAAM,IAAM,KAC9C,QACF,CAGAk8C,EAAgB3G,EAEhB,QACF,CAGA,GAAIA,EAAY,MAAQ,EACjBL,GAAS,IAAM,GAAGjsC,EAAMjJ,KAAK,IAAM,IAAM,KAC9Ck8C,EAAgB3G,EAChB,QACF,CAGAA,EAAkE,OAArD2G,EAAgB,OAAU,GAAK3G,EAAY,MAC1D,MAAW2G,IAEJhH,GAAS,IAAM,GAAGjsC,EAAMjJ,KAAK,IAAM,IAAM,KAMhD,GAHAk8C,EAAgB,KAGZ3G,EAAY,IAAM,CACpB,IAAKL,GAAS,GAAK,EAAG,MACtBjsC,EAAMjJ,KAAKu1C,EACb,MAAO,GAAIA,EAAY,KAAO,CAC5B,IAAKL,GAAS,GAAK,EAAG,MACtBjsC,EAAMjJ,KACJu1C,GAAa,EAAM,IACP,GAAZA,EAAmB,IAEvB,MAAO,GAAIA,EAAY,MAAS,CAC9B,IAAKL,GAAS,GAAK,EAAG,MACtBjsC,EAAMjJ,KACJu1C,GAAa,GAAM,IACnBA,GAAa,EAAM,GAAO,IACd,GAAZA,EAAmB,IAEvB,KAAO,MAAIA,EAAY,SASrB,MAAM,IAAIp5C,MAAM,sBARhB,IAAK+4C,GAAS,GAAK,EAAG,MACtBjsC,EAAMjJ,KACJu1C,GAAa,GAAO,IACpBA,GAAa,GAAM,GAAO,IAC1BA,GAAa,EAAM,GAAO,IACd,GAAZA,EAAmB,IAIvB,CACF,CAEA,OAAOtsC,CACT,CA2BA,SAASiqC,EAAexjC,GACtB,OAAOuhC,EAAOkL,YAxHhB,SAAsBzsC,GAMpB,IAFAA,GAFAA,EAAMA,EAAIxR,MAAM,KAAK,IAEXi5C,OAAOD,QAAQ+E,EAAmB,KAEpCjhD,OAAS,EAAG,MAAO,GAE3B,KAAO0U,EAAI1U,OAAS,IAAM,GACxB0U,GAAY,IAEd,OAAOA,CACT,CA4G4B0sC,CAAY1sC,GACxC,CAEA,SAASklC,EAAYn4C,EAAK4/C,EAAK/gD,EAAQN,GACrC,IAAI+E,EACJ,IAAKA,EAAI,EAAGA,EAAI/E,KACT+E,EAAIzE,GAAU+gD,EAAIrhD,QAAY+E,GAAKtD,EAAIzB,UADpB+E,EAExBs8C,EAAIt8C,EAAIzE,GAAUmB,EAAIsD,GAExB,OAAOA,CACT,CAKA,SAASmyC,GAAY3wB,EAAKzR,GACxB,OAAOyR,aAAezR,GACZ,MAAPyR,GAAkC,MAAnBA,EAAI5lB,aAA+C,MAAxB4lB,EAAI5lB,YAAYK,MACzDulB,EAAI5lB,YAAYK,OAAS8T,EAAK9T,IACpC,CACA,SAAS02C,GAAanxB,GAEpB,OAAOA,IAAQA,CACjB,CAIA,IAAMo2B,GAAuB,WAG3B,IAFA,IAAM2E,EAAW,mBACXC,EAAQ,IAAIh8C,MAAM,KACfR,EAAI,EAAGA,EAAI,KAAMA,EAExB,IADA,IAAMy8C,EAAU,GAAJz8C,EACHiG,EAAI,EAAGA,EAAI,KAAMA,EACxBu2C,EAAMC,EAAMx2C,GAAKs2C,EAASv8C,GAAKu8C,EAASt2C,GAG5C,OAAOu2C,CACT,CAV6B,GAa7B,SAASpD,GAAoBsD,GAC3B,MAAyB,qBAAXp3C,OAAyBq3C,GAAyBD,CAClE,CAEA,SAASC,KACP,MAAM,IAAIvgD,MAAM,uBAClB,sCCljEA,IAAIwgD,EAAUzL,EAAAA,OAAAA,OA+Gd0L,EAAO53C,QA9GP,SAAe63C,GACb,GAAIA,EAAS7hD,QAAU,IAAO,MAAM,IAAIN,UAAU,qBAElD,IADA,IAAIoiD,EAAW,IAAIriD,WAAW,KACrBuL,EAAI,EAAGA,EAAI82C,EAAS9hD,OAAQgL,IACnC82C,EAAS92C,GAAK,IAEhB,IAAK,IAAIjG,EAAI,EAAGA,EAAI88C,EAAS7hD,OAAQ+E,IAAK,CACxC,IAAI8F,EAAIg3C,EAASE,OAAOh9C,GACpBi9C,EAAKn3C,EAAEivC,WAAW,GACtB,GAAqB,MAAjBgI,EAASE,GAAe,MAAM,IAAItiD,UAAUmL,EAAI,iBACpDi3C,EAASE,GAAMj9C,CACjB,CACA,IAAIk9C,EAAOJ,EAAS7hD,OAChBkiD,EAASL,EAASE,OAAO,GACzBI,EAAS5gD,KAAKq4B,IAAIqoB,GAAQ1gD,KAAKq4B,IAAI,KACnCwoB,EAAU7gD,KAAKq4B,IAAI,KAAOr4B,KAAKq4B,IAAIqoB,GAyCvC,SAASI,EAAcrwB,GACrB,GAAsB,kBAAXA,EAAuB,MAAM,IAAItyB,UAAU,mBACtD,GAAsB,IAAlBsyB,EAAOhyB,OAAgB,OAAO2hD,EAAQ/sC,MAAM,GAKhD,IAJA,IAAI0tC,EAAM,EAENC,EAAS,EACTviD,EAAS,EACNgyB,EAAOswB,KAASJ,GACrBK,IACAD,IAMF,IAHA,IAAIntC,GAAU6c,EAAOhyB,OAASsiD,GAAOH,EAAU,IAAO,EAClDK,EAAO,IAAI/iD,WAAW0V,GAEnB6c,EAAOswB,IAAM,CAElB,IAAIG,EAAQX,EAAS9vB,EAAO8nB,WAAWwI,IAEvC,GAAc,MAAVG,EAAiB,OAErB,IADA,IAAI19C,EAAI,EACC29C,EAAMvtC,EAAO,GAAc,IAAVstC,GAAe19C,EAAI/E,KAAqB,IAAT0iD,EAAaA,IAAO39C,IAC3E09C,GAAUR,EAAOO,EAAKE,KAAU,EAChCF,EAAKE,GAAQD,EAAQ,MAAS,EAC9BA,EAASA,EAAQ,MAAS,EAE5B,GAAc,IAAVA,EAAe,MAAM,IAAIthD,MAAM,kBACnCnB,EAAS+E,EACTu9C,GACF,CAGA,IADA,IAAIK,EAAMxtC,EAAOnV,EACV2iD,IAAQxtC,GAAsB,IAAdqtC,EAAKG,IAC1BA,IAEF,IAAIC,EAAMjB,EAAQhL,YAAY4L,GAAUptC,EAAOwtC,IAC/CC,EAAI11C,KAAK,EAAM,EAAGq1C,GAElB,IADA,IAAIv3C,EAAIu3C,EACDI,IAAQxtC,GACbytC,EAAI53C,KAAOw3C,EAAKG,KAElB,OAAOC,CACT,CAMA,MAAO,CACL7gD,OAzFF,SAAiBiwB,GAEf,IADIzsB,MAAMC,QAAQwsB,IAAWA,aAAkBvyB,cAAcuyB,EAAS2vB,EAAQ9hD,KAAKmyB,KAC9E2vB,EAAQnK,SAASxlB,GAAW,MAAM,IAAItyB,UAAU,mBACrD,GAAsB,IAAlBsyB,EAAOhyB,OAAgB,MAAO,GAMlC,IAJA,IAAIuiD,EAAS,EACTviD,EAAS,EACT6iD,EAAS,EACTC,EAAO9wB,EAAOhyB,OACX6iD,IAAWC,GAA2B,IAAnB9wB,EAAO6wB,IAC/BA,IACAN,IAMF,IAHA,IAAIptC,GAAS2tC,EAAOD,GAAUT,EAAU,IAAO,EAC3CW,EAAM,IAAItjD,WAAW0V,GAElB0tC,IAAWC,GAAM,CAItB,IAHA,IAAIL,EAAQzwB,EAAO6wB,GAEf99C,EAAI,EACCi+C,EAAM7tC,EAAO,GAAc,IAAVstC,GAAe19C,EAAI/E,KAAqB,IAATgjD,EAAaA,IAAOj+C,IAC3E09C,GAAU,IAAMM,EAAIC,KAAU,EAC9BD,EAAIC,GAAQP,EAAQR,IAAU,EAC9BQ,EAASA,EAAQR,IAAU,EAE7B,GAAc,IAAVQ,EAAe,MAAM,IAAIthD,MAAM,kBACnCnB,EAAS+E,EACT89C,GACF,CAGA,IADA,IAAII,EAAM9tC,EAAOnV,EACVijD,IAAQ9tC,GAAqB,IAAb4tC,EAAIE,IACzBA,IAIF,IADA,IAAIvuC,EAAMwtC,EAAOgB,OAAOX,GACjBU,EAAM9tC,IAAQ8tC,EAAOvuC,GAAOmtC,EAASE,OAAOgB,EAAIE,IACvD,OAAOvuC,CACT,EAmDE2tC,aAAcA,EACdvgD,OARF,SAAiB2nB,GACf,IAAI3pB,EAASuiD,EAAa54B,GAC1B,GAAI3pB,EAAU,OAAOA,EACrB,MAAM,IAAIqB,MAAM,WAAa8gD,EAAO,aACtC,EAMF,4DChGAj4C,EAAQ,GAZR,SAAoBwsC,GAEZ,IAAM2M,EAAWvzC,EAAO/P,KAAK22C,GAC7B2M,EAASC,UACT,IAAMC,EAAMF,EAAS35C,SAAS,OAC9B,OAAmB,IAAf65C,EAAIrjD,OACGqK,OAAO,GAEXA,OAAO,KAAD,OAAMg5C,GAG3B,EAkCAr5C,EAAQ,GAVR,SAAoBs5C,EAAKC,GAEjB,IAAMF,EAAMC,EAAI95C,SAAS,IACnB1J,EAAS8P,EAAO/P,KAAKwjD,EAAIG,SAAiB,EAARD,EAAW,KAAKl6C,MAAM,EAAW,EAARk6C,GAAY,OAE7E,OADAzjD,EAAOsjD,UACAtjD,CAIf,4DCrDa,wJACT2jD,EAAmBr2C,MAAQA,KAAKq2C,kBAAqBhjD,OAAOC,OAAU,SAASgjD,EAAG9K,EAAG+K,EAAGC,QAC7El+C,IAAPk+C,IAAkBA,EAAKD,GAC3BljD,OAAO+R,eAAekxC,EAAGE,EAAI,CAAEtI,YAAY,EAAMnoC,IAAK,WAAa,OAAOylC,EAAE+K,EAAI,GACpF,EAAM,SAASD,EAAG9K,EAAG+K,EAAGC,QACTl+C,IAAPk+C,IAAkBA,EAAKD,GAC3BD,EAAEE,GAAMhL,EAAE+K,EACd,GACIE,EAAsBz2C,MAAQA,KAAKy2C,qBAAwBpjD,OAAOC,OAAU,SAASgjD,EAAGv+C,GACxF1E,OAAO+R,eAAekxC,EAAG,UAAW,CAAEpI,YAAY,EAAMjzC,MAAOlD,GACnE,EAAK,SAASu+C,EAAGv+C,GACbu+C,EAAW,QAAIv+C,CACnB,GACI2+C,EAAc12C,MAAQA,KAAK02C,YAAe,SAAUC,EAAY3H,EAAQjrC,EAAK6yC,GAC7E,IAA2HC,EAAvHhkB,EAAI8X,UAAU/3C,OAAQkkD,EAAIjkB,EAAI,EAAImc,EAAkB,OAAT4H,EAAgBA,EAAOvjD,OAAO0jD,yBAAyB/H,EAAQjrC,GAAO6yC,EACrH,GAAuB,kBAAZI,SAAoD,oBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASN,EAAY3H,EAAQjrC,EAAK6yC,QACpH,IAAK,IAAIj/C,EAAIg/C,EAAW/jD,OAAS,EAAG+E,GAAK,EAAGA,KAASk/C,EAAIF,EAAWh/C,MAAIm/C,GAAKjkB,EAAI,EAAIgkB,EAAEC,GAAKjkB,EAAI,EAAIgkB,EAAE7H,EAAQjrC,EAAK+yC,GAAKD,EAAE7H,EAAQjrC,KAAS+yC,GAChJ,OAAOjkB,EAAI,GAAKikB,GAAKzjD,OAAO+R,eAAe4pC,EAAQjrC,EAAK+yC,GAAIA,CAChE,EACII,EAAgBl3C,MAAQA,KAAKk3C,cAAiB,SAAUC,GACxD,GAAIA,GAAOA,EAAIC,WAAY,OAAOD,EAClC,IAAIr6B,EAAS,CAAC,EACd,GAAW,MAAPq6B,EAAa,IAAK,IAAIZ,KAAKY,EAAe,YAANZ,GAAmBljD,OAAO6G,eAAeC,KAAKg9C,EAAKZ,IAAIF,EAAgBv5B,EAAQq6B,EAAKZ,GAE5H,OADAE,EAAmB35B,EAAQq6B,GACpBr6B,CACX,EACIu6B,EAAmBr3C,MAAQA,KAAKq3C,iBAAoB,SAAUF,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,EACxD,EACA9jD,OAAO+R,eAAexI,EAAS,aAAc,CAAE3B,OAAO,IACtD2B,EAAQmG,qBAAuBnG,EAAQkG,YAAclG,EAAQgG,UAAYhG,EAAQ06C,aAAe16C,EAAQ26C,aAAe36C,EAAQ46C,WAAa56C,EAAQ66C,WAAa76C,EAAQ86C,gBAAa,EACtL,IAAMC,EAAUN,EAAgBvO,EAAQ,QAClC8O,EAASP,EAAgBvO,EAAQ,QAEjC7Z,EAAWioB,EAAapO,EAAQ,QAEhC+O,EAAc,IAD+B,oBAAhBC,YAA6B7oB,EAAS6oB,YAAcA,aAC3C,QAAS,CAAEC,OAAO,IAO9Dn7C,EAAQ86C,WANR,SAAoBz8C,GAIhB,MAHqB,kBAAVA,IACPA,EAAQuH,EAAO/P,KAAKwI,EAAO,SAExB28C,EAAO7yC,QAAQpQ,OAAO6N,EAAO/P,KAAKwI,GAC7C,EAKA2B,EAAQ66C,WAHR,SAAoBx8C,GAChB,OAAOuH,EAAO/P,KAAKmlD,EAAO7yC,QAAQrQ,OAAOuG,GAC7C,EAEA,IAAM+8C,EAAiB,KACjBR,EAAU,8BACZ,WAAYp1C,GAAS,MAGc,OAHd,WACjB,cAAMA,IACD61C,UAAY,GACjB,EAAKC,gBAAkB91C,EAAQ,CACnC,CAKC,OALA,iCACD,SAAe+1C,GACXn4C,KAAKi4C,UAAU/oC,OAAO,EAAG,EAAGipC,GAE5Bn4C,KAAKoC,QAAUpC,KAAKk4C,gBAAkB,KAAOl4C,KAAKi4C,UAAUjjB,KAAK,IACrE,KAAC,EAVW,CAUX,EAVoBjhC,QAYzB6I,EAAQ46C,WAAaA,EACrB,IACMD,EAAY,WACd,aAAc,UACVv3C,KAAKopC,IAAM5mC,EAAOgF,MAAMwwC,GACxBh4C,KAAKpN,OAAS,CAClB,CAiEC,OAjEA,8BACD,WACQoN,KAAKopC,IAAIx2C,OAAS,GAAKoN,KAAKpN,SAC5BoN,KAAKopC,IAAM5mC,EAAOmC,OAAO,CAAC3E,KAAKopC,IAAK5mC,EAAOgF,MAAMwwC,KAEzD,GAAC,qBACD,SAAQ/8C,GACJ+E,KAAKo4C,cACLp4C,KAAKopC,IAAIyI,WAAW52C,EAAO+E,KAAKpN,QAChCoN,KAAKpN,QAAU,CACnB,GAAC,sBACD,SAASqI,GACL+E,KAAKo4C,cACLp4C,KAAKopC,IAAI2I,cAAc92C,EAAO+E,KAAKpN,QACnCoN,KAAKpN,QAAU,CACnB,GAAC,sBACD,SAASqI,GACL+E,KAAKo4C,cACLp4C,KAAKopC,IAAIrzC,cAAckF,EAAO+E,KAAKpN,QACnCoN,KAAKpN,QAAU,CACnB,GAAC,sBACD,SAASqI,GACL+E,KAAKo4C,cACLp4C,KAAKq4C,YAAY71C,EAAO/P,KAAK,IAAIklD,EAAQ5yC,QAAQ9J,GAAOq9C,QAAQ,KAAM,IAC1E,GAAC,uBACD,SAAUr9C,GACN+E,KAAKo4C,cACLp4C,KAAKq4C,YAAY71C,EAAO/P,KAAK,IAAIklD,EAAQ5yC,QAAQ9J,GAAOq9C,QAAQ,KAAM,KAC1E,GAAC,uBACD,SAAUr9C,GACN+E,KAAKo4C,cACLp4C,KAAKq4C,YAAY71C,EAAO/P,KAAK,IAAIklD,EAAQ5yC,QAAQ9J,GAAOq9C,QAAQ,KAAM,KAC1E,GAAC,uBACD,SAAUr9C,GACN+E,KAAKo4C,cACLp4C,KAAKq4C,YAAY71C,EAAO/P,KAAK,IAAIklD,EAAQ5yC,QAAQ9J,GAAOq9C,QAAQ,KAAM,KAC1E,GAAC,yBACD,SAAY5lD,GAERsN,KAAKopC,IAAM5mC,EAAOmC,OAAO,CACrBnC,EAAO/P,KAAKuN,KAAKopC,IAAIzoC,SAAS,EAAGX,KAAKpN,SACtCF,EACA8P,EAAOgF,MAAMwwC,KAEjBh4C,KAAKpN,QAAUF,EAAOE,MAC1B,GAAC,yBACD,SAAY0U,GACRtH,KAAKo4C,cACL,IAAMhmD,EAAIoQ,EAAO/P,KAAK6U,EAAK,QAC3BtH,KAAKu4C,SAASnmD,EAAEQ,QAChBoN,KAAKq4C,YAAYjmD,EACrB,GAAC,6BACD,SAAgBumB,GACZ3Y,KAAKq4C,YAAY71C,EAAO/P,KAAKkmB,GACjC,GAAC,wBACD,SAAWA,EAAO07B,GACdr0C,KAAKo4C,cACLp4C,KAAKu4C,SAAS5/B,EAAM/lB,QAAQ,IACJ,EADI,IACT+lB,GAAK,IAAxB,IAAK,EAAL,qBAA0B,KAAf3Q,EAAI,QACXhI,KAAKo4C,cACL/D,EAAGrsC,EACP,CAAC,+BACL,GAAC,qBACD,WACI,OAAOhI,KAAKopC,IAAIzoC,SAAS,EAAGX,KAAKpN,OACrC,KAAC,EArEa,GAwElB,SAAS4lD,EAAmBxJ,EAAQyJ,EAAaC,GAC7C,IAAMC,EAAiBD,EAAmBz9C,MAC1Cy9C,EAAmBz9C,MAAQ,WACvB,IAAI,2BADgC6P,EAAI,yBAAJA,EAAI,gBAEpC,OAAO6tC,EAAe/K,MAAM5tC,KAAM8K,EAUtC,CARA,MAAOtS,GACH,GAAIA,aAAarF,WAAY,CACzB,IAAM6nB,EAAOxiB,EAAEwiB,KACf,GAAI,CAAC,2BAA4B,oBAAoBxJ,QAAQwJ,IAAS,EAClE,MAAM,IAAIw8B,EAAW,+CAE7B,CACA,MAAMh/C,CACV,CACJ,CACJ,CAjBAoE,EAAQ26C,aAAeA,EAiBtB,IACKD,EAAY,WACd,WAAYlO,GAAK,UACbppC,KAAKopC,IAAMA,EACXppC,KAAK9M,OAAS,CAClB,CA6DC,OA7DA,yBACD,WACI,IAAM+H,EAAQ+E,KAAKopC,IAAIoH,UAAUxwC,KAAK9M,QAEtC,OADA8M,KAAK9M,QAAU,EACR+H,CACX,GAAC,qBACD,WACI,IAAMA,EAAQ+E,KAAKopC,IAAIsH,aAAa1wC,KAAK9M,QAEzC,OADA8M,KAAK9M,QAAU,EACR+H,CACX,GAAC,qBACD,WACI,IAAMA,EAAQ+E,KAAKopC,IAAIvzC,aAAamK,KAAK9M,QAEzC,OADA8M,KAAK9M,QAAU,EACR+H,CACX,GAAC,qBACD,WACI,IAAMmuC,EAAMppC,KAAK44C,WAAW,GAC5B,OAAO,IAAIjB,EAAQ5yC,QAAQqkC,EAAK,KACpC,GAAC,sBACD,WACI,IAAMA,EAAMppC,KAAK44C,WAAW,IAC5B,OAAO,IAAIjB,EAAQ5yC,QAAQqkC,EAAK,KACpC,GAAC,sBACD,WACI,IAAMA,EAAMppC,KAAK44C,WAAW,IAC5B,OAAO,IAAIjB,EAAQ5yC,QAAQqkC,EAAK,KACpC,GAAC,sBACD,WACI,IAAMA,EAAMppC,KAAK44C,WAAW,IAC5B,OAAO,IAAIjB,EAAQ5yC,QAAQqkC,EAAK,KACpC,GAAC,wBACD,SAAWlpC,GACP,GAAIF,KAAK9M,OAASgN,EAAMF,KAAKopC,IAAIx2C,OAC7B,MAAM,IAAI4kD,EAAW,0BAAD,OAA2Bt3C,EAAG,yBAEtD,IAAM4c,EAAS9c,KAAKopC,IAAIntC,MAAM+D,KAAK9M,OAAQ8M,KAAK9M,OAASgN,GAEzD,OADAF,KAAK9M,QAAUgN,EACR4c,CACX,GAAC,wBACD,WACI,IAAM5c,EAAMF,KAAK64C,UACXzP,EAAMppC,KAAK44C,WAAW14C,GAC5B,IAEI,OAAO23C,EAAYnjD,OAAO00C,EAI9B,CAFA,MAAO5wC,GACH,MAAM,IAAIg/C,EAAW,gCAAD,OAAiCh/C,GACzD,CACJ,GAAC,4BACD,SAAe0H,GACX,OAAO,IAAI7N,WAAW2N,KAAK44C,WAAW14C,GAC1C,GAAC,uBACD,SAAUm0C,GAGN,IAFA,IAAMn0C,EAAMF,KAAK64C,UACX/7B,EAAS3kB,QACNR,EAAI,EAAGA,EAAIuI,IAAOvI,EACvBmlB,EAAOllB,KAAKy8C,KAEhB,OAAOv3B,CACX,KAAC,EAjEa,GAkGlB,SAASg8B,EAAsBz8B,GAC3B,OAAOA,EAAOs4B,OAAO,GAAGoE,cAAgB18B,EAAOpgB,MAAM,EACzD,CACA,SAAS+8C,EAAez7B,EAAQ46B,EAAWl9C,EAAOg+C,EAAWC,GACzD,IAEI,GAAyB,kBAAdD,EACPC,EAAO,QAAD,OAASJ,EAAsBG,KAAch+C,QAElD,GAAIg+C,aAAqB9gD,MAC1B,GAA4B,kBAAjB8gD,EAAU,GAAiB,CAClC,GAAIh+C,EAAMrI,SAAWqmD,EAAU,GAC3B,MAAM,IAAIzB,EAAW,kCAAD,OAAmCyB,EAAU,GAAE,qBAAah+C,EAAMrI,OAAM,WAEhGsmD,EAAOC,gBAAgBl+C,EAC3B,MACK,GAAyB,IAArBg+C,EAAUrmD,QAAwC,kBAAjBqmD,EAAU,GAAiB,CACjE,GAAIh+C,EAAMrI,SAAWqmD,EAAU,GAC3B,MAAM,IAAIzB,EAAW,kCAAD,OAAmCyB,EAAU,GAAE,qBAAah+C,EAAMrI,OAAM,WAEhG,IAAK,IAAI+E,EAAI,EAAGA,EAAIshD,EAAU,GAAIthD,IAC9BqhD,EAAez7B,EAAQ,KAAMtiB,EAAMtD,GAAIshD,EAAU,GAAIC,EAE7D,MAEIA,EAAOE,WAAWn+C,GAAO,SAAC2M,GACtBoxC,EAAez7B,EAAQ46B,EAAWvwC,EAAMqxC,EAAU,GAAIC,EAC1D,SAGH,QAAuB5gD,IAAnB2gD,EAAUj0C,KACf,OAAQi0C,EAAUj0C,MACd,IAAK,SACa,OAAV/J,QAA4B3C,IAAV2C,EAClBi+C,EAAOG,QAAQ,IAGfH,EAAOG,QAAQ,GACfL,EAAez7B,EAAQ46B,EAAWl9C,EAAOg+C,EAAUvxC,KAAMwxC,IAE7D,MAEJ,IAAK,MACDA,EAAOX,SAASt9C,EAAM8M,MACtB9M,EAAMqJ,SAAQ,SAAC8U,EAAKrV,GAChBi1C,EAAez7B,EAAQ46B,EAAWp0C,EAAKk1C,EAAUl1C,IAAKm1C,GACtDF,EAAez7B,EAAQ46B,EAAW/+B,EAAK6/B,EAAUh+C,MAAOi+C,EAC5D,IACA,MAEJ,QACI,MAAM,IAAI1B,EAAW,aAAD,OAAcyB,EAAS,uBAInDK,EAAgB/7B,EAAQtiB,EAAOi+C,EAQvC,CALA,MAAO5gC,GAIH,MAHIA,aAAiBk/B,GACjBl/B,EAAMihC,eAAepB,GAEnB7/B,CACV,CACJ,CACA,SAASghC,EAAgB/7B,EAAQpE,EAAK+/B,GAClC,GAAkC,oBAAvB//B,EAAIqgC,eAAf,CAIA,IAAMC,EAAel8B,EAAOxX,IAAIoT,EAAI5lB,aACpC,IAAKkmD,EACD,MAAM,IAAIjC,EAAW,SAAD,OAAUr+B,EAAI5lB,YAAYK,KAAI,0BAEtD,GAA0B,WAAtB6lD,EAAaz0C,KACby0C,EAAaxhD,OAAOwO,KAAI,YAA4B,aAA1B0xC,EAAS,KAAEc,EAAS,KAC1CD,EAAez7B,EAAQ46B,EAAWh/B,EAAIg/B,GAAYc,EAAWC,EACjE,QAEC,IAA0B,SAAtBO,EAAaz0C,KAYlB,MAAM,IAAIwyC,EAAW,2BAAD,OAA4BiC,EAAaz0C,KAAI,gBAAQmU,EAAI5lB,YAAYK,OAVzF,IADA,IAAMA,EAAOulB,EAAIsgC,EAAa5xC,OACrBpQ,EAAM,EAAGA,EAAMgiD,EAAa/lD,OAAOd,SAAU6E,EAAK,CACvD,QAA+BgiD,EAAa/lD,OAAO+D,GAAI,GAAhD0gD,EAAS,KAAEc,EAAS,KAC3B,GAAId,IAAcvkD,EAAM,CACpBslD,EAAOG,QAAQ5hD,GACfuhD,EAAez7B,EAAQ46B,EAAWh/B,EAAIg/B,GAAYc,EAAWC,GAC7D,KACJ,CACJ,CAIJ,CAvBA,MAFI//B,EAAIqgC,eAAeN,EA0B3B,CASA,SAASQ,EAAiBn8B,EAAQ46B,EAAWc,EAAWU,GACpD,IACI,GAAyB,kBAAdV,EACP,OAAOU,EAAO,OAAD,OAAQb,EAAsBG,OAE/C,GAAIA,aAAqB9gD,MAAO,CAC5B,GAA4B,kBAAjB8gD,EAAU,GACjB,OAAOU,EAAOC,eAAeX,EAAU,IAEtC,GAA4B,kBAAjBA,EAAU,GAAiB,CAEvC,IADA,IAAM12C,EAAM,GACH5K,EAAI,EAAGA,EAAIshD,EAAU,GAAIthD,IAC9B4K,EAAI3K,KAAK8hD,EAAiBn8B,EAAQ,KAAM07B,EAAU,GAAIU,IAE1D,OAAOp3C,CACX,CAEI,OAAOo3C,EAAOE,WAAU,kBAAMH,EAAiBn8B,EAAQ46B,EAAWc,EAAU,GAAIU,EAAO,GAE/F,CACA,GAAuB,WAAnBV,EAAUj0C,KAEV,OADe20C,EAAOG,SAEXJ,EAAiBn8B,EAAQ46B,EAAWc,EAAUvxC,KAAMiyC,QAE/D,EAEJ,GAAuB,QAAnBV,EAAUj0C,KAAgB,CAG1B,IAFA,IAAIyB,EAAM,IAAIzD,IACRpQ,EAAS+mD,EAAOd,UACblhD,EAAI,EAAGA,EAAI/E,EAAQ+E,IAAK,CAC7B,IAAMoM,EAAM21C,EAAiBn8B,EAAQ46B,EAAWc,EAAUl1C,IAAK41C,GACzDvgC,EAAMsgC,EAAiBn8B,EAAQ46B,EAAWc,EAAUh+C,MAAO0+C,GACjElzC,EAAI/F,IAAIqD,EAAKqV,EACjB,CACA,OAAO3S,CACX,CACA,OAAOszC,EAAkBx8B,EAAQ07B,EAAWU,EAOhD,CALA,MAAOrhC,GAIH,MAHIA,aAAiBk/B,GACjBl/B,EAAMihC,eAAepB,GAEnB7/B,CACV,CACJ,CACA,SAASyhC,EAAkBx8B,EAAQy8B,EAAWL,GAC1C,GAA0C,oBAA/BK,EAAUC,iBACjB,OAAOD,EAAUC,iBAAiBN,GAEtC,IAAMF,EAAel8B,EAAOxX,IAAIi0C,GAChC,IAAKP,EACD,MAAM,IAAIjC,EAAW,SAAD,OAAUwC,EAAUpmD,KAAI,0BAEhD,GAA0B,WAAtB6lD,EAAaz0C,KAAmB,CAChC,IACiE,EAD3D8X,EAAS,CAAC,EAAE,IACmBS,EAAOxX,IAAIi0C,GAAW/hD,QAAM,IAAjE,IAAK,EAAL,qBAAmE,oBAAvDkgD,EAAS,KAAEc,EAAS,KAC5Bn8B,EAAOq7B,GAAauB,EAAiBn8B,EAAQ46B,EAAWc,EAAWU,EACvE,CAAC,+BACD,OAAO,IAAIK,EAAUl9B,EACzB,CACA,GAA0B,SAAtB28B,EAAaz0C,KAAiB,CAC9B,IAAMvN,EAAMkiD,EAAOG,SACnB,GAAIriD,GAAOgiD,EAAa/lD,OAAOd,OAC3B,MAAM,IAAI4kD,EAAW,eAAD,OAAgB//C,EAAG,qBAE3C,QAA+BgiD,EAAa/lD,OAAO+D,GAAI,GAAhD0gD,EAAS,KACV+B,EAAaR,EAAiBn8B,EAAQ46B,EADjB,KACuCwB,GAClE,OAAO,IAAIK,EAAU,EAAD,GAAI7B,EAAY+B,GACxC,CACA,MAAM,IAAI1C,EAAW,2BAAD,OAA4BiC,EAAaz0C,KAAI,gBAAQg1C,EAAUzmD,YAAYK,MACnG,CA5MA8iD,EAAW,CACP8B,GACDlB,EAAa9jD,UAAW,SAAU,MACrCkjD,EAAW,CACP8B,GACDlB,EAAa9jD,UAAW,UAAW,MACtCkjD,EAAW,CACP8B,GACDlB,EAAa9jD,UAAW,UAAW,MACtCkjD,EAAW,CACP8B,GACDlB,EAAa9jD,UAAW,UAAW,MACtCkjD,EAAW,CACP8B,GACDlB,EAAa9jD,UAAW,WAAY,MACvCkjD,EAAW,CACP8B,GACDlB,EAAa9jD,UAAW,WAAY,MACvCkjD,EAAW,CACP8B,GACDlB,EAAa9jD,UAAW,WAAY,MACvCkjD,EAAW,CACP8B,GACDlB,EAAa9jD,UAAW,aAAc,MACzCkjD,EAAW,CACP8B,GACDlB,EAAa9jD,UAAW,iBAAkB,MAC7CkjD,EAAW,CACP8B,GACDlB,EAAa9jD,UAAW,YAAa,MACxCoJ,EAAQ06C,aAAeA,EAsGvB16C,EAAQgG,UALR,SAAmB2a,EAAQpE,GAA4B,IAAvBghC,EAAS,UAAH,6CAAG5C,EAC/B2B,EAAS,IAAIiB,EAEnB,OADAb,EAAgB/7B,EAAQpE,EAAK+/B,GACtBA,EAAOZ,SAClB,EAmFA17C,EAAQkG,YARR,SAAqBya,EAAQy8B,EAAWtnD,GAA+B,IAAvB0nD,EAAS,UAAH,6CAAG9C,EAC/CqC,EAAS,IAAIS,EAAO1nD,GACpBoqB,EAASi9B,EAAkBx8B,EAAQy8B,EAAWL,GACpD,GAAIA,EAAOzmD,OAASR,EAAOE,OACvB,MAAM,IAAI4kD,EAAW,cAAD,OAAe9kD,EAAOE,OAAS+mD,EAAOzmD,OAAM,mCAEpE,OAAO4pB,CACX,EAOAlgB,EAAQmG,qBAJR,SAA8Bwa,EAAQy8B,EAAWtnD,GAA+B,IAAvB0nD,EAAS,UAAH,6CAAG9C,EACxDqC,EAAS,IAAIS,EAAO1nD,GAC1B,OAAOqnD,EAAkBx8B,EAAQy8B,EAAWL,EAChD,yBCtbA,IAAIU,EAAQvR,EAAQ,OAGpB0L,EAAO53C,QAAUy9C,EAFF,kGCCf,IAAMC,EAAOxR,EAAAA,OAAAA,GACPyR,EAAkBzR,EAAQ,OAc1B0R,EAAgB,SAAhBA,EAAyBC,EAAY9mC,GACzC,KAAK3T,gBAAgBw6C,GACnB,OAAO,IAAIA,EAAcC,EAAY9mC,GAGlCA,IACHA,EAAU,CAAC,GAGb3T,KAAK2T,QAAU,CACb+mC,QAAoC,qBAApB/mC,EAAQ+mC,QAA0B/mC,EAAQ+mC,QAAU,KACpEC,SAAsC,qBAArBhnC,EAAQgnC,SAA2BhnC,EAAQgnC,SAAW,KACvEC,UAAwC,qBAAtBjnC,EAAQinC,UAA4BjnC,EAAQinC,UAAY,WAAa,OAAON,GAAQ,EACtGz8B,QAAoC,qBAApBlK,EAAQkK,QAA0BlK,EAAQkK,QAAU,EACpEg9B,mBAA0D,mBAA/BlnC,EAAQknC,oBAAmClnC,EAAQknC,oBAGhF76C,KAAKy6C,WAAaA,CACpB,EAEAjG,EAAO53C,QAAU49C,EAWjBA,EAAchnD,UAAUu4B,QAAU,SAASE,EAAQrV,EAAQqG,EAAI+O,GAC7D,IA6CI5pB,EA7CE04C,EAAO96C,KACT+rB,EAAU,KAGRgvB,EAAU5iD,MAAMC,QAAQ6zB,IAA6B,oBAAXrV,EAEhD,GAA6B,IAAzB5W,KAAK2T,QAAQkK,SAAiBk9B,EAChC,MAAM,IAAIzoD,UAAU,0CAMtB,GAAGyoD,IAFYA,GAAW9uB,GAA4B,kBAAXA,GAAyC,oBAAXrV,EAGvEoV,EAAWpV,EACXmV,EAAUE,MACL,CACY,oBAAPhP,IACR+O,EAAW/O,EAEXA,OAAK3kB,GAGP,IAAM0iD,EAAkC,oBAAbhvB,EAE3B,IACED,EAAUwuB,EAAgBtuB,EAAQrV,EAAQqG,EAAI,CAC5C29B,UAAW56C,KAAK2T,QAAQinC,UACxB/8B,QAAS7d,KAAK2T,QAAQkK,QACtBg9B,mBAAoB76C,KAAK2T,QAAQknC,oBAOrC,CALE,MAAMj2C,GACN,GAAGo2C,EACD,OAAOhvB,EAASpnB,GAElB,MAAMA,CACR,CAGA,IAAIo2C,EACF,OAAOjvB,CAGX,CAGA,IACE3pB,EAAUoO,KAAKC,UAAUsb,EAAS/rB,KAAK2T,QAAQgnC,SAGjD,CAFE,MAAM/1C,GACN,OAAOonB,EAASpnB,EAClB,CAOA,OALA5E,KAAKy6C,WAAWr4C,GAAS,SAASwC,EAAKkZ,GACrCg9B,EAAKG,eAAer2C,EAAKkZ,EAAUkO,EACrC,IAGOD,CACT,EASAyuB,EAAchnD,UAAUynD,eAAiB,SAASr2C,EAAKs2C,EAAclvB,GACnE,GAAGpnB,EACDonB,EAASpnB,OADX,CAKA,IAAIs2C,EAGF,OAAOlvB,IAGT,IAAIlO,EACJ,IACEA,EAAWtN,KAAK2qC,MAAMD,EAAcl7C,KAAK2T,QAAQ+mC,QAGnD,CAFE,MAAM91C,GACN,OAAOonB,EAASpnB,EAClB,CAEA,GAAuB,IAApBonB,EAASp5B,OAAc,CAIxB,GAAGuF,MAAMC,QAAQ0lB,GAAW,CAG1B,IAAMs9B,EAAU,SAAS7uB,GACvB,MAA4B,qBAAdA,EAAIjU,KACpB,EAMA,OAAO0T,EAAS,KAAMlO,EAASlV,OAAOwyC,GAAUt9B,EAASlV,QAJtC,SAAU2jB,GAC3B,OAAQ6uB,EAAQ7uB,EAClB,IAIF,CAGE,OAAOP,EAAS,KAAMlO,EAASxF,MAAOwF,EAAShB,OAInD,CAEAkP,EAAS,KAAMlO,EAzCf,CA0CF,sCChKA,IAAMw8B,EAAOxR,EAAAA,OAAAA,GA4Db0L,EAAO53C,QA7CiB,SAASqvB,EAAQrV,EAAQqG,EAAItJ,GACnD,GAAqB,kBAAXsY,EACR,MAAM,IAAI35B,UAAU25B,EAAS,qBAM/B,IAAMpO,EAAqC,kBAH3ClK,EAAUA,GAAW,CAAC,GAGSkK,QAAuBlK,EAAQkK,QAAU,EACxE,GAAgB,IAAZA,GAA6B,IAAZA,EACnB,MAAM,IAAIvrB,UAAUurB,EAAU,mBAGhC,IAAMkO,EAAU,CACdE,OAAQA,GAOV,GAJe,IAAZpO,IACDkO,EAAQ/O,QAAU,OAGjBpG,EAAQ,CAET,GAAqB,kBAAXA,IAAwBze,MAAMC,QAAQwe,GAC9C,MAAM,IAAItkB,UAAUskB,EAAS,wCAE/BmV,EAAQnV,OAASA,CACnB,CAGA,GAAkB,qBAARqG,EAAqB,CAC7B,IAAM29B,EAAyC,oBAAtBjnC,EAAQinC,UAA2BjnC,EAAQinC,UAAY,WAAa,OAAON,GAAQ,EAC5GvuB,EAAQ9O,GAAK29B,EAAU7uB,EAASpY,EAClC,MAAuB,IAAZkK,GAAwB,OAAPZ,EAEtBtJ,EAAQknC,qBACV9uB,EAAQ9O,GAAK,MAGf8O,EAAQ9O,GAAKA,EAGf,OAAO8O,CACT,yCC1DIsvB,EAAyBvS,EAAQ,OAKrClsC,EAAQ,OAAS,EAEjB,IAAI0+C,EAAgBD,EAAuBvS,EAAQ,QAE/CyS,EAAmBF,EAAuBvS,EAAQ,QAElD0S,EAAaH,EAAuBvS,EAAQ,QAE5C2S,EAA8BJ,EAAuBvS,EAAQ,QAE7D4S,EAAmBL,EAAuBvS,EAAQ,QAElD6S,EAAaN,EAAuBvS,EAAQ,QAIhD,SAAS8S,EAAaC,GAAW,IAAIC,EAErC,WAAuC,GAAuB,qBAAZ9E,UAA4BA,QAAQ+E,UAAW,OAAO,EAAO,GAAI/E,QAAQ+E,UAAUC,KAAM,OAAO,EAAO,GAAqB,oBAAVC,MAAsB,OAAO,EAAM,IAAsF,OAAhF1gD,QAAQ/H,UAAU22C,QAAQhwC,KAAK68C,QAAQ+E,UAAUxgD,QAAS,IAAI,WAAa,MAAY,CAAkC,CAA1B,MAAO/C,GAAK,OAAO,CAAO,CAAE,CAFvQ0jD,GAA6B,OAAO,WAAkC,IAAuDp/B,EAAnDq/B,GAAQ,EAAIT,EAA0B,SAAGG,GAAkB,GAAIC,EAA2B,CAAE,IAAIM,GAAY,EAAIV,EAA0B,SAAG17C,MAAMzM,YAAaupB,EAASk6B,QAAQ+E,UAAUI,EAAOxR,UAAWyR,EAAY,MAASt/B,EAASq/B,EAAMvO,MAAM5tC,KAAM2qC,WAAc,OAAO,EAAI8Q,EAAqC,SAAGz7C,KAAM8c,EAAS,CAAG,CAI3d,IAAIu/B,EAAsB,SAAUC,IAClC,EAAId,EAAoB,SAAGa,EAAQC,GAEnC,IAAIhb,EAASsa,EAAaS,GAE1B,SAASA,IACP,IAAI73C,EAAUmmC,UAAU/3C,OAAS,QAAsB0F,IAAjBqyC,UAAU,GAAmBA,UAAU,GAAK,sBAE9E5K,EAAO4K,UAAU/3C,OAAS,QAAsB0F,IAAjBqyC,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC5E4R,EAAmBxc,EAAK7S,YACxBA,OAAmC,IAArBqvB,GAAqCA,EACnDC,EAAiBzc,EAAK0c,UACtBA,OAA+B,IAAnBD,GAAmCA,EAC/CE,EAAwB3c,EAAK4c,mBAC7BA,OAA+C,IAA1BD,EAAmC,IAAOA,EAC/DE,EAAsB7c,EAAK5S,eAC3BA,OAAyC,IAAxByvB,EAAiC,EAAIA,EAEtDC,EAAsBlS,UAAU/3C,OAAS,EAAI+3C,UAAU,QAAKryC,EAEhE,OADA,EAAIijD,EAA0B,SAAGv7C,KAAMq8C,GAChC/a,EAAOnnC,KAAK6F,KAAM27C,EAAoB,QAAGn3C,EAAS,CACvD0oB,YAAaA,EACbuvB,UAAWA,EACXE,mBAAoBA,EACpBxvB,eAAgBA,GACf0vB,EACL,CAEA,OAAO,EAAIvB,EAAuB,SAAGe,EACvC,CA7B0B,CANZhB,EAAuBvS,EAAQ,QAmC1B,SAEnBlsC,EAAQ,EAASy/C,4DCnDbhB,EAAyBvS,EAAQ,OAErCz1C,OAAO+R,eAAexI,EAAS,aAAc,CAC3C3B,OAAO,IAET2B,EAAiB,aAAI,EAErB,IAAIkgD,EAAezB,EAAuBvS,EAAQ,QAE9CiU,EAAqB1B,EAAuBvS,EAAQ,QAEpDkU,EAAW3B,EAAuBvS,EAAQ,QAE1CyS,EAAmBF,EAAuBvS,EAAQ,QAElDwS,EAAgBD,EAAuBvS,EAAQ,QAE/C0S,EAAaH,EAAuBvS,EAAQ,QAE5C2S,EAA8BJ,EAAuBvS,EAAQ,QAE7D4S,EAAmBL,EAAuBvS,EAAQ,QAElDmU,EAAgBnU,EAAQ,OAE5B,SAAS8S,EAAaC,GAAW,IAAIC,EAErC,WAAuC,GAAuB,qBAAZ9E,UAA4BA,QAAQ+E,UAAW,OAAO,EAAO,GAAI/E,QAAQ+E,UAAUC,KAAM,OAAO,EAAO,GAAqB,oBAAVC,MAAsB,OAAO,EAAM,IAAsF,OAAhF1gD,QAAQ/H,UAAU22C,QAAQhwC,KAAK68C,QAAQ+E,UAAUxgD,QAAS,IAAI,WAAa,MAAY,CAAkC,CAA1B,MAAO/C,GAAK,OAAO,CAAO,CAAE,CAFvQ0jD,GAA6B,OAAO,WAAkC,IAAuDp/B,EAAnDq/B,GAAQ,EAAIT,EAA0B,SAAGG,GAAkB,GAAIC,EAA2B,CAAE,IAAIM,GAAY,EAAIV,EAA0B,SAAG17C,MAAMzM,YAAaupB,EAASk6B,QAAQ+E,UAAUI,EAAOxR,UAAWyR,EAAY,MAASt/B,EAASq/B,EAAMvO,MAAM5tC,KAAM2qC,WAAc,OAAO,EAAI8Q,EAAqC,SAAGz7C,KAAM8c,EAAS,CAAG,CAI3d,IAAIogC,EAAsC,SAAU/+C,EAAG3F,GACrD,IAAImF,EAAI,CAAC,EAET,IAAK,IAAIw/C,KAAKh/C,EACR9K,OAAOG,UAAU0G,eAAeC,KAAKgE,EAAGg/C,IAAM3kD,EAAEgZ,QAAQ2rC,GAAK,IAAGx/C,EAAEw/C,GAAKh/C,EAAEg/C,IAG/E,GAAS,MAALh/C,GAAqD,oBAAjC9K,OAAO+pD,sBAA2C,KAAIzlD,EAAI,EAAb,IAAgBwlD,EAAI9pD,OAAO+pD,sBAAsBj/C,GAAIxG,EAAIwlD,EAAEvqD,OAAQ+E,IAClIa,EAAEgZ,QAAQ2rC,EAAExlD,IAAM,GAAKtE,OAAOG,UAAU6pD,qBAAqBljD,KAAKgE,EAAGg/C,EAAExlD,MAAKgG,EAAEw/C,EAAExlD,IAAMwG,EAAEg/C,EAAExlD,IADuB,CAGvH,OAAOgG,CACT,EAGI2/C,EAA4B,SAAUC,IACxC,EAAI/B,EAAoB,SAAG8B,EAAcC,GAEzC,IAAIjc,EAASsa,EAAa0B,GAW1B,SAASA,EAAaE,GACpB,IAAI9X,EAEAlhC,EAAUmmC,UAAU/3C,OAAS,QAAsB0F,IAAjBqyC,UAAU,GAAmBA,UAAU,GAAK,sBAE9E8S,EAAK9S,UAAU/3C,OAAS,QAAsB0F,IAAjBqyC,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAE1EkS,EAAsBlS,UAAU/3C,OAAS,EAAI+3C,UAAU,QAAKryC,GAChE,EAAIijD,EAA0B,SAAGv7C,KAAMs9C,GAEvC,IAAII,EAAiBD,EAAGvwB,YACpBA,OAAiC,IAAnBwwB,GAAmCA,EACjDC,EAAeF,EAAGhB,UAClBA,OAA6B,IAAjBkB,GAAiCA,EAC7CC,EAAwBH,EAAGd,mBAC3BA,OAA+C,IAA1BiB,EAAmC,IAAOA,EAC/DC,EAAoBJ,EAAGtwB,eACvBA,OAAuC,IAAtB0wB,EAA+B,EAAIA,EACpDC,EAAeZ,EAAOO,EAAI,CAAC,cAAe,YAAa,qBAAsB,mBAyBjF,OAvBA/X,EAAQpE,EAAOnnC,KAAK6F,OACdw9C,iBAAmBA,EACzB9X,EAAMqY,MAAQ,CAAC,EACfrY,EAAMsY,OAAS,EACftY,EAAMlhC,QAAUA,EAChBkhC,EAAMxY,YAAcA,EACpBwY,EAAMuY,OAAQ,EACdvY,EAAM+W,UAAYA,EAClB/W,EAAMiX,mBAAqBA,EAC3BjX,EAAMvY,eAAiBA,EACvBuY,EAAMoY,aAAeA,EACrBpY,EAAMwY,mBAAqB,EAE3BxY,EAAMmX,oBAAsBA,GAAuB,WACjD,QAASnX,EAAMsY,MACjB,EAEItY,EAAMxY,aAAawY,EAAMyY,SAASzY,EAAMlhC,QAASnR,OAAOI,OAAO,CACjEy5B,YAAawY,EAAMxY,YACnBuvB,UAAW/W,EAAM+W,UACjBE,mBAAoBjX,EAAMiX,mBAC1BxvB,eAAgBuY,EAAMvY,gBACrBuY,EAAMoY,eACFpY,CACT,CAgXA,OAxWA,EAAI4V,EAAuB,SAAGgC,EAAc,CAAC,CAC3Cv5C,IAAK,UACL9I,MAAO,WACD+E,KAAKo+C,QAETp+C,KAAKm+C,SAASn+C,KAAKwE,QAASnR,OAAOI,OAAO,CACxCy5B,YAAaltB,KAAKktB,YAClBuvB,UAAWz8C,KAAKy8C,UAChBE,mBAAoB38C,KAAK28C,mBACzBxvB,eAAgBntB,KAAKmtB,gBACpBntB,KAAK89C,cACV,GAWC,CACD/5C,IAAK,OACL9I,MAAO,SAAcgxB,EAAQrV,EAAQynC,EAASC,GAC5C,IAAInW,EAASnoC,KAOb,OALKs+C,GAAW,YAAa,EAAItB,EAAkB,SAAGqB,KACpDC,EAAUD,EACVA,EAAU,MAGL,IAAI5pC,SAAQ,SAAUC,EAAS+W,GACpC,IAAK0c,EAAO8V,MAAO,OAAOxyB,EAAO,IAAI13B,MAAM,qBAE3C,IAAIiqD,EAAS7V,EAAO0U,oBAAoB5wB,EAAQrV,GAE5CxU,EAAU,CACZ4a,QAAS,MACTiP,OAAQA,EACRrV,OAAQA,GAAU,KAClBqG,GAAI+gC,GAGN7V,EAAOiW,OAAOG,KAAK/tC,KAAKC,UAAUrO,GAAUk8C,GAAS,SAAUhmC,GAC7D,GAAIA,EAAO,OAAOmT,EAAOnT,GACzB6vB,EAAO4V,MAAMC,GAAU,CACrBQ,QAAS,CAAC9pC,EAAS+W,IAGjB4yB,IACFlW,EAAO4V,MAAMC,GAAQK,QAAU1pC,YAAW,kBACjCwzB,EAAO4V,MAAMC,GACpBvyB,EAAO,IAAI13B,MAAM,iBACnB,GAAGsqD,GAEP,GACF,GACF,GAQC,CACDt6C,IAAK,QACL9I,MAAO,WACL,IAAIwjD,GAAS,EAAI1B,EAA4B,SAAiBD,EAAsB,QAAE4B,MAAK,SAASC,EAAQ/nC,GAC1G,IAAIgoC,EACJ,OAAO9B,EAAsB,QAAE+B,MAAK,SAAkB3e,GACpD,OACE,OAAQA,EAAS4e,KAAO5e,EAASd,MAC/B,KAAK,EAEH,OADAc,EAASd,KAAO,EACTp/B,KAAK7F,KAAK,YAAayc,GAEhC,KAAK,EAGH,GAFAgoC,EAAO1e,EAAS6e,KAEN,CACR7e,EAASd,KAAO,EAChB,KACF,CAEA,MAAM,IAAIrrC,MAAM,yBAElB,KAAK,EACH,OAAOmsC,EAAS8e,OAAO,SAAUJ,GAEnC,KAAK,EACL,IAAK,MACH,OAAO1e,EAAS+e,OAGxB,GAAGN,EAAS3+C,KACd,KAMA,OAJA,SAAek/C,GACb,OAAOT,EAAO7Q,MAAM5tC,KAAM2qC,UAC5B,CAGF,CApCO,IA2CN,CACD5mC,IAAK,cACL9I,MAAO,WACL,IAAIkkD,GAAe,EAAIpC,EAA4B,SAAiBD,EAAsB,QAAE4B,MAAK,SAASU,IACxG,OAAOtC,EAAsB,QAAE+B,MAAK,SAAmBve,GACrD,OACE,OAAQA,EAAUwe,KAAOxe,EAAUlB,MACjC,KAAK,EAEH,OADAkB,EAAUlB,KAAO,EACVp/B,KAAK7F,KAAK,iBAEnB,KAAK,EACH,OAAOmmC,EAAU0e,OAAO,SAAU1e,EAAUye,MAE9C,KAAK,EACL,IAAK,MACH,OAAOze,EAAU2e,OAGzB,GAAGG,EAAUp/C,KACf,KAMA,OAJA,WACE,OAAOm/C,EAAavR,MAAM5tC,KAAM2qC,UAClC,CAGF,CAzBO,IAkCN,CACD5mC,IAAK,SACL9I,MAAO,SAAgBgxB,EAAQrV,GAC7B,IAAIyoC,EAASr/C,KAEb,OAAO,IAAIyU,SAAQ,SAAUC,EAAS+W,GACpC,IAAK4zB,EAAOpB,MAAO,OAAOxyB,EAAO,IAAI13B,MAAM,qBAC3C,IAAIqO,EAAU,CACZ4a,QAAS,MACTiP,OAAQA,EACRrV,OAAQA,GAAU,MAGpByoC,EAAOjB,OAAOG,KAAK/tC,KAAKC,UAAUrO,IAAU,SAAUkW,GACpD,GAAIA,EAAO,OAAOmT,EAAOnT,GACzB5D,GACF,GACF,GACF,GASC,CACD3Q,IAAK,YACL9I,MAAO,WACL,IAAIqkD,GAAa,EAAIvC,EAA4B,SAAiBD,EAAsB,QAAE4B,MAAK,SAASa,EAASC,GAC/G,IAAI1iC,EACJ,OAAOggC,EAAsB,QAAE+B,MAAK,SAAmBne,GACrD,OACE,OAAQA,EAAUoe,KAAOpe,EAAUtB,MACjC,KAAK,EAGH,MAFqB,kBAAVogB,IAAoBA,EAAQ,CAACA,IACxC9e,EAAUtB,KAAO,EACVp/B,KAAK7F,KAAK,SAAUqlD,GAE7B,KAAK,EAGH,GAFA1iC,EAAS4jB,EAAUqe,KAEI,kBAAVS,GAAwC,OAAlB1iC,EAAO0iC,GAAkB,CAC1D9e,EAAUtB,KAAO,EACjB,KACF,CAEA,MAAM,IAAIrrC,MAAM,mCAAqCyrD,EAAQ,WAAa1iC,EAAO0iC,IAEnF,KAAK,EACH,OAAO9e,EAAUse,OAAO,SAAUliC,GAEpC,KAAK,EACL,IAAK,MACH,OAAO4jB,EAAUue,OAGzB,GAAGM,EAAUv/C,KACf,KAMA,OAJA,SAAmBy/C,GACjB,OAAOH,EAAW1R,MAAM5tC,KAAM2qC,UAChC,CAGF,CArCO,IA8CN,CACD5mC,IAAK,cACL9I,MAAO,WACL,IAAIykD,GAAe,EAAI3C,EAA4B,SAAiBD,EAAsB,QAAE4B,MAAK,SAASiB,EAASH,GACjH,IAAI1iC,EACJ,OAAOggC,EAAsB,QAAE+B,MAAK,SAAmBpZ,GACrD,OACE,OAAQA,EAAUqZ,KAAOrZ,EAAUrG,MACjC,KAAK,EAGH,MAFqB,kBAAVogB,IAAoBA,EAAQ,CAACA,IACxC/Z,EAAUrG,KAAO,EACVp/B,KAAK7F,KAAK,UAAWqlD,GAE9B,KAAK,EAGH,GAFA1iC,EAAS2oB,EAAUsZ,KAEI,kBAAVS,GAAwC,OAAlB1iC,EAAO0iC,GAAkB,CAC1D/Z,EAAUrG,KAAO,EACjB,KACF,CAEA,MAAM,IAAIrrC,MAAM,4CAA8C+oB,GAEhE,KAAK,EACH,OAAO2oB,EAAUuZ,OAAO,SAAUliC,GAEpC,KAAK,EACL,IAAK,MACH,OAAO2oB,EAAUwZ,OAGzB,GAAGU,EAAU3/C,KACf,KAMA,OAJA,SAAqB4/C,GACnB,OAAOF,EAAa9R,MAAM5tC,KAAM2qC,UAClC,CAGF,CArCO,IA8CN,CACD5mC,IAAK,QACL9I,MAAO,SAAe+f,EAAM/a,GAC1BD,KAAKo+C,OAAOloB,MAAMlb,GAAQ,IAAM/a,EAClC,GAUC,CACD8D,IAAK,WACL9I,MAAO,SAAkBuJ,EAASmP,GAChC,IAAIksC,EAAS7/C,KAEbA,KAAKo+C,OAASp+C,KAAKw9C,iBAAiBh5C,EAASmP,GAC7C3T,KAAKo+C,OAAOvuB,iBAAiB,QAAQ,WACnCgwB,EAAO5B,OAAQ,EAEf4B,EAAOra,KAAK,QAEZqa,EAAO3B,mBAAqB,CAC9B,IACAl+C,KAAKo+C,OAAOvuB,iBAAiB,WAAW,SAAUkQ,GAChD,IAAI39B,EAAU29B,EAAK9/B,KACfmC,aAAmBunC,cAAavnC,EAAUI,EAAO/P,KAAK2P,GAAShG,YAEnE,IACEgG,EAAUoO,KAAK2qC,MAAM/4C,EAGvB,CAFE,MAAOkW,GACP,MACF,CAGA,GAAIlW,EAAQu0B,cAAgBkpB,EAAOC,UAAU19C,EAAQu0B,cAAc/jC,OAAQ,CACzE,IAAKS,OAAOwT,KAAKzE,EAAQwU,QAAQhkB,OAAQ,OAAOitD,EAAOra,KAAKpjC,EAAQu0B,cACpE,IAAI7rB,EAAO,CAAC1I,EAAQu0B,cACpB,GAAIv0B,EAAQwU,OAAOrjB,cAAgBF,OAAQyX,EAAKlT,KAAKwK,EAAQwU,aAC3D,IAAK,IAAIjf,EAAI,EAAGA,EAAIyK,EAAQwU,OAAOhkB,OAAQ+E,IACzCmT,EAAKlT,KAAKwK,EAAQwU,OAAOjf,IAI7B,OAAO8c,QAAQC,UAAUyZ,MAAK,WAC5B0xB,EAAOra,KAAKoI,MAAMiS,EAAQ/0C,EAC5B,GACF,CAEA,IAAK+0C,EAAO9B,MAAM37C,EAAQ6a,IAExB,OAAI7a,EAAQ6pB,QAAU7pB,EAAQwU,OAErBnC,QAAQC,UAAUyZ,MAAK,WAC5B0xB,EAAOra,KAAKpjC,EAAQ6pB,OAAQ7pB,EAAQwU,OACtC,SAGF,EAIE,UAAWxU,IAAY,WAAYA,GAASy9C,EAAO9B,MAAM37C,EAAQ6a,IAAIuhC,QAAQ,GAAG,IAAIzqD,MAAM,+FAC1F8rD,EAAO9B,MAAM37C,EAAQ6a,IAAIohC,SAASpsB,aAAa4tB,EAAO9B,MAAM37C,EAAQ6a,IAAIohC,SACxEj8C,EAAQkW,MAAOunC,EAAO9B,MAAM37C,EAAQ6a,IAAIuhC,QAAQ,GAAGp8C,EAAQkW,OAAYunC,EAAO9B,MAAM37C,EAAQ6a,IAAIuhC,QAAQ,GAAGp8C,EAAQ0a,eAChH+iC,EAAO9B,MAAM37C,EAAQ6a,GAC9B,IACAjd,KAAKo+C,OAAOvuB,iBAAiB,SAAS,SAAUvX,GAC9C,OAAOunC,EAAOra,KAAK,QAASltB,EAC9B,IACAtY,KAAKo+C,OAAOvuB,iBAAiB,SAAS,SAAUkwB,GAC9C,IAAI/kC,EAAO+kC,EAAM/kC,KACbsU,EAASywB,EAAMzwB,OACfuwB,EAAO5B,OACTtpC,YAAW,WACT,OAAOkrC,EAAOra,KAAK,QAASxqB,EAAMsU,EACpC,GAAG,GACLuwB,EAAO5B,OAAQ,EACf4B,EAAOzB,YAAS9lD,EACH,MAAT0iB,IACJ6kC,EAAO3B,qBACH2B,EAAOpD,YAAcoD,EAAO1yB,eAAiB0yB,EAAO3B,oBAAgD,IAA1B2B,EAAO1yB,iBAAuBxY,YAAW,WACrH,OAAOkrC,EAAO1B,SAAS35C,EAASmP,EAClC,GAAGksC,EAAOlD,oBACZ,GACF,KAEKW,CACT,CA3agC,CA2a9BL,EAAc+C,cAEhBpjD,EAAiB,QAAI0gD,sCCzdrB,IAAIjC,EAAyBvS,EAAQ,OAErCz1C,OAAO+R,eAAexI,EAAS,aAAc,CAC3C3B,OAAO,IAET2B,EAAiB,QA4GjB,SAAkB4H,EAASmP,GACzB,OAAO,IAAIssC,EAAqBz7C,EAASmP,EAC3C,EA5GA,IAAI4nC,EAAmBF,EAAuBvS,EAAQ,QAElDwS,EAAgBD,EAAuBvS,EAAQ,QAE/C0S,EAAaH,EAAuBvS,EAAQ,QAE5C2S,EAA8BJ,EAAuBvS,EAAQ,QAE7D4S,EAAmBL,EAAuBvS,EAAQ,QAItD,SAAS8S,EAAaC,GAAW,IAAIC,EAErC,WAAuC,GAAuB,qBAAZ9E,UAA4BA,QAAQ+E,UAAW,OAAO,EAAO,GAAI/E,QAAQ+E,UAAUC,KAAM,OAAO,EAAO,GAAqB,oBAAVC,MAAsB,OAAO,EAAM,IAAsF,OAAhF1gD,QAAQ/H,UAAU22C,QAAQhwC,KAAK68C,QAAQ+E,UAAUxgD,QAAS,IAAI,WAAa,MAAY,CAAkC,CAA1B,MAAO/C,GAAK,OAAO,CAAO,CAAE,CAFvQ0jD,GAA6B,OAAO,WAAkC,IAAuDp/B,EAAnDq/B,GAAQ,EAAIT,EAA0B,SAAGG,GAAkB,GAAIC,EAA2B,CAAE,IAAIM,GAAY,EAAIV,EAA0B,SAAG17C,MAAMzM,YAAaupB,EAASk6B,QAAQ+E,UAAUI,EAAOxR,UAAWyR,EAAY,MAASt/B,EAASq/B,EAAMvO,MAAM5tC,KAAM2qC,WAAc,OAAO,EAAI8Q,EAAqC,SAAGz7C,KAAM8c,EAAS,CAAG,CAI3d,IAAImjC,EAAoC,SAAU1C,IAChD,EAAI/B,EAAoB,SAAGyE,EAAsB1C,GAEjD,IAAIjc,EAASsa,EAAaqE,GAS1B,SAASA,EAAqBz7C,EAASmP,EAASusC,GAC9C,IAAIxa,EAsBJ,OApBA,EAAI6V,EAA0B,SAAGv7C,KAAMigD,IACvCva,EAAQpE,EAAOnnC,KAAK6F,OACdo+C,OAAS,IAAI+B,OAAOC,UAAU57C,EAAS07C,GAE7Cxa,EAAM0Y,OAAOiC,OAAS,WACpB,OAAO3a,EAAMF,KAAK,OACpB,EAEAE,EAAM0Y,OAAOkC,UAAY,SAAUd,GACjC,OAAO9Z,EAAMF,KAAK,UAAWga,EAAMv/C,KACrC,EAEAylC,EAAM0Y,OAAOmC,QAAU,SAAUjoC,GAC/B,OAAOotB,EAAMF,KAAK,QAASltB,EAC7B,EAEAotB,EAAM0Y,OAAOoC,QAAU,SAAUhB,GAC/B9Z,EAAMF,KAAK,QAASga,EAAMxkC,KAAMwkC,EAAMlwB,OACxC,EAEOoW,CACT,CA2CA,OAhCA,EAAI4V,EAAuB,SAAG2E,EAAsB,CAAC,CACnDl8C,IAAK,OACL9I,MAAO,SAAcgF,EAAMwgD,EAAmBz0B,GAC5C,IAAI+J,EAAK/J,GAAYy0B,EAErB,IACEzgD,KAAKo+C,OAAOG,KAAKt+C,GACjB81B,GAGF,CAFE,MAAOzd,GACPyd,EAAGzd,EACL,CACF,GAUC,CACDvU,IAAK,QACL9I,MAAO,SAAe+f,EAAMsU,GAC1BtvB,KAAKo+C,OAAOloB,MAAMlb,EAAMsU,EAC1B,GACC,CACDvrB,IAAK,mBACL9I,MAAO,SAA0ByM,EAAMg5C,EAAU/sC,GAC/C3T,KAAKo+C,OAAOvuB,iBAAiBnoB,EAAMg5C,EAAU/sC,EAC/C,KAEKssC,CACT,CAhFwC,CANpBnX,EAAQ,OAsFZkX,kDC1GhB,IAAIW,mCACJ,IAAIC,EAAQ,IAAIvuD,WAAW,IACZ,SAASwuD,IAEtB,IAAKF,KAGHA,EAAoC,qBAAXG,QAA0BA,OAAOH,iBAAmBG,OAAOH,gBAAgB/mD,KAAKknD,SAA+B,qBAAbC,UAAgE,oBAA7BA,SAASJ,iBAAkCI,SAASJ,gBAAgB/mD,KAAKmnD,WAGrO,MAAM,IAAIhtD,MAAM,4GAIpB,OAAO4sD,EAAgBC,EACzB,CClBA,4HCQA,ICFA,MAJA,SAAkBtG,GAChB,MAAuB,kBAATA,GAAqB0G,EAAAA,KAAW1G,EAChD,EDEI2G,EAAY,GAEPtpD,EAAI,EAAGA,EAAI,MAAOA,EACzBspD,EAAUrpD,MAAMD,EAAI,KAAOyE,SAAS,IAAIk/B,OAAO,IAoBjD,MAjBA,SAAmB/4B,GACjB,IAAIrP,EAASy3C,UAAU/3C,OAAS,QAAsB0F,IAAjBqyC,UAAU,GAAmBA,UAAU,GAAK,EAG7E2P,GAAQ2G,EAAU1+C,EAAIrP,EAAS,IAAM+tD,EAAU1+C,EAAIrP,EAAS,IAAM+tD,EAAU1+C,EAAIrP,EAAS,IAAM+tD,EAAU1+C,EAAIrP,EAAS,IAAM,IAAM+tD,EAAU1+C,EAAIrP,EAAS,IAAM+tD,EAAU1+C,EAAIrP,EAAS,IAAM,IAAM+tD,EAAU1+C,EAAIrP,EAAS,IAAM+tD,EAAU1+C,EAAIrP,EAAS,IAAM,IAAM+tD,EAAU1+C,EAAIrP,EAAS,IAAM+tD,EAAU1+C,EAAIrP,EAAS,IAAM,IAAM+tD,EAAU1+C,EAAIrP,EAAS,KAAO+tD,EAAU1+C,EAAIrP,EAAS,KAAO+tD,EAAU1+C,EAAIrP,EAAS,KAAO+tD,EAAU1+C,EAAIrP,EAAS,KAAO+tD,EAAU1+C,EAAIrP,EAAS,KAAO+tD,EAAU1+C,EAAIrP,EAAS,MAAM63C,cAMzf,IAAKmW,EAAS5G,GACZ,MAAMhoD,UAAU,+BAGlB,OAAOgoD,CACT,EEJA,MApBA,SAAY3mC,EAASy1B,EAAKl2C,GAExB,IAAIiuD,GADJxtC,EAAUA,GAAW,CAAC,GACHytC,SAAWztC,EAAQktC,KAAOA,KAK7C,GAHAM,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvB/X,EAAK,CACPl2C,EAASA,GAAU,EAEnB,IAAK,IAAIyE,EAAI,EAAGA,EAAI,KAAMA,EACxByxC,EAAIl2C,EAASyE,GAAKwpD,EAAKxpD,GAGzB,OAAOyxC,CACT,CAEA,OAAO34B,EAAU0wC,EACnB,yBCrBA,IAAIE,EAAgB,EAAQ,OAE5B,SAASC,IAiBP,MAhBuB,qBAAZtK,SAA2BA,QAAQjxC,KAC5CyuC,EAAO53C,QAAU0kD,EAAOtK,QAAQjxC,IAAInM,OAAQ46C,EAAO53C,QAAQw6C,YAAa,EAAM5C,EAAO53C,QAAiB,QAAI43C,EAAO53C,UAEjH43C,EAAO53C,QAAU0kD,EAAO,SAActS,EAAQj8C,EAAUwuD,GACtD,IAAIpqC,EAAOkqC,EAAcrS,EAAQj8C,GACjC,GAAKokB,EAAL,CACA,IAAIy/B,EAAOvjD,OAAO0jD,yBAAyB5/B,EAAMpkB,GAEjD,OAAI6jD,EAAK7wC,IACA6wC,EAAK7wC,IAAI5L,KAAKwwC,UAAU/3C,OAAS,EAAIo8C,EAASuS,GAGhD3K,EAAK37C,KAPK,CAQnB,EAAGu5C,EAAO53C,QAAQw6C,YAAa,EAAM5C,EAAO53C,QAAiB,QAAI43C,EAAO53C,SAGnE0kD,EAAK1T,MAAM5tC,KAAM2qC,UAC1B,CAEA6J,EAAO53C,QAAU0kD,EAAM9M,EAAO53C,QAAQw6C,YAAa,EAAM5C,EAAO53C,QAAiB,QAAI43C,EAAO53C,2BChB5F43C,EAAO53C,QANP,SAAgCuc,GAC9B,OAAOA,GAAOA,EAAIi+B,WAAaj+B,EAAM,CACnC,QAAWA,EAEf,EAEyCq7B,EAAO53C,QAAQw6C,YAAa,EAAM5C,EAAO53C,QAAiB,QAAI43C,EAAO53C,+BCN9G,IAAI4kD,EAAiB,EAAQ,OAW7BhN,EAAO53C,QATP,SAAwB6kD,EAAQ1uD,GAC9B,MAAQM,OAAOG,UAAU0G,eAAeC,KAAKsnD,EAAQ1uD,IAEpC,QADf0uD,EAASD,EAAeC,MAI1B,OAAOA,CACT,EAEiCjN,EAAO53C,QAAQw6C,YAAa,EAAM5C,EAAO53C,QAAiB,QAAI43C,EAAO53C,+LCThGI,EAAMC,OAAO,GACbC,EAAMD,OAAO,GACbE,EAAMF,OAAO,GACbykD,EAAQzkD,OAAO,KACf0kD,EAAc,SAAAxkD,EAAOF,OAAO,MAAOA,OAAO,0CAC1C2kD,EAAQvuD,OAAOwiB,OAAO,CACxB04B,EAAGtxC,QAAQ,GACX45C,EAAG55C,OAAO,iFACV4kD,EAAG,SAAA1kD,EAAOukD,GAAQzkD,OAAO,IACzBiB,EAAGyjD,EACH/nC,EAAG+nC,EACH1jD,EAAGhB,OAAO,GACV6kD,GAAI7kD,OAAO,iFACX8kD,GAAI9kD,OAAO,mFAGT+kD,EAAW,KAAH,IAAG7kD,EAAOF,OAAO,MACzBglD,EAAUhlD,OAAO,iFAEjBilD,GADSjlD,OAAO,gFACIA,OAAO,kFAC3BklD,EAAoBllD,OAAO,iFAC3BmlD,EAAiBnlD,OAAO,gFACxBolD,EAAiBplD,OAAO,iFACxBqlD,EAAa,WACf,WAAY7kD,EAAGC,EAAG6kD,EAAG5kD,IAAG,eACpBqC,KAAKvC,EAAIA,EACTuC,KAAKtC,EAAIA,EACTsC,KAAKuiD,EAAIA,EACTviD,KAAKrC,EAAIA,CACb,CAeC,OAfA,8BAgBD,SAAO6kD,GACHC,EAAeD,GACf,IAAWE,EAAqB1iD,KAAxBvC,EAAUklD,EAAc3iD,KAAjBtC,EAAUklD,EAAO5iD,KAAVuiD,EACXM,EAAqBL,EAAxB/kD,EAAUqlD,EAAcN,EAAjB9kD,EAAUqlD,EAAOP,EAAVD,EAChBS,EAAO7L,EAAIuL,EAAKK,GAChBE,EAAO9L,EAAI0L,EAAKD,GAChBM,EAAO/L,EAAIwL,EAAKI,GAChBI,EAAOhM,EAAI2L,EAAKF,GACtB,OAAOI,IAASC,GAAQC,IAASC,CACrC,GAAC,oBACD,WACI,OAAO,IAAIb,EAAcnL,GAAKn3C,KAAKvC,GAAIuC,KAAKtC,EAAGsC,KAAKuiD,EAAGpL,GAAKn3C,KAAKrC,GACrE,GAAC,oBACD,WACI,IAAW+kD,EAAqB1iD,KAAxBvC,EAAUklD,EAAc3iD,KAAjBtC,EAAUklD,EAAO5iD,KAAVuiD,EACdhU,EAAMqT,EAANrT,EACF6U,EAAIjM,EAAI,KAAD,IAACuL,EAAMvlD,IACdgC,EAAIg4C,EAAI,KAAD,IAACwL,EAAMxlD,IACdkmD,EAAIlM,EAAIh6C,EAAMg6C,EAAI,KAAD,IAACyL,EAAMzlD,KACxBmmD,EAAInM,EAAI5I,EAAI6U,GACZrQ,EAAIoE,EAAIA,EAAI,KAAD,IAAEuL,EAAKC,EAAOxlD,IAAOimD,EAAIjkD,GACpCokD,EAAID,EAAInkD,EACRqkD,EAAID,EAAIF,EACRI,EAAIH,EAAInkD,EACRukD,EAAKvM,EAAIpE,EAAIyQ,GACbG,EAAKxM,EAAIoM,EAAIE,GACbG,EAAKzM,EAAIpE,EAAI0Q,GAEnB,OAAO,IAAInB,EAAcoB,EAAIC,EADlBxM,EAAIqM,EAAID,GACkBK,EACzC,GAAC,iBACD,SAAIpB,GACAC,EAAeD,GACf,IAAWE,EAA4B1iD,KAA/BvC,EAAUklD,EAAqB3iD,KAAxBtC,EAAUklD,EAAc5iD,KAAjBuiD,EAAUsB,EAAO7jD,KAAVrC,EAClBklD,EAA4BL,EAA/B/kD,EAAUqlD,EAAqBN,EAAxB9kD,EAAUqlD,EAAcP,EAAjBD,EAAUuB,EAAOtB,EAAV7kD,EACvBylD,EAAIjM,GAAKwL,EAAKD,IAAOI,EAAKD,IAC1B1jD,EAAIg4C,GAAKwL,EAAKD,IAAOI,EAAKD,IAC1BW,EAAIrM,EAAIh4C,EAAIikD,GAClB,GAAII,IAAMxmD,EACN,OAAOgD,KAAK+jD,SAChB,IAAMV,EAAIlM,EAAIyL,EAAKzlD,EAAM2mD,GACnBR,EAAInM,EAAI0M,EAAK1mD,EAAM4lD,GACnBhQ,EAAIuQ,EAAID,EACRE,EAAIpkD,EAAIikD,EACRK,EAAIH,EAAID,EACRK,EAAKvM,EAAIpE,EAAIyQ,GACbG,EAAKxM,EAAIoM,EAAIE,GACbG,EAAKzM,EAAIpE,EAAI0Q,GAEnB,OAAO,IAAInB,EAAcoB,EAAIC,EADlBxM,EAAIqM,EAAID,GACkBK,EACzC,GAAC,sBACD,SAASpB,GACL,OAAOxiD,KAAKqQ,IAAImyC,EAAMwB,SAC1B,GAAC,8BACD,SAAiBC,GAKb,IAJA,IAAMC,EAAU,EAAI,IAAMD,EACpBE,EAAS,GACXhH,EAAIn9C,KACJmX,EAAOgmC,EACFgD,EAAS,EAAGA,EAAS+D,EAAS/D,IAAU,CAC7ChpC,EAAOgmC,EACPgH,EAAOvsD,KAAKuf,GACZ,IAAK,IAAIxf,EAAI,EAAGA,EAAI,KAAH,IAAG,EAAMssD,EAAI,GAAItsD,IAC9Bwf,EAAOA,EAAK9G,IAAI8sC,GAChBgH,EAAOvsD,KAAKuf,GAEhBgmC,EAAIhmC,EAAK4sC,QACb,CACA,OAAOI,CACX,GAAC,kBACD,SAAKvqC,EAAGwqC,IACCA,GAAepkD,KAAKyD,OAAO6+C,EAAczN,QAC1CuP,EAAcC,EAAMxP,MACxB,IAAMoP,EAAKG,GAAeA,EAAYE,cAAiB,EACvD,GAAI,IAAML,EACN,MAAM,IAAIlwD,MAAM,iEAEpB,IAAIwwD,EAAcH,GAAeI,EAAiBz+C,IAAIq+C,GACjDG,IACDA,EAAcvkD,KAAKykD,iBAAiBR,GAChCG,GAAqB,IAANH,IACfM,EAAcjC,EAAcoC,WAAWH,GACvCC,EAAiB9jD,IAAI0jD,EAAaG,KAU1C,IAPA,IAAIpH,EAAImF,EAAcqC,KAClBC,EAAItC,EAAcqC,KAChBT,EAAU,EAAI,IAAMD,EACpBY,EAAa,KAAH,IAAG,EAAMZ,EAAI,GACvBa,EAAO7nD,OAAO,WAAKgnD,GAAI,GACvBc,EAAY,KAAH,IAAG,EAAKd,GACjBe,EAAU/nD,OAAOgnD,GACd9D,EAAS,EAAGA,EAAS+D,EAAS/D,IAAU,CAC7C,IAAMjtD,EAASitD,EAAS0E,EACpBI,EAAQjyD,OAAO4mB,EAAIkrC,GAMvB,GALAlrC,IAAMorC,EACFC,EAAQJ,IACRI,GAASF,EACTnrC,GAAK1c,GAEK,IAAV+nD,EAAa,CACb,IAAIC,EAAKX,EAAYrxD,GACjBitD,EAAS,IACT+E,EAAKA,EAAGlB,UACZY,EAAIA,EAAEv0C,IAAI60C,EACd,KACK,CACD,IAAIC,EAASZ,EAAYrxD,EAASiB,KAAKy/C,IAAIqR,GAAS,GAChDA,EAAQ,IACRE,EAASA,EAAOnB,UACpB7G,EAAIA,EAAE9sC,IAAI80C,EACd,CACJ,CACA,OAAO7C,EAAcoC,WAAW,CAACvH,EAAGyH,IAAI,EAC5C,GAAC,sBACD,SAASQ,EAAQhB,GACb,OAAOpkD,KAAKqlD,KAAKC,EAAgBF,EAAQxD,EAAM1jD,GAAIkmD,EACvD,GAAC,4BACD,SAAegB,GACX,IAAIxrC,EAAI0rC,EAAgBF,EAAQxD,EAAM1jD,GAAG,GACnCqlD,EAAIjB,EAAczN,KAClB0Q,EAAKjD,EAAcqC,KACzB,GAAI/qC,IAAM5c,EACN,OAAOuoD,EACX,GAAIvlD,KAAKyD,OAAO8hD,IAAO3rC,IAAM1c,EACzB,OAAO8C,KACX,GAAIA,KAAKyD,OAAO8/C,GACZ,OAAOvjD,KAAKqlD,KAAKzrC,GAGrB,IAFA,IAAIujC,EAAIoI,EACJ1O,EAAI72C,KACD4Z,EAAI5c,GACH4c,EAAI1c,IACJigD,EAAIA,EAAE9sC,IAAIwmC,IACdA,EAAIA,EAAEkN,SACNnqC,IAAM1c,EAEV,OAAOigD,CACX,GAAC,0BACD,WACI,OAAOn9C,KAAKwlD,eAAe5D,EAAM3jD,GAAGwF,OAAO6+C,EAAcqC,KAC7D,GAAC,2BACD,WACI,OAAO3kD,KAAKwlD,eAAe5D,EAAM1jD,GAAGuF,OAAO6+C,EAAcqC,KAC7D,GAAC,sBACD,WAAgC,IAAvBc,EAAO,UAAH,6CAAGC,EAAO1lD,KAAKuiD,GAChB9kD,EAAYuC,KAAZvC,EAAGC,EAASsC,KAATtC,EAAG6kD,EAAMviD,KAANuiD,EACRoD,EAAKxO,EAAI15C,EAAIgoD,GACbG,EAAKzO,EAAIz5C,EAAI+nD,GACbI,EAAK1O,EAAIoL,EAAIkD,GACnB,GAAII,IAAO3oD,EACP,MAAM,IAAInJ,MAAM,oBACpB,OAAO,IAAIswD,EAAMsB,EAAIC,EACzB,GAAC,gCACD,WACIE,GACJ,GAAC,8BACD,WACIA,GACJ,GAAC,+BACD,WACIA,GACJ,IAAC,yBA/KD,SAAkB3I,GACd,KAAMA,aAAakH,GACf,MAAM,IAAI/xD,UAAU,4CAExB,OAAI6qD,EAAE15C,OAAO4gD,EAAMM,MACRrC,EAAcqC,KAClB,IAAIrC,EAAcnF,EAAE1/C,EAAG0/C,EAAEz/C,EAAGR,EAAKi6C,EAAIgG,EAAE1/C,EAAI0/C,EAAEz/C,GACxD,GAAC,2BACD,SAAqBymD,GACjB,IAAM4B,EAged,SAAqBC,GAAmB,IAAb7I,EAAI,UAAH,6CAAGyE,EAAMC,EAC3BoE,EAAM,IAAI9tD,MAAM6tD,EAAKpzD,QAOrBszD,EAAWR,EANMM,EAAKluD,QAAO,SAACO,EAAK69C,EAAKv+C,GAC1C,OAAIu+C,IAAQl5C,EACD3E,GACX4tD,EAAItuD,GAAKU,EACF8+C,EAAI9+C,EAAM69C,EAAKiH,GAC1B,GAAGjgD,GACqCigD,GAOxC,OANA6I,EAAKG,aAAY,SAAC9tD,EAAK69C,EAAKv+C,GACxB,OAAIu+C,IAAQl5C,EACD3E,GACX4tD,EAAItuD,GAAKw/C,EAAI9+C,EAAM4tD,EAAItuD,GAAIwlD,GACpBhG,EAAI9+C,EAAM69C,EAAKiH,GAC1B,GAAG+I,GACID,CACX,CAhfsBG,CAAYjC,EAAO19C,KAAI,SAAC02C,GAAC,OAAKA,EAAEoF,CAAC,KAC/C,OAAO4B,EAAO19C,KAAI,SAAC02C,EAAGxlD,GAAC,OAAKwlD,EAAEkJ,SAASN,EAAMpuD,GAAG,GACpD,GAAC,wBACD,SAAkBwsD,GACd,OAAOnkD,KAAKsmD,cAAcnC,GAAQ19C,IAAIzG,KAAKumD,WAC/C,KAAC,EArBc,GA0LnB,SAAS9D,EAAeD,GACpB,KAAMA,aAAiBF,GACnB,MAAM,IAAIhwD,UAAU,yBAC5B,CACA,SAASk0D,EAAehE,GACpB,KAAMA,aAAiBiE,GACnB,MAAM,IAAIn0D,UAAU,0BAC5B,CACA,SAASwzD,IACL,MAAM,IAAI/xD,MAAM,0CACpB,CAZAuuD,EAAczN,KAAO,IAAIyN,EAAcV,EAAME,GAAIF,EAAMG,GAAI7kD,EAAKi6C,EAAIyK,EAAME,GAAKF,EAAMG,KACrFO,EAAcqC,KAAO,IAAIrC,EAActlD,EAAKE,EAAKA,EAAKF,GAWrD,IACKypD,EAAc,WAChB,WAAYC,IAAI,eACZ1mD,KAAK0mD,GAAKA,CACd,CAuDC,OAvDA,kCAwDD,WACI,IAOIpD,EAPJ,EAAqBtjD,KAAK0mD,GAApBjpD,EAAC,EAADA,EAAGC,EAAC,EAADA,EAAG6kD,EAAC,EAADA,EAAG5kD,EAAC,EAADA,EACTgpD,EAAKxP,EAAIA,EAAIoL,EAAI7kD,GAAKy5C,EAAIoL,EAAI7kD,IAC9BkpD,EAAKzP,EAAI15C,EAAIC,GACJmpD,EAAYC,EAAW3P,EAAIwP,EAAK,KAAH,IAAGC,EAAMzpD,KAA7ClC,MACF8rD,EAAK5P,EAAI0P,EAAUF,GACnBK,EAAK7P,EAAI0P,EAAUD,GACnBK,EAAO9P,EAAI4P,EAAKC,EAAKrpD,GAE3B,GAAIupD,EAAavpD,EAAIspD,GAAO,CACxB,IAAI/H,EAAK/H,EAAIz5C,EAAIukD,GACbkF,EAAKhQ,EAAI15C,EAAIwkD,GACjBxkD,EAAIyhD,EACJxhD,EAAIypD,EACJ7D,EAAInM,EAAI4P,EAAK5E,EACjB,MAEImB,EAAI0D,EAEJE,EAAazpD,EAAIwpD,KACjBvpD,EAAIy5C,GAAKz5C,IACb,IAAIS,EAAIg5C,GAAKoL,EAAI7kD,GAAK4lD,GAGtB,OAFI4D,EAAa/oD,KACbA,EAAIg5C,GAAKh5C,IACNipD,EAAkBjpD,EAC7B,GAAC,mBACD,WACI,OAAOkpD,EAAWrnD,KAAKsnD,aAC3B,GAAC,sBACD,WACI,OAAOtnD,KAAKunD,OAChB,GAAC,oBACD,SAAO/E,GACHgE,EAAehE,GACf,IAAMjU,EAAIvuC,KAAK0mD,GACTt0D,EAAIowD,EAAMkE,GACVc,EAAMrQ,EAAI5I,EAAE9wC,EAAIrL,EAAEsL,KAAOy5C,EAAI5I,EAAE7wC,EAAItL,EAAEqL,GACrCgqD,EAAMtQ,EAAI5I,EAAE7wC,EAAItL,EAAEsL,KAAOy5C,EAAI5I,EAAE9wC,EAAIrL,EAAEqL,GAC3C,OAAO+pD,GAAOC,CAClB,GAAC,iBACD,SAAIjF,GAEA,OADAgE,EAAehE,GACR,IAAIiE,EAAezmD,KAAK0mD,GAAGr2C,IAAImyC,EAAMkE,IAChD,GAAC,sBACD,SAASlE,GAEL,OADAgE,EAAehE,GACR,IAAIiE,EAAezmD,KAAK0mD,GAAGgB,SAASlF,EAAMkE,IACrD,GAAC,sBACD,SAAStB,GACL,OAAO,IAAIqB,EAAezmD,KAAK0mD,GAAGiB,SAASvC,GAC/C,GAAC,4BACD,SAAeA,GACX,OAAO,IAAIqB,EAAezmD,KAAK0mD,GAAGlB,eAAeJ,GACrD,IAAC,wCA5GD,SAAiCwC,GAC7B,IAAQ/Q,EAAM+K,EAAN/K,EACFC,EAAIK,EAAI8K,EAAU2F,EAAKA,GACvBC,EAAK1Q,GAAKL,EAAI55C,GAAOklD,GACvBvvB,EAAI51B,QAAQ,GACVqmD,EAAInM,GAAKtkB,EAAIgkB,EAAIC,GAAKK,EAAIL,EAAID,IACpC,EAAwCiR,EAAQD,EAAIvE,GAArCyE,EAAU,EAAnBC,QAA4B7pD,EAAC,EAARlD,MACvBgtD,EAAK9Q,EAAIh5C,EAAIypD,GACZV,EAAae,KACdA,EAAK9Q,GAAK8Q,IACTF,IACD5pD,EAAI8pD,GACHF,IACDl1B,EAAIikB,GACR,IAAMoR,EAAK/Q,EAAItkB,GAAKikB,EAAI55C,GAAOmlD,EAAiBiB,GAC1C6E,EAAKhqD,EAAIA,EACTiqD,EAAKjR,GAAKh5C,EAAIA,GAAKmlD,GACnB+E,EAAKlR,EAAI+Q,EAAKhG,GACdoG,EAAKnR,EAAIj6C,EAAMirD,GACfI,EAAKpR,EAAIj6C,EAAMirD,GACrB,OAAO,IAAI7F,EAAcnL,EAAIiR,EAAKG,GAAKpR,EAAImR,EAAKD,GAAKlR,EAAIkR,EAAKE,GAAKpR,EAAIiR,EAAKE,GAChF,GAAC,yBACD,SAAmBrS,GAEf,IAAMuS,EAAKC,GADXxS,EAAMyS,EAAYzS,EAAK,KACWh6C,MAAM,EAAG,KACrC0sD,EAAK3oD,KAAK4oD,0BAA0BJ,GACpCK,EAAKJ,EAAmBxS,EAAIh6C,MAAM,GAAI,KACtC6sD,EAAK9oD,KAAK4oD,0BAA0BC,GAC1C,OAAO,IAAIpC,EAAekC,EAAGt4C,IAAIy4C,GACrC,GAAC,qBACD,SAAe7S,GACXA,EAAMyS,EAAYzS,EAAK,IACvB,IAAQ1H,EAASqT,EAATrT,EAAGsI,EAAM+K,EAAN/K,EACLkS,EAAO,0EACP5qD,EAAIsqD,EAAmBxS,GAC7B,IA4UR,SAAoB+S,EAAIC,GACpB,GAAID,EAAGp2D,SAAWq2D,EAAGr2D,OACjB,OAAO,EAEX,IAAK,IAAI+E,EAAI,EAAGA,EAAIqxD,EAAGp2D,OAAQ+E,IAC3B,GAAIqxD,EAAGrxD,KAAOsxD,EAAGtxD,GACb,OAAO,EAGf,OAAO,CACX,CAtVauxD,CAAW9B,EAAkBjpD,GAAI83C,IAAQiR,EAAa/oD,GACvD,MAAM,IAAIpK,MAAMg1D,GACpB,IAAMZ,EAAKhR,EAAIh5C,EAAIA,GACbwoD,EAAKxP,EAAIj6C,EAAMqxC,EAAI4Z,GACnBvB,EAAKzP,EAAIj6C,EAAMqxC,EAAI4Z,GACnBgB,EAAOhS,EAAIwP,EAAKA,GAChByC,EAAOjS,EAAIyP,EAAKA,GAChB7uD,EAAIo/C,EAAI5I,EAAIsI,EAAIsS,EAAOC,GAC7B,EAA8BtC,EAAW3P,EAAIp/C,EAAIqxD,IAAzCpB,EAAO,EAAPA,QAAgBqB,EAAC,EAARpuD,MACXquD,EAAKnS,EAAIkS,EAAIzC,GACb2C,EAAKpS,EAAIkS,EAAIC,EAAKvxD,GACpB0F,EAAI05C,GAAKh5C,EAAIA,GAAKmrD,GAClBpC,EAAazpD,KACbA,EAAI05C,GAAK15C,IACb,IAAMC,EAAIy5C,EAAIwP,EAAK4C,GACb5rD,EAAIw5C,EAAI15C,EAAIC,GAClB,IAAKsqD,GAAWd,EAAavpD,IAAMD,IAAMV,EACrC,MAAM,IAAIjJ,MAAMg1D,GACpB,OAAO,IAAItC,EAAe,IAAInE,EAAc7kD,EAAGC,EAAGR,EAAKS,GAC3D,KAAC,EA1De,GAkHpB8oD,EAAe5R,KAAO,IAAI4R,EAAenE,EAAczN,MACvD4R,EAAe9B,KAAO,IAAI8B,EAAenE,EAAcqC,MACvD,IAAMH,EAAmB,IAAIgF,QACvBnF,EAAK,WACP,WAAY5mD,EAAGC,IAAG,eACdsC,KAAKvC,EAAIA,EACTuC,KAAKtC,EAAIA,CACb,CA8BC,OA9BA,sCACD,SAAemnD,GACX7kD,KAAKskD,aAAeO,EACpBL,EAAiBh6C,OAAOxK,KAC5B,GAAC,wBA2BD,WACI,IAAMa,EAAQumD,EAAkBpnD,KAAKtC,GAErC,OADAmD,EAAM,KAAOb,KAAKvC,EAAIP,EAAM,IAAO,EAC5B2D,CACX,GAAC,mBACD,WACI,OAAOwmD,EAAWrnD,KAAKsnD,aAC3B,GAAC,sBACD,WACI,IAAQ5pD,EAAMsC,KAANtC,EAER,OAAO0pD,EADGjQ,GAAKj6C,EAAMQ,GAAKgoD,EAAOxoD,EAAMQ,IAE3C,GAAC,2BACD,WACI,OAAO4kD,EAAciE,WAAWvmD,MAAMypD,eAC1C,GAAC,oBACD,SAAOjH,GACH,OAAOxiD,KAAKvC,IAAM+kD,EAAM/kD,GAAKuC,KAAKtC,IAAM8kD,EAAM9kD,CAClD,GAAC,oBACD,WACI,OAAO,IAAI2mD,EAAMlN,GAAKn3C,KAAKvC,GAAIuC,KAAKtC,EACxC,GAAC,iBACD,SAAI8kD,GACA,OAAOF,EAAciE,WAAWvmD,MAAMqQ,IAAIiyC,EAAciE,WAAW/D,IAAQ6D,UAC/E,GAAC,sBACD,SAAS7D,GACL,OAAOxiD,KAAKqQ,IAAImyC,EAAMwB,SAC1B,GAAC,sBACD,SAASoB,GACL,OAAO9C,EAAciE,WAAWvmD,MAAM2nD,SAASvC,EAAQplD,MAAMqmD,UACjE,IAAC,sBAxDD,SAAepQ,GAAoB,IAAfyT,IAAS,UAAH,+CACd7S,EAAS+K,EAAT/K,EAAGgL,EAAMD,EAANC,EAEL8H,GADN1T,EAAMyS,EAAYzS,EAAK,KACJh6C,QACnB0tD,EAAO,KAAgB,IAAV1T,EAAI,IACjB,IAAMv4C,EAAIksD,EAAgBD,GAC1B,GAAID,GAAUhsD,GAAKmkD,EACf,MAAM,IAAI9tD,MAAM,wBACpB,IAAK21D,GAAUhsD,GAAKskD,EAChB,MAAM,IAAIjuD,MAAM,6BACpB,IAAM81D,EAAK1S,EAAIz5C,EAAIA,GACbosD,EAAI3S,EAAI0S,EAAK3sD,GACbnF,EAAIo/C,EAAIN,EAAIgT,EAAK3sD,GACvB,EAA4B4qD,EAAQgC,EAAG/xD,GAAjCiwD,EAAO,EAAPA,QAAgBvqD,EAAC,EAARxC,MACf,IAAK+sD,EACD,MAAM,IAAIj0D,MAAM,uCACpB,IAAMg2D,GAAUtsD,EAAIP,KAASA,EACvB8sD,EAAqC,KAAV,IAAV/T,EAAI,KAI3B,OAHI+T,IAAkBD,IAClBtsD,EAAI05C,GAAK15C,IAEN,IAAI4mD,EAAM5mD,EAAGC,EACxB,GAAC,qEACD,WAA4B28B,GAAU,sFACpB4vB,EAAqB5vB,GAAW,uCAAE6vB,OAAK,2CACxD,mDAHA,MAGA,EAlCM,GAmEX7F,EAAMxP,KAAO,IAAIwP,EAAMzC,EAAME,GAAIF,EAAMG,IACvCsC,EAAMM,KAAO,IAAIN,EAAMrnD,EAAKE,GAAK,IAC3BitD,EAAS,WACX,WAAYrT,EAAG34C,IAAG,eACd6B,KAAK82C,EAAIA,EACT92C,KAAK7B,EAAIA,EACT6B,KAAKoqD,gBACT,CAMC,OANA,sCAOD,WACI,IAAQtT,EAAS92C,KAAT82C,EAAG34C,EAAM6B,KAAN7B,EACX,KAAM24C,aAAauN,GACf,MAAM,IAAItwD,MAAM,2BAEpB,OADAuxD,EAAgBnnD,EAAGyjD,EAAM1jD,GAAG,GACrB8B,IACX,GAAC,wBACD,WACI,IAAMqqD,EAAK,IAAIh4D,WAAW,IAG1B,OAFAg4D,EAAG3pD,IAAIV,KAAK82C,EAAEwQ,cACd+C,EAAG3pD,IAAI0mD,EAAkBpnD,KAAK7B,GAAI,IAC3BksD,CACX,GAAC,mBACD,WACI,OAAOhD,EAAWrnD,KAAKsnD,aAC3B,IAAC,sBArBD,SAAerR,GACX,IAAMp1C,EAAQ6nD,EAAYzS,EAAK,IAG/B,OAAO,IAAIkU,EAFD9F,EAAMiG,QAAQzpD,EAAM5E,MAAM,EAAG,KAAK,GAClC2tD,EAAgB/oD,EAAM5E,MAAM,GAAI,KAE9C,KAAC,EAXU,GA8Bf,SAAS2F,IAAuB,2BAAR2oD,EAAM,yBAANA,EAAM,gBAC1B,IAAKA,EAAO54C,OAAM,SAAC48B,GAAC,OAAKA,aAAal8C,UAAU,IAC5C,MAAM,IAAI0B,MAAM,4BACpB,GAAsB,IAAlBw2D,EAAO33D,OACP,OAAO23D,EAAO,GAGlB,IAFA,IAAM33D,EAAS23D,EAAOzyD,QAAO,SAACy2C,EAAGhsC,GAAG,OAAKgsC,EAAIhsC,EAAI3P,MAAM,GAAE,GACnDkqB,EAAS,IAAIzqB,WAAWO,GACrB+E,EAAI,EAAG6yD,EAAM,EAAG7yD,EAAI4yD,EAAO33D,OAAQ+E,IAAK,CAC7C,IAAM4K,EAAMgoD,EAAO5yD,GACnBmlB,EAAOpc,IAAI6B,EAAKioD,GAChBA,GAAOjoD,EAAI3P,MACf,CACA,OAAOkqB,CACX,CACA,IAyMI2tC,EAzMEC,EAAQvyD,MAAM1F,KAAK,CAAEG,OAAQ,MAAO,SAACmF,EAAGJ,GAAC,OAAKA,EAAEyE,SAAS,IAAIg6C,SAAS,EAAG,IAAI,IACnF,SAASiR,EAAWsD,GAChB,KAAMA,aAAkBt4D,YACpB,MAAM,IAAI0B,MAAM,uBAEpB,IADA,IAAIkiD,EAAM,GACDt+C,EAAI,EAAGA,EAAIgzD,EAAO/3D,OAAQ+E,IAC/Bs+C,GAAOyU,EAAMC,EAAOhzD,IAExB,OAAOs+C,CACX,CACA,SAAS2U,EAAW3U,GAChB,GAAmB,kBAARA,EACP,MAAM,IAAI3jD,UAAU,2CAA6C2jD,GAErE,GAAIA,EAAIrjD,OAAS,EACb,MAAM,IAAImB,MAAM,6CAEpB,IADA,IAAM4kB,EAAQ,IAAItmB,WAAW4jD,EAAIrjD,OAAS,GACjC+E,EAAI,EAAGA,EAAIghB,EAAM/lB,OAAQ+E,IAAK,CACnC,IAAMiG,EAAQ,EAAJjG,EACJkzD,EAAU5U,EAAIh6C,MAAM2B,EAAGA,EAAI,GAC3BktD,EAAO93D,OAAOg4B,SAAS6/B,EAAS,IACtC,GAAI73D,OAAO+3D,MAAMD,IAASA,EAAO,EAC7B,MAAM,IAAI/2D,MAAM,yBACpB4kB,EAAMhhB,GAAKmzD,CACf,CACA,OAAOnyC,CACX,CACA,SAASqyC,EAAkB9U,GAGvB,OAAO0U,EADK1U,EAAI95C,SAAS,IAAIg6C,SAASxjD,GAAY,KAEtD,CACA,SAASw0D,EAAkBlR,GACvB,OAAO8U,EAAkB9U,GAAKF,SAClC,CACA,SAASkR,EAAahR,GAClB,OAAQiB,EAAIjB,GAAOh5C,KAASA,CAChC,CACA,SAAS0sD,EAAgBe,GACrB,KAAMA,aAAkBt4D,YACpB,MAAM,IAAI0B,MAAM,uBACpB,OAAOkJ,OAAO,KAAOoqD,EAAWh1D,WAAWI,KAAKk4D,GAAQ3U,WAC5D,CACA,SAASyS,EAAmB5nD,GACxB,OAAOs2C,EAAIyS,EAAgB/oD,GAAU,SAAA1D,EAAOukD,GAAQxkD,EACxD,CACA,SAASi6C,EAAI5I,GAAgB,IAAbn8C,EAAI,UAAH,6CAAGwvD,EAAMC,EAChBt1B,EAAMgiB,EAAIn8C,EAChB,OAAOm6B,GAAOvvB,EAAMuvB,EAAMn6B,EAAIm6B,CAClC,CACA,SAASm5B,EAAOhoC,GAA0B,IAAlButC,EAAS,UAAH,6CAAGrJ,EAAMC,EACnC,GAAInkC,IAAW1gB,GAAOiuD,GAAUjuD,EAC5B,MAAM,IAAIjJ,MAAM,6CAAD,OAA8C2pB,EAAM,gBAAQutC,IAK/E,IAHA,IAAI1c,EAAI4I,EAAIz5B,EAAQutC,GAChB74D,EAAI64D,EACJxtD,EAAIT,EAAKU,EAAIR,EAAK4sD,EAAI5sD,EAAKnF,EAAIiF,EAC5BuxC,IAAMvxC,GAAK,CACd,IAAMkuD,EAAI94D,EAAIm8C,EACRuI,EAAI1kD,EAAIm8C,EACR/C,EAAI/tC,EAAIqsD,EAAIoB,EACZtxC,EAAIlc,EAAI3F,EAAImzD,EAClB94D,EAAIm8C,EAAGA,EAAIuI,EAAGr5C,EAAIqsD,EAAGpsD,EAAI3F,EAAG+xD,EAAIte,EAAGzzC,EAAI6hB,CAC3C,CACA,IAAMuxC,EAAM/4D,EACZ,GAAI+4D,IAAQjuD,EACR,MAAM,IAAInJ,MAAM,0BACpB,OAAOojD,EAAI15C,EAAGwtD,EAClB,CAkBA,SAASG,EAAK3tD,EAAG4tD,GAGb,IAFA,IAAQxJ,EAAMD,EAANC,EACJt1B,EAAM9uB,EACH4tD,KAAUruD,GACbuvB,GAAOA,EACPA,GAAOs1B,EAEX,OAAOt1B,CACX,CACA,SAAS++B,EAAY7tD,GACjB,IAAQokD,EAAMD,EAANC,EACF0J,EAAMtuD,OAAO,GACbuuD,EAAOvuD,OAAO,IACdwuD,EAAOxuD,OAAO,IACdyuD,EAAOzuD,OAAO,IACd0uD,EAAO1uD,OAAO,IAEdgsD,EADMxrD,EAAIA,EAAKokD,EACJpkD,EAAKokD,EAChB+J,EAAMR,EAAKnC,EAAI9rD,GAAO8rD,EAAMpH,EAC5BgK,EAAMT,EAAKQ,EAAI1uD,GAAOO,EAAKokD,EAC3BiK,EAAOV,EAAKS,EAAIN,GAAOM,EAAMhK,EAC7BkK,EAAOX,EAAKU,EAAKN,GAAQM,EAAOjK,EAChCmK,EAAOZ,EAAKW,EAAKN,GAAQM,EAAOlK,EAChCoK,EAAOb,EAAKY,EAAKN,GAAQM,EAAOnK,EAChCqK,EAAQd,EAAKa,EAAKN,GAAQM,EAAOpK,EACjCsK,EAAQf,EAAKc,EAAMP,GAAQM,EAAOpK,EAClCuK,EAAQhB,EAAKe,EAAMX,GAAQM,EAAOjK,EAExC,MAAO,CAAEwK,UADUjB,EAAKgB,EAAMjvD,GAAOM,EAAKokD,EACtBoH,GAAAA,EACxB,CACA,SAASnB,EAAQgC,EAAG/xD,GAChB,IAAMu0D,EAAKnV,EAAIp/C,EAAIA,EAAIA,GACjBw0D,EAAKpV,EAAImV,EAAKA,EAAKv0D,GAErB0F,EAAI05C,EAAI2S,EAAIwC,EADJhB,EAAYxB,EAAIyC,GAAIF,WAE1BG,EAAMrV,EAAIp/C,EAAI0F,EAAIA,GAClBgvD,EAAQhvD,EACRivD,EAAQvV,EAAI15C,EAAIwkD,GAChB0K,EAAWH,IAAQ1C,EACnB8C,EAAWJ,IAAQrV,GAAK2S,GACxB+C,EAASL,IAAQrV,GAAK2S,EAAI7H,GAOhC,OANI0K,IACAlvD,EAAIgvD,IACJG,GAAYC,KACZpvD,EAAIivD,GACJxF,EAAazpD,KACbA,EAAI05C,GAAK15C,IACN,CAAEuqD,QAAS2E,GAAYC,EAAU3xD,MAAOwC,EACnD,CACA,SAASqpD,EAAWppC,GAChB,OAAOoqC,EAAQ5qD,EAAKwgB,EACxB,CACA,SAASovC,EAAOp3B,GACZ,OAAOyhB,EAAIyS,EAAgBl0B,GAAOksB,EAAM1jD,EAC5C,CAYA,SAASwqD,EAAYzS,EAAK8W,GACtB,IAAMlsD,EAAQo1C,aAAe5jD,WAAaA,WAAWI,KAAKwjD,GAAO2U,EAAW3U,GAC5E,GAA8B,kBAAnB8W,GAA+BlsD,EAAMjO,SAAWm6D,EACvD,MAAM,IAAIh5D,MAAM,YAAD,OAAag5D,EAAc,WAC9C,OAAOlsD,CACX,CACA,SAASykD,EAAgBpP,EAAK58B,GAAoB,IAAfowC,IAAS,UAAH,+CACrC,IAAKpwC,EACD,MAAM,IAAIhnB,UAAU,qBAGxB,GAFmB,kBAAR4jD,GAAoBljD,OAAOg6D,cAAc9W,KAChDA,EAAMj5C,OAAOi5C,IACE,kBAARA,GAAoBA,EAAM58B,EACjC,GAAIowC,GACA,GAAI1sD,EAAMk5C,EACN,OAAOA,OAGX,GAAIl5C,GAAOk5C,EACP,OAAOA,EAGnB,MAAM,IAAI5jD,UAAU,0CACxB,CACA,SAAS26D,EAAiBpsD,GAItB,OAHAA,EAAM,IAAM,IACZA,EAAM,KAAO,IACbA,EAAM,KAAO,GACNA,CACX,CAIA,SAASqsD,EAAgBnpD,GAKrB,GAAmB,MAJnBA,EACmB,kBAARA,GAAmC,kBAARA,EAC5BinD,EAAkB1F,EAAgBvhD,EAAKi+C,IACvC0G,EAAY3kD,IACdnR,OACJ,MAAM,IAAImB,MAAM,qBACpB,OAAOgQ,CACX,CACA,SAASopD,EAAeC,GACpB,IAAMC,EAAOJ,EAAiBG,EAAOnxD,MAAM,EAAG,KACxCmS,EAASg/C,EAAOnxD,MAAM,GAAI,IAC1BmpD,EAAS0H,EAAOO,GAChBnD,EAAQ7F,EAAMxP,KAAK8S,SAASvC,GAC5BkI,EAAapD,EAAM5C,aACzB,MAAO,CAAE+F,KAAAA,EAAMj/C,OAAAA,EAAQg3C,OAAAA,EAAQ8E,MAAAA,EAAOoD,WAAAA,EAC1C,CAEA,SAASC,IACL,GAA2B,oBAAhB9C,EACP,MAAM,IAAI12D,MAAM,oDACpB,OAAO02D,EAAW,uBACtB,CAAC,SACcR,EAAqB,GAAD,4CAElC,OAFkC,0BAAnC,WAAoClmD,GAAG,sEACd,OADc,KAC5BopD,EAAc,SAAOK,GAAM7rD,OAAOurD,EAAgBnpD,IAAK,wGACjE,sBACD,SAAS0pD,GAAyB1pD,GAC9B,OAAOopD,EAAeI,EAAQL,EAAgBnpD,IAClD,CAyBA,SAAS2pD,GAAoBrnB,EAAKjkC,EAASL,GACvCK,EAAUsmD,EAAYtmD,GAChBL,aAAqBsiD,IACvBtiD,EAAYsiD,EAAMiG,QAAQvoD,GAAW,IACzC,MAAiBskC,aAAe8jB,EAAY9jB,EAAI+jB,iBAAmBD,EAAUG,QAAQjkB,GAA7EyQ,EAAC,EAADA,EAAG34C,EAAC,EAADA,EAEX,MAAO,CAAE24C,EAAAA,EAAG34C,EAAAA,EAAGwvD,GADJrL,EAAczN,KAAK2Q,eAAernD,GAC1ByvD,IAAK7rD,EAAW44B,IAAKv4B,EAC5C,CACA,SAASyrD,GAAmB9rD,EAAW+0C,EAAG6W,EAAIP,GAC1C,IAAM7W,EAAIuW,EAAOM,GACXU,EAAKxL,EAAciE,WAAWxkD,GAAWyjD,eAAejP,GAE9D,OADY+L,EAAciE,WAAWzP,GAAGzmC,IAAIy9C,GACjCpG,SAASiG,GAAInI,eAAe5D,EAAM3jD,GAAGwF,OAAO6+C,EAAcqC,KACzE,CAWO,IAAMoJ,GAAO,CAChB9D,qBAAsBwD,GACtBzrD,aA/CJ,SAA0Bq4B,GACtB,OAAOozB,GAAyBpzB,GAAYizB,UAChD,EA8CInrD,KApCJ,SAAkBC,EAASi4B,GACvBj4B,EAAUsmD,EAAYtmD,GACtB,MAAuCqrD,GAAyBpzB,GAAxDjsB,EAAM,EAANA,OAAQg3C,EAAM,EAANA,OAAQkI,EAAU,EAAVA,WAClBxW,EAAIgW,EAAOS,EAAQn/C,EAAQhM,IAC3B5E,EAAI6mD,EAAMxP,KAAK8S,SAAS7Q,GAExB34C,EAAIg5C,EAAIL,EADJgW,EAAOS,EAAQ/vD,EAAE8pD,aAAcgG,EAAYlrD,IAC/BgjD,EAAQxD,EAAM1jD,GACpC,OAAO,IAAIisD,EAAU3sD,EAAGW,GAAGmpD,YAC/B,EA6BIjlD,OATJ,SAAoBgkC,EAAKjkC,EAASL,GAC9B,MAA4B2rD,GAAoBrnB,EAAKjkC,EAASL,GAAtD+0C,EAAC,EAADA,EAAG6W,EAAE,EAAFA,GAAIhzB,EAAG,EAAHA,IAAKizB,EAAG,EAAHA,IACdR,EAASG,EAAQzW,EAAEwQ,aAAcsG,EAAItG,aAAc3sB,GACzD,OAAOkzB,GAAmBD,EAAK9W,EAAG6W,EAAIP,EAC1C,GAYA/I,EAAMxP,KAAKmZ,eAAe,GA6DnB,IAcDlN,GAAS,CACXmN,KAAMC,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IACNC,IAAqB,kBAATrT,MAAqB,WAAYA,KAAOA,KAAKgG,YAASxoD,GAEzDk1D,GAAQ,CACjBY,iBAAkB,CACd,mEACA,mEACA,mEACA,mEACA,mEACA,mEACA,mEACA,oEAEJ/G,WAAAA,EACAuD,WAAAA,EACAhpD,YAAAA,EACAqoD,qBAAAA,EACA9S,IAAAA,EACAuO,OAAAA,EACA2I,oBAAqB,SAAC34B,GAElB,IADAA,EAAOgzB,EAAYhzB,IACV9iC,OAAS,IAAM8iC,EAAK9iC,OAAS,KAClC,MAAM,IAAImB,MAAM,yDACpB,OAAOojD,EAAIyS,EAAgBl0B,GAAOksB,EAAM1jD,EAAIhB,GAAOA,CACvD,EACAoxD,YAAa,WAAsB,IAArBz1C,EAAc,UAAH,6CAAG,GACxB,GAAIioC,GAAOqN,IACP,OAAOrN,GAAOqN,IAAIxN,gBAAgB,IAAItuD,WAAWwmB,IAEhD,GAAIioC,GAAOmN,KAAM,CAClB,IAAQK,EAAgBxN,GAAOmN,KAAvBK,YACR,OAAO,IAAIj8D,WAAWi8D,EAAYz1C,GAAanmB,OACnD,CAEI,MAAM,IAAIqB,MAAM,oDAExB,EACAw6D,iBAAkB,WACd,OAAOf,GAAMc,YAAY,GAC7B,EACA3sD,OAAQ,WAAF,8BAAE,uGACoC,GAAlCS,EAAUR,EAAW,iBACvBk/C,GAAOqN,IAAK,CAAF,+BACWrN,GAAOqN,IAAIK,OAAO3zB,OAAO,UAAWz4B,EAAQ1P,QAAO,OAA5D,OAANA,EAAS,EAAH,uBACL,IAAIL,WAAWK,IAAO,WAExBouD,GAAOmN,KAAM,CAAF,yCACT57D,WAAWI,KAAKquD,GAAOmN,KAAKQ,WAAW,UAAU7zB,OAAOx4B,GAASy4B,WAAS,cAG3E,IAAI9mC,MAAM,gDAA+C,4CAEtE,kDAZO,GAaR26D,WAAU,WAAqC,IAApC7J,EAAa,UAAH,6CAAG,EAAGqF,EAAQ,UAAH,6CAAG7F,EAAMxP,KAC/BsQ,EAAS+E,EAAMzmD,OAAO4gD,EAAMxP,MAAQqV,EAAQ,IAAI7F,EAAM6F,EAAMzsD,EAAGysD,EAAMxsD,GAG3E,OAFAynD,EAAO6I,eAAenJ,GACtBM,EAAOwC,SAASxqD,GACTgoD,CACX,EACAwJ,gBAAYr2D,GAEhBjF,OAAOu7D,iBAAiBpB,GAAO,CAC3BmB,WAAY,CACRxb,cAAc,EACdptC,IAAG,WACC,OAAO0kD,CACX,EACA/pD,IAAG,SAAC0Y,GACKqxC,IACDA,EAAcrxC,EACtB,yCCv2BD,SAASsE,EAAO9D,GACnB,IAAK5mB,OAAOg6D,cAAcpzC,IAAMA,EAAI,EAChC,MAAM,IAAI7lB,MAAM,2BAAD,OAA4B6lB,GACnD,CAKO,SAAS/Y,EAAMzO,GAClB,KAAMA,aAAaC,YACf,MAAM,IAAIC,UAAU,uBAAuB,2BAFvBu8D,EAAO,iCAAPA,EAAO,kBAG/B,GAAIA,EAAQj8D,OAAS,IAAMi8D,EAAQh+C,SAASze,EAAEQ,QAC1C,MAAM,IAAIN,UAAU,iCAAD,OAAkCu8D,EAAO,2BAAmBz8D,EAAEQ,QACzF,CAoBA,IAAMmM,EAAS,CACX2e,OAAAA,EACAoxC,KA/BG,SAAc18D,GACjB,GAAiB,mBAANA,EACP,MAAM,IAAI2B,MAAM,yBAAD,OAA0B3B,GACjD,EA6BIyO,MAAAA,EACA60B,KAvBG,SAAcA,GACjB,GAAoB,oBAATA,GAA8C,oBAAhBA,EAAKpiC,OAC1C,MAAM,IAAIS,MAAM,mDACpB2pB,EAAOgY,EAAKl3B,WACZkf,EAAOgY,EAAKp3B,SAChB,EAmBIywD,OAlBG,SAAgB3yC,GAAgC,IAAtB4yC,IAAgB,UAAH,+CAC1C,GAAI5yC,EAAStd,UACT,MAAM,IAAI/K,MAAM,oCACpB,GAAIi7D,GAAiB5yC,EAASvd,SAC1B,MAAM,IAAI9K,MAAM,wCACxB,EAcIk7D,OAbG,SAAgB1uD,EAAK6b,GACxBvb,EAAMN,GACN,IAAMF,EAAM+b,EAAS5d,UACrB,GAAI+B,EAAI3N,OAASyN,EACb,MAAM,IAAItM,MAAM,yDAAD,OAA0DsM,GAEjF,GASA,4JCzBO,IAAM6uD,EAAI,0CACb,WAAY5wD,EAAUE,EAAW2wD,EAAWC,GAAM,MAWV,OAXU,gBAC9C,gBACK9wD,SAAWA,EAChB,EAAKE,UAAYA,EACjB,EAAK2wD,UAAYA,EACjB,EAAKC,KAAOA,EACZ,EAAKvwD,UAAW,EAChB,EAAKjM,OAAS,EACd,EAAK+L,IAAM,EACX,EAAKG,WAAY,EACjB,EAAKpM,OAAS,IAAIL,WAAWiM,GAC7B,EAAK+wD,MAAOC,EAAAA,EAAAA,IAAW,EAAK58D,QAAQ,CACxC,CAyEC,OAzEA,8BACD,SAAOuN,GACHlB,EAAAA,GAAAA,OAAciB,MAId,IAHA,IAAQqvD,EAA2BrvD,KAA3BqvD,KAAM38D,EAAqBsN,KAArBtN,OAAQ4L,EAAa0B,KAAb1B,SAEhB4B,GADND,GAAOE,EAAAA,EAAAA,IAAQF,IACErN,OACR+L,EAAM,EAAGA,EAAMuB,GAAM,CAC1B,IAAME,EAAOjM,KAAKkM,IAAI/B,EAAW0B,KAAKrB,IAAKuB,EAAMvB,GAEjD,GAAIyB,IAAS9B,EAMb5L,EAAOgO,IAAIT,EAAKU,SAAShC,EAAKA,EAAMyB,GAAOJ,KAAKrB,KAChDqB,KAAKrB,KAAOyB,EACZzB,GAAOyB,EACHJ,KAAKrB,MAAQL,IACb0B,KAAKkoB,QAAQmnC,EAAM,GACnBrvD,KAAKrB,IAAM,QATX,IADA,IAAM4wD,GAAWD,EAAAA,EAAAA,IAAWrvD,GACrB3B,GAAY4B,EAAMvB,EAAKA,GAAOL,EACjC0B,KAAKkoB,QAAQqnC,EAAU5wD,EAUnC,CAGA,OAFAqB,KAAKpN,QAAUqN,EAAKrN,OACpBoN,KAAKwvD,aACExvD,IACX,GAAC,wBACD,SAAWO,GACPxB,EAAAA,GAAAA,OAAciB,MACdjB,EAAAA,GAAAA,OAAcwB,EAAKP,MACnBA,KAAKnB,UAAW,EAIhB,IAAQnM,EAAiCsN,KAAjCtN,OAAQ28D,EAAyBrvD,KAAzBqvD,KAAM/wD,EAAmB0B,KAAnB1B,SAAU8wD,EAASpvD,KAATovD,KAC1BzwD,EAAQqB,KAARrB,IAENjM,EAAOiM,KAAS,IAChBqB,KAAKtN,OAAOiO,SAAShC,GAAKmB,KAAK,GAE3BE,KAAKmvD,UAAY7wD,EAAWK,IAC5BqB,KAAKkoB,QAAQmnC,EAAM,GACnB1wD,EAAM,GAGV,IAAK,IAAIhH,EAAIgH,EAAKhH,EAAI2G,EAAU3G,IAC5BjF,EAAOiF,GAAK,GAxExB,SAAsB03D,EAAM18D,EAAYsI,EAAOm0D,GAC3C,GAAiC,oBAAtBC,EAAKI,aACZ,OAAOJ,EAAKI,aAAa98D,EAAYsI,EAAOm0D,GAChD,IAAMM,EAAOzyD,OAAO,IACd0yD,EAAW1yD,OAAO,YAClB2yD,EAAK58D,OAAQiI,GAASy0D,EAAQC,GAC9BE,EAAK78D,OAAOiI,EAAQ00D,GACpB1xD,EAAImxD,EAAO,EAAI,EACflxD,EAAIkxD,EAAO,EAAI,EACrBC,EAAKS,UAAUn9D,EAAasL,EAAG2xD,EAAIR,GACnCC,EAAKS,UAAUn9D,EAAauL,EAAG2xD,EAAIT,EACvC,CAiEQK,CAAaJ,EAAM/wD,EAAW,EAAGrB,OAAqB,EAAd+C,KAAKpN,QAAaw8D,GAC1DpvD,KAAKkoB,QAAQmnC,EAAM,GACnB,IAAMU,GAAQT,EAAAA,EAAAA,IAAW/uD,GACzBP,KAAK+F,MAAMzB,SAAQ,SAACvM,EAAGJ,GAAC,OAAKo4D,EAAMD,UAAU,EAAIn4D,EAAGI,EAAGq3D,EAAK,GAChE,GAAC,oBACD,WACI,IAAQ18D,EAAsBsN,KAAtBtN,OAAQ8L,EAAcwB,KAAdxB,UAChBwB,KAAKgB,WAAWtO,GAChB,IAAM65B,EAAM75B,EAAOuJ,MAAM,EAAGuC,GAE5B,OADAwB,KAAKe,UACEwrB,CACX,GAAC,wBACD,SAAWtrB,GAAI,MACXA,IAAOA,EAAK,IAAIjB,KAAKzM,cACrB,EAAA0N,GAAGP,IAAG,gBAAIV,KAAK+F,QACf,IAAQzH,EAAuD0B,KAAvD1B,SAAU5L,EAA6CsN,KAA7CtN,OAAQE,EAAqCoN,KAArCpN,OAAQiM,EAA6BmB,KAA7BnB,SAAUC,EAAmBkB,KAAnBlB,UAAWH,EAAQqB,KAARrB,IAOvD,OANAsC,EAAGrO,OAASA,EACZqO,EAAGtC,IAAMA,EACTsC,EAAGpC,SAAWA,EACdoC,EAAGnC,UAAYA,EACXlM,EAAS0L,GACT2C,EAAGvO,OAAOgO,IAAIhO,GACXuO,CACX,KAAC,EAtFY,CAASC,EAAAA,wCChB1B,IAAM8uD,EAAa/yD,OAAO,WAAK,IAAK,GAC9ByyD,EAAOzyD,OAAO,IAEb,SAASgzD,EAAQr2C,GAAe,IAAZs2C,EAAK,UAAH,8CACzB,OAAIA,EACO,CAAEjyD,EAAGjL,OAAO4mB,EAAIo2C,GAAa9xD,EAAGlL,OAAQ4mB,GAAK81C,EAAQM,IACzD,CAAE/xD,EAAsC,EAAnCjL,OAAQ4mB,GAAK81C,EAAQM,GAAiB9xD,EAA4B,EAAzBlL,OAAO4mB,EAAIo2C,GACpE,CAqCA,IAOMnyD,EAAM,CACRoyD,QAAAA,EAASn6D,MA5CN,SAAeq6D,GAGlB,IAHmC,IAAZD,EAAK,UAAH,8CACrBE,EAAK,IAAIhxD,YAAY+wD,EAAIv9D,QACzBy9D,EAAK,IAAIjxD,YAAY+wD,EAAIv9D,QACpB+E,EAAI,EAAGA,EAAIw4D,EAAIv9D,OAAQ+E,IAAK,CACjC,MAAiBs4D,EAAQE,EAAIx4D,GAAIu4D,GAAzBjyD,EAAC,EAADA,EAAGC,EAAC,EAADA,EAA0B,EACpB,CAACD,EAAGC,GAApBkyD,EAAGz4D,GAAE,KAAE04D,EAAG14D,GAAE,IACjB,CACA,MAAO,CAACy4D,EAAIC,EAChB,EAoCoBC,MAnCC,SAACryD,EAAGC,GAAC,OAAMjB,OAAOgB,IAAM,IAAMyxD,EAAQzyD,OAAOiB,IAAM,EAAE,EAoCtEqyD,MAlCU,SAACtyD,EAAGC,EAAGC,GAAC,OAAKF,IAAME,CAAC,EAkCvBqyD,MAjCG,SAACvyD,EAAGC,EAAGC,GAAC,OAAMF,GAAM,GAAKE,EAAOD,IAAMC,CAAE,EAkClDsyD,OAhCW,SAACxyD,EAAGC,EAAGC,GAAC,OAAMF,IAAME,EAAMD,GAAM,GAAKC,CAAG,EAgC3CuyD,OA/BG,SAACzyD,EAAGC,EAAGC,GAAC,OAAMF,GAAM,GAAKE,EAAOD,IAAMC,CAAE,EA+BnCwyD,OA7BL,SAAC1yD,EAAGC,EAAGC,GAAC,OAAMF,GAAM,GAAKE,EAAOD,IAAOC,EAAI,EAAI,EA6BlCyyD,OA5Bb,SAAC3yD,EAAGC,EAAGC,GAAC,OAAMF,IAAOE,EAAI,GAAQD,GAAM,GAAKC,CAAG,EA6B1D0yD,QA3BY,SAAC5yD,EAAGC,GAAC,OAAKA,CAAC,EA2Bd4yD,QA1BG,SAAC7yD,EAAGC,GAAC,OAAKD,CAAC,EA2BvB8yD,OAzBW,SAAC9yD,EAAGC,EAAGC,GAAC,OAAMF,GAAKE,EAAMD,IAAO,GAAKC,CAAG,EAyB3C6yD,OAxBG,SAAC/yD,EAAGC,EAAGC,GAAC,OAAMD,GAAKC,EAAMF,IAAO,GAAKE,CAAG,EAwBnC8yD,OAtBL,SAAChzD,EAAGC,EAAGC,GAAC,OAAMD,GAAMC,EAAI,GAAQF,IAAO,GAAKE,CAAG,EAsBlC+yD,OArBb,SAACjzD,EAAGC,EAAGC,GAAC,OAAMF,GAAME,EAAI,GAAQD,IAAO,GAAKC,CAAG,EAsB1DkS,IAlBG,SAAa+/C,EAAIC,EAAIc,EAAIC,GAC5B,IAAMlzD,GAAKmyD,IAAO,IAAMe,IAAO,GAC/B,MAAO,CAAEnzD,EAAImyD,EAAKe,GAAOjzD,EAAI,KAAH,IAAG,EAAK,IAAM,GAAM,EAAGA,EAAO,EAAJA,EACxD,EAeSmzD,MAbK,SAAChB,EAAIe,EAAIE,GAAE,OAAMjB,IAAO,IAAMe,IAAO,IAAME,IAAO,EAAE,EAalDC,MAZF,SAACC,EAAKpB,EAAIe,EAAIM,GAAE,OAAMrB,EAAKe,EAAKM,GAAOD,EAAM,KAAH,IAAG,EAAK,IAAM,GAAM,CAAC,EAYtDE,MAXT,SAACrB,EAAIe,EAAIE,EAAIK,GAAE,OAAMtB,IAAO,IAAMe,IAAO,IAAME,IAAO,IAAMK,IAAO,EAAE,EAWrDC,MAVhB,SAACJ,EAAKpB,EAAIe,EAAIM,EAAII,GAAE,OAAMzB,EAAKe,EAAKM,EAAKI,GAAOL,EAAM,KAAH,IAAG,EAAK,IAAM,GAAM,CAAC,EAUjDM,MARvB,SAACN,EAAKpB,EAAIe,EAAIM,EAAII,EAAIE,GAAE,OAAM3B,EAAKe,EAAKM,EAAKI,EAAKE,GAAOP,EAAM,KAAH,IAAG,EAAK,IAAM,GAAM,CAAC,EAQnDQ,MAT9B,SAAC3B,EAAIe,EAAIE,EAAIK,EAAIM,GAAE,OAAM5B,IAAO,IAAMe,IAAO,IAAME,IAAO,IAAMK,IAAO,IAAMM,IAAO,EAAE,GAWpG,gJCxDMC,EAAI,0CACN,WAAYx8B,EAAMy8B,GAAM,uBACpB,gBACKtzD,UAAW,EAChB,EAAKC,WAAY,EACjBC,EAAAA,GAAAA,KAAY22B,GACZ,IAAM3xB,GAAM5D,EAAAA,EAAAA,IAAQgyD,GAEpB,GADA,EAAKC,MAAQ18B,EAAKpiC,WACZ,EAAK8+D,iBAAiBlxD,EAAAA,IACxB,MAAM,IAAI5O,UAAU,uDACxB,IAAMgM,EAAY,EAAKA,SAAW,EAAK8zD,MAAM9zD,SAC7C,EAAKE,UAAY,EAAK4zD,MAAM5zD,UAC5B,IAAMgsD,EAAM,IAAIn4D,WAAWiM,GAE3BksD,EAAI9pD,IAAIqD,EAAInR,OAAS,EAAKw/D,MAAM9zD,SAAWo3B,EAAKpiC,SAASsnC,OAAO72B,GAAK82B,SAAW92B,GAChF,IAAK,IAAIpM,EAAI,EAAGA,EAAI6yD,EAAI53D,OAAQ+E,IAC5B6yD,EAAI7yD,IAAM,GACd,EAAKy6D,MAAMx3B,OAAO4vB,GAElB,EAAK6H,MAAQ38B,EAAKpiC,SAElB,IAAK,IAAIqE,EAAI,EAAGA,EAAI6yD,EAAI53D,OAAQ+E,IAC5B6yD,EAAI7yD,IAAM,IAEF,OADZ,EAAK06D,MAAMz3B,OAAO4vB,GAClBA,EAAI1qD,KAAK,GAAG,CAChB,CAqCC,OArCA,8BACD,SAAOspC,GAGH,OAFArqC,EAAAA,GAAAA,OAAciB,MACdA,KAAKoyD,MAAMx3B,OAAOwO,GACXppC,IACX,GAAC,wBACD,SAAWO,GACPxB,EAAAA,GAAAA,OAAciB,MACdjB,EAAAA,GAAAA,MAAawB,EAAKP,KAAKxB,WACvBwB,KAAKnB,UAAW,EAChBmB,KAAKoyD,MAAMpxD,WAAWT,GACtBP,KAAKqyD,MAAMz3B,OAAOr6B,GAClBP,KAAKqyD,MAAMrxD,WAAWT,GACtBP,KAAKe,SACT,GAAC,oBACD,WACI,IAAMR,EAAM,IAAIlO,WAAW2N,KAAKqyD,MAAM7zD,WAEtC,OADAwB,KAAKgB,WAAWT,GACTA,CACX,GAAC,wBACD,SAAWU,GAEPA,IAAOA,EAAK5N,OAAOC,OAAOD,OAAOmuD,eAAexhD,MAAO,CAAC,IACxD,IAAQqyD,EAA2DryD,KAA3DqyD,MAAOD,EAAoDpyD,KAApDoyD,MAAOvzD,EAA6CmB,KAA7CnB,SAAUC,EAAmCkB,KAAnClB,UAAWR,EAAwB0B,KAAxB1B,SAAUE,EAAcwB,KAAdxB,UAQrD,OANAyC,EAAGpC,SAAWA,EACdoC,EAAGnC,UAAYA,EACfmC,EAAG3C,SAAWA,EACd2C,EAAGzC,UAAYA,EACfyC,EAAGoxD,MAAQA,EAAMC,WAAWrxD,EAAGoxD,OAC/BpxD,EAAGmxD,MAAQA,EAAME,WAAWrxD,EAAGmxD,OACxBnxD,CACX,GAAC,qBACD,WACIjB,KAAKlB,WAAY,EACjBkB,KAAKqyD,MAAMtxD,UACXf,KAAKoyD,MAAMrxD,SACf,KAAC,EA9DK,CAASG,EAAAA,IAsENu5B,EAAO,SAAC/E,EAAM3xB,EAAK3B,GAAO,OAAK,IAAI8vD,EAAKx8B,EAAM3xB,GAAK62B,OAAOx4B,GAASy4B,QAAQ,EACxFJ,EAAKnnC,OAAS,SAACoiC,EAAM3xB,GAAG,OAAK,IAAImuD,EAAKx8B,EAAM3xB,EAAI,4ICrE1CwuD,EAAM,SAAChkB,EAAGn8C,EAAGygC,GAAC,OAAM0b,EAAIn8C,EAAMm8C,EAAI1b,EAAMzgC,EAAIygC,CAAE,EAI9C2/B,EAAW,IAAIpzD,YAAY,CAC7B,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WACpF,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UACpF,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UACpF,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,aAIlFqzD,EAAK,IAAIrzD,YAAY,CACvB,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,aAIlFszD,EAAW,IAAItzD,YAAY,IAC3BuzD,EAAM,0CACR,aAAc,MAWS,OAXT,gBACV,cAAM,GAAI,GAAI,GAAG,IAGZvP,EAAY,EAARqP,EAAG,GACZ,EAAKtzD,EAAY,EAARszD,EAAG,GACZ,EAAKpP,EAAY,EAARoP,EAAG,GACZ,EAAKnP,EAAY,EAARmP,EAAG,GACZ,EAAK1f,EAAY,EAAR0f,EAAG,GACZ,EAAKjP,EAAY,EAARiP,EAAG,GACZ,EAAKlP,EAAY,EAARkP,EAAG,GACZ,EAAKhP,EAAY,EAARgP,EAAG,GAAO,CACvB,CA4DC,OA5DA,2BACD,WAEI,MAAO,CAD4BzyD,KAA3BojD,EAA2BpjD,KAAxBb,EAAwBa,KAArBqjD,EAAqBrjD,KAAlBsjD,EAAkBtjD,KAAf+yC,EAAe/yC,KAAZwjD,EAAYxjD,KAATujD,EAASvjD,KAANyjD,EAEjC,GACA,iBACA,SAAIL,EAAGjkD,EAAGkkD,EAAGC,EAAGvQ,EAAGyQ,EAAGD,EAAGE,GACrBzjD,KAAKojD,EAAQ,EAAJA,EACTpjD,KAAKb,EAAQ,EAAJA,EACTa,KAAKqjD,EAAQ,EAAJA,EACTrjD,KAAKsjD,EAAQ,EAAJA,EACTtjD,KAAK+yC,EAAQ,EAAJA,EACT/yC,KAAKwjD,EAAQ,EAAJA,EACTxjD,KAAKujD,EAAQ,EAAJA,EACTvjD,KAAKyjD,EAAQ,EAAJA,CACb,GAAC,qBACD,SAAQ4L,EAAMn8D,GAEV,IAAK,IAAIyE,EAAI,EAAGA,EAAI,GAAIA,IAAKzE,GAAU,EACnCw/D,EAAS/6D,GAAK03D,EAAKuD,UAAU1/D,GAAQ,GACzC,IAAK,IAAIyE,EAAI,GAAIA,EAAI,GAAIA,IAAK,CAC1B,IAAMk7D,EAAMH,EAAS/6D,EAAI,IACnB2wD,EAAKoK,EAAS/6D,EAAI,GAClBm7D,GAAKC,EAAAA,EAAAA,IAAKF,EAAK,IAAKE,EAAAA,EAAAA,IAAKF,EAAK,IAAOA,IAAQ,EAC7CG,GAAKD,EAAAA,EAAAA,IAAKzK,EAAI,KAAMyK,EAAAA,EAAAA,IAAKzK,EAAI,IAAOA,IAAO,GACjDoK,EAAS/6D,GAAMq7D,EAAKN,EAAS/6D,EAAI,GAAKm7D,EAAKJ,EAAS/6D,EAAI,IAAO,CACnE,CAEA,IAjEK42C,EAiEC6U,EAA2BpjD,KAA3BojD,EAAGjkD,EAAwBa,KAAxBb,EAAGkkD,EAAqBrjD,KAArBqjD,EAAGC,EAAkBtjD,KAAlBsjD,EAAGvQ,EAAe/yC,KAAf+yC,EAAGyQ,EAAYxjD,KAAZwjD,EAAGD,EAASvjD,KAATujD,EAAGE,EAAMzjD,KAANyjD,EAC3B,IAAS9rD,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IACMksD,EAAMJ,IADGsP,EAAAA,EAAAA,IAAKhgB,EAAG,IAAKggB,EAAAA,EAAAA,IAAKhgB,EAAG,KAAMggB,EAAAA,EAAAA,IAAKhgB,EAAG,OAnEjDxE,EAoE4BwE,GAAGyQ,GApEPjV,EAoEUgV,GAAKiP,EAAS76D,GAAK+6D,EAAS/6D,GAAM,EAE/DmsD,IADSiP,EAAAA,EAAAA,IAAK3P,EAAG,IAAK2P,EAAAA,EAAAA,IAAK3P,EAAG,KAAM2P,EAAAA,EAAAA,IAAK3P,EAAG,KAC7BmP,EAAInP,EAAGjkD,EAAGkkD,GAAM,EACrCI,EAAIF,EACJA,EAAIC,EACJA,EAAIzQ,EACJA,EAAKuQ,EAAIO,EAAM,EACfP,EAAID,EACJA,EAAIlkD,EACJA,EAAIikD,EACJA,EAAKS,EAAKC,EAAM,CACpB,CAEAV,EAAKA,EAAIpjD,KAAKojD,EAAK,EACnBjkD,EAAKA,EAAIa,KAAKb,EAAK,EACnBkkD,EAAKA,EAAIrjD,KAAKqjD,EAAK,EACnBC,EAAKA,EAAItjD,KAAKsjD,EAAK,EACnBvQ,EAAKA,EAAI/yC,KAAK+yC,EAAK,EACnByQ,EAAKA,EAAIxjD,KAAKwjD,EAAK,EACnBD,EAAKA,EAAIvjD,KAAKujD,EAAK,EACnBE,EAAKA,EAAIzjD,KAAKyjD,EAAK,EACnBzjD,KAAKU,IAAI0iD,EAAGjkD,EAAGkkD,EAAGC,EAAGvQ,EAAGyQ,EAAGD,EAAGE,EAClC,GAAC,wBACD,WACIiP,EAAS5yD,KAAK,EAClB,GAAC,qBACD,WACIE,KAAKU,IAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9BV,KAAKtN,OAAOoN,KAAK,EACrB,KAAC,EAzEO,CAASovD,EAAAA,GA+ER9qD,GAAShD,EAAAA,EAAAA,KAAgB,kBAAM,IAAIuxD,CAAQ,oKCrGxD,EAA+B90D,EAAAA,GAAAA,MAAU,CACrC,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,sBACpE4I,KAAI,SAAAmT,GAAC,OAAI3c,OAAO2c,EAAE,KAAE,eArBfq5C,EAAS,KAAEC,EAAS,KAuBrBC,EAAa,IAAI/zD,YAAY,IAC7Bg0D,EAAa,IAAIh0D,YAAY,IACtBi0D,EAAM,0CACf,aAAc,MAqBe,OArBf,gBACV,cAAM,IAAK,GAAI,IAAI,IAKdjD,GAAK,WACV,EAAKC,IAAK,UACV,EAAKc,IAAK,WACV,EAAKC,IAAK,WACV,EAAKK,GAAK,WACV,EAAKH,IAAK,SACV,EAAKO,IAAK,WACV,EAAKF,GAAK,WACV,EAAKI,GAAK,WACV,EAAKE,IAAK,WACV,EAAKqB,IAAK,WACV,EAAKC,GAAK,UACV,EAAKC,GAAK,UACV,EAAKC,IAAK,SACV,EAAKC,GAAK,WACV,EAAKC,GAAK,UAAe,CAC7B,CAsGC,OArGD,2BACA,WAEI,MAAO,CADoE3zD,KAAnEowD,GAAmEpwD,KAA/DqwD,GAA+DrwD,KAA3DmxD,GAA2DnxD,KAAvDoxD,GAAuDpxD,KAAnDyxD,GAAmDzxD,KAA/CsxD,GAA+CtxD,KAA3C6xD,GAA2C7xD,KAAvC2xD,GAAuC3xD,KAAnC+xD,GAAmC/xD,KAA/BiyD,GAA+BjyD,KAA3BszD,GAA2BtzD,KAAvBuzD,GAAuBvzD,KAAnBwzD,GAAmBxzD,KAAfyzD,GAAezzD,KAAX0zD,GAAW1zD,KAAP2zD,GAExE,GACA,iBACA,SAAIvD,EAAIC,EAAIc,EAAIC,EAAIK,EAAIH,EAAIO,EAAIF,EAAII,EAAIE,EAAIqB,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAC5D3zD,KAAKowD,GAAU,EAALA,EACVpwD,KAAKqwD,GAAU,EAALA,EACVrwD,KAAKmxD,GAAU,EAALA,EACVnxD,KAAKoxD,GAAU,EAALA,EACVpxD,KAAKyxD,GAAU,EAALA,EACVzxD,KAAKsxD,GAAU,EAALA,EACVtxD,KAAK6xD,GAAU,EAALA,EACV7xD,KAAK2xD,GAAU,EAALA,EACV3xD,KAAK+xD,GAAU,EAALA,EACV/xD,KAAKiyD,GAAU,EAALA,EACVjyD,KAAKszD,GAAU,EAALA,EACVtzD,KAAKuzD,GAAU,EAALA,EACVvzD,KAAKwzD,GAAU,EAALA,EACVxzD,KAAKyzD,GAAU,EAALA,EACVzzD,KAAK0zD,GAAU,EAALA,EACV1zD,KAAK2zD,GAAU,EAALA,CACd,GAAC,qBACD,SAAQtE,EAAMn8D,GAEV,IAAK,IAAIyE,EAAI,EAAGA,EAAI,GAAIA,IAAKzE,GAAU,EACnCigE,EAAWx7D,GAAK03D,EAAKuD,UAAU1/D,GAC/BkgE,EAAWz7D,GAAK03D,EAAKuD,UAAW1/D,GAAU,GAE9C,IAAK,IAAIyE,EAAI,GAAIA,EAAI,GAAIA,IAAK,CAE1B,IAAMi8D,EAA4B,EAArBT,EAAWx7D,EAAI,IACtBk8D,EAA4B,EAArBT,EAAWz7D,EAAI,IACtBm8D,EAAMj2D,EAAAA,GAAAA,OAAW+1D,EAAMC,EAAM,GAAKh2D,EAAAA,GAAAA,OAAW+1D,EAAMC,EAAM,GAAKh2D,EAAAA,GAAAA,MAAU+1D,EAAMC,EAAM,GACpFE,EAAMl2D,EAAAA,GAAAA,OAAW+1D,EAAMC,EAAM,GAAKh2D,EAAAA,GAAAA,OAAW+1D,EAAMC,EAAM,GAAKh2D,EAAAA,GAAAA,MAAU+1D,EAAMC,EAAM,GAEpFG,EAA0B,EAApBb,EAAWx7D,EAAI,GACrBs8D,EAA0B,EAApBb,EAAWz7D,EAAI,GACrBu8D,EAAMr2D,EAAAA,GAAAA,OAAWm2D,EAAKC,EAAK,IAAMp2D,EAAAA,GAAAA,OAAWm2D,EAAKC,EAAK,IAAMp2D,EAAAA,GAAAA,MAAUm2D,EAAKC,EAAK,GAChFE,EAAMt2D,EAAAA,GAAAA,OAAWm2D,EAAKC,EAAK,IAAMp2D,EAAAA,GAAAA,OAAWm2D,EAAKC,EAAK,IAAMp2D,EAAAA,GAAAA,MAAUm2D,EAAKC,EAAK,GAEhFG,EAAOv2D,EAAAA,GAAAA,MAAUk2D,EAAKI,EAAKf,EAAWz7D,EAAI,GAAIy7D,EAAWz7D,EAAI,KAC7D08D,EAAOx2D,EAAAA,GAAAA,MAAUu2D,EAAMN,EAAKI,EAAKf,EAAWx7D,EAAI,GAAIw7D,EAAWx7D,EAAI,KACzEw7D,EAAWx7D,GAAY,EAAP08D,EAChBjB,EAAWz7D,GAAY,EAAPy8D,CACpB,CACA,IAAMhE,EAAmEpwD,KAAnEowD,GAAIC,EAA+DrwD,KAA/DqwD,GAAIc,EAA2DnxD,KAA3DmxD,GAAIC,EAAuDpxD,KAAvDoxD,GAAIK,EAAmDzxD,KAAnDyxD,GAAIH,EAA+CtxD,KAA/CsxD,GAAIO,EAA2C7xD,KAA3C6xD,GAAIF,EAAuC3xD,KAAvC2xD,GAAII,EAAmC/xD,KAAnC+xD,GAAIE,EAA+BjyD,KAA/BiyD,GAAIqB,EAA2BtzD,KAA3BszD,GAAIC,EAAuBvzD,KAAvBuzD,GAAIC,EAAmBxzD,KAAnBwzD,GAAIC,EAAezzD,KAAfyzD,GAAIC,EAAW1zD,KAAX0zD,GAAIC,EAAO3zD,KAAP2zD,GAElE,IAASh8D,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAEzB,IAAM28D,EAAUz2D,EAAAA,GAAAA,OAAWk0D,EAAIE,EAAI,IAAMp0D,EAAAA,GAAAA,OAAWk0D,EAAIE,EAAI,IAAMp0D,EAAAA,GAAAA,OAAWk0D,EAAIE,EAAI,IAC/EsC,EAAU12D,EAAAA,GAAAA,OAAWk0D,EAAIE,EAAI,IAAMp0D,EAAAA,GAAAA,OAAWk0D,EAAIE,EAAI,IAAMp0D,EAAAA,GAAAA,OAAWk0D,EAAIE,EAAI,IAE/EuC,EAAQzC,EAAKuB,GAAQvB,EAAKyB,EAC1BiB,EAAQxC,EAAKsB,GAAQtB,EAAKwB,EAG1BiB,EAAO72D,EAAAA,GAAAA,MAAU81D,EAAIY,EAASE,EAAMvB,EAAUv7D,GAAIy7D,EAAWz7D,IAC7Dg9D,EAAM92D,EAAAA,GAAAA,MAAU62D,EAAMhB,EAAIY,EAASE,EAAMvB,EAAUt7D,GAAIw7D,EAAWx7D,IAClEi9D,EAAa,EAAPF,EAENG,EAAUh3D,EAAAA,GAAAA,OAAWuyD,EAAIC,EAAI,IAAMxyD,EAAAA,GAAAA,OAAWuyD,EAAIC,EAAI,IAAMxyD,EAAAA,GAAAA,OAAWuyD,EAAIC,EAAI,IAC/EyE,EAAUj3D,EAAAA,GAAAA,OAAWuyD,EAAIC,EAAI,IAAMxyD,EAAAA,GAAAA,OAAWuyD,EAAIC,EAAI,IAAMxyD,EAAAA,GAAAA,OAAWuyD,EAAIC,EAAI,IAC/E0E,EAAQ3E,EAAKe,EAAOf,EAAKqB,EAAON,EAAKM,EACrCuD,EAAQ3E,EAAKe,EAAOf,EAAKiB,EAAOF,EAAKE,EAC3CoC,EAAU,EAALF,EACLG,EAAU,EAALF,EACLD,EAAU,EAALF,EACLG,EAAU,EAALF,EACLD,EAAU,EAALvB,EACLwB,EAAU,EAALtB,EAAO,MACQp0D,EAAAA,GAAAA,IAAa,EAALg0D,EAAa,EAALF,EAAc,EAANgD,EAAe,EAANC,GAA/C7C,EAAE,EAAL9zD,EAAUg0D,EAAE,EAAL/zD,EACV2zD,EAAU,EAALJ,EACLE,EAAU,EAALL,EACLG,EAAU,EAALN,EACLG,EAAU,EAALF,EACLD,EAAU,EAALf,EACLgB,EAAU,EAALf,EACL,IAAM4E,EAAMp3D,EAAAA,GAAAA,MAAU+2D,EAAKE,EAASE,GACpC5E,EAAKvyD,EAAAA,GAAAA,MAAUo3D,EAAKN,EAAKE,EAASE,GAClC1E,EAAW,EAAN4E,CACT,CACA,MACoBp3D,EAAAA,GAAAA,IAAkB,EAAVmC,KAAKowD,GAAkB,EAAVpwD,KAAKqwD,GAAa,EAALD,EAAa,EAALC,GAAxDD,EAAE,EAALnyD,EAAUoyD,EAAE,EAALnyD,EAAC,MACSL,EAAAA,GAAAA,IAAkB,EAAVmC,KAAKmxD,GAAkB,EAAVnxD,KAAKoxD,GAAa,EAALD,EAAa,EAALC,GAAxDD,EAAE,EAALlzD,EAAUmzD,EAAE,EAALlzD,EAAC,MACSL,EAAAA,GAAAA,IAAkB,EAAVmC,KAAKyxD,GAAkB,EAAVzxD,KAAKsxD,GAAa,EAALG,EAAa,EAALH,GAAxDG,EAAE,EAALxzD,EAAUqzD,EAAE,EAALpzD,EAAC,MACSL,EAAAA,GAAAA,IAAkB,EAAVmC,KAAK6xD,GAAkB,EAAV7xD,KAAK2xD,GAAa,EAALE,EAAa,EAALF,GAAxDE,EAAE,EAAL5zD,EAAU0zD,EAAE,EAALzzD,EAAC,MACSL,EAAAA,GAAAA,IAAkB,EAAVmC,KAAK+xD,GAAkB,EAAV/xD,KAAKiyD,GAAa,EAALF,EAAa,EAALE,GAAxDF,EAAE,EAAL9zD,EAAUg0D,EAAE,EAAL/zD,EAAC,MACSL,EAAAA,GAAAA,IAAkB,EAAVmC,KAAKszD,GAAkB,EAAVtzD,KAAKuzD,GAAa,EAALD,EAAa,EAALC,GAAxDD,EAAE,EAALr1D,EAAUs1D,EAAE,EAALr1D,EAAC,OACSL,EAAAA,GAAAA,IAAkB,EAAVmC,KAAKwzD,GAAkB,EAAVxzD,KAAKyzD,GAAa,EAALD,EAAa,EAALC,GAAxDD,EAAE,GAALv1D,EAAUw1D,EAAE,GAALv1D,EAAC,OACSL,EAAAA,GAAAA,IAAkB,EAAVmC,KAAK0zD,GAAkB,EAAV1zD,KAAK2zD,GAAa,EAALD,EAAa,EAALC,GAAxDD,EAAE,GAALz1D,EAAU01D,EAAE,GAALz1D,EACV8B,KAAKU,IAAI0vD,EAAIC,EAAIc,EAAIC,EAAIK,EAAIH,EAAIO,EAAIF,EAAII,EAAIE,EAAIqB,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EACzE,GAAC,wBACD,WACIR,EAAWrzD,KAAK,GAChBszD,EAAWtzD,KAAK,EACpB,GAAC,qBACD,WACIE,KAAKtN,OAAOoN,KAAK,GACjBE,KAAKU,IAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC1D,KAAC,EA7Hc,CAASwuD,EAAAA,GA+HtBgG,EAAU,0CACZ,aAAc,MAmBU,OAnBV,gBACV,gBAEK9E,GAAK,UACV,EAAKC,IAAK,SACV,EAAKc,IAAK,WACV,EAAKC,IAAK,UACV,EAAKK,GAAK,UACV,EAAKH,GAAK,WACV,EAAKO,IAAK,WACV,EAAKF,GAAK,WACV,EAAKI,IAAK,WACV,EAAKE,IAAK,WACV,EAAKqB,IAAK,WACV,EAAKC,GAAK,WACV,EAAKC,GAAK,UACV,EAAKC,GAAK,UACV,EAAKC,GAAK,UACV,EAAKC,IAAK,WACV,EAAKn1D,UAAY,GAAG,CACxB,CAAC,iBArBW,CAAS60D,GAuBnB8B,EAAM,0CACR,aAAc,MAmBU,OAnBV,gBACV,gBAEK/E,IAAK,UACV,EAAKC,IAAK,WACV,EAAKc,GAAK,WACV,EAAKC,GAAK,UACV,EAAKK,IAAK,WACV,EAAKH,GAAK,UACV,EAAKO,GAAK,UACV,EAAKF,IAAK,UACV,EAAKI,GAAK,WACV,EAAKE,IAAK,QACV,EAAKqB,IAAK,WACV,EAAKC,GAAK,WACV,EAAKC,IAAK,UACV,EAAKC,GAAK,WACV,EAAKC,GAAK,WACV,EAAKC,IAAK,WACV,EAAKn1D,UAAY,GAAG,CACxB,CAAC,iBArBO,CAAS60D,GAuBR1xD,GAASP,EAAAA,EAAAA,KAAgB,kBAAM,IAAIiyD,CAAQ,KAC9BjyD,EAAAA,EAAAA,KAAgB,kBAAM,IAAI8zD,CAAY,KAC1C9zD,EAAAA,EAAAA,KAAgB,kBAAM,IAAI+zD,CAAQ,mPCvM3Cj2D,GCJY,kBAAT47C,MAAqB,WAAYA,MAAOA,KAAKgG,ODI1C,SAACv+C,GAAG,OAAK,IAAInD,YAAYmD,EAAI7P,OAAQ6P,EAAI5P,WAAYwB,KAAKC,MAAMmO,EAAIE,WAAa,GAAG,GAE1F6sD,EAAa,SAAC/sD,GAAG,OAAK,IAAI6yD,SAAS7yD,EAAI7P,OAAQ6P,EAAI5P,WAAY4P,EAAIE,WAAW,EAE9EswD,EAAO,SAACh4D,EAAM/B,GAAK,OAAM+B,GAAS,GAAK/B,EAAW+B,IAAS/B,CAAM,EAI9E,KAHgF,KAA5D,IAAI3G,WAAW,IAAI+M,YAAY,CAAC,YAAa1M,QAAQ,IAIrE,MAAM,IAAIqB,MAAM,+CACNoE,MAAM1F,KAAK,CAAEG,OAAQ,MAAO,SAACmF,EAAGJ,GAAC,OAAKA,EAAEyE,SAAS,IAAIg6C,SAAS,EAAG,IAAI,IAwD5E,SAASj2C,EAAQF,GAGpB,GAFoB,kBAATA,IACPA,EARD,SAAqBqH,GACxB,GAAmB,kBAARA,EACP,MAAM,IAAIhV,UAAU,oCAAD,cAA4CgV,IAEnE,OAAO,IAAI+tD,aAAc1gE,OAAO2S,EACpC,CAGeujC,CAAY5qC,MACjBA,aAAgB5N,YAClB,MAAM,IAAIC,UAAU,0CAAD,cAAkD2N,EAAI,MAC7E,OAAOA,CACX,CAoBO,IAAMiB,EAAI,wCAIZ,OAJY,6BAEb,WACI,OAAOlB,KAAKsyD,YAChB,KAAC,EAJY,GAcV,SAASlxD,EAAgBk0D,GAC5B,IAAMC,EAAQ,SAACnzD,GAAO,OAAKkzD,IAAkB16B,OAAOz6B,EAAQiC,IAAUy4B,QAAQ,EACxEorB,EAAMqP,IAIZ,OAHAC,EAAM/2D,UAAYynD,EAAIznD,UACtB+2D,EAAMj3D,SAAW2nD,EAAI3nD,SACrBi3D,EAAMjiE,OAAS,kBAAMgiE,GAAiB,EAC/BC,CACX,CACO,SAASh0D,EAAwBi0D,GACpC,IAAMD,EAAQ,SAAC56B,EAAKn5B,GAAI,OAAKg0D,EAASh0D,GAAMo5B,OAAOz6B,EAAQw6B,IAAME,QAAQ,EACnEorB,EAAMuP,EAAS,CAAC,GAItB,OAHAD,EAAM/2D,UAAYynD,EAAIznD,UACtB+2D,EAAMj3D,SAAW2nD,EAAI3nD,SACrBi3D,EAAMjiE,OAAS,SAACkO,GAAI,OAAKg0D,EAASh0D,EAAK,EAChC+zD,CACX,mME7HMv4D,EAAMC,OAAO,GACbC,EAAMD,OAAO,GACbE,EAAMF,OAAO,GACbw4D,EAAMx4D,OAAO,GACby4D,EAAMz4D,OAAO,GACb04D,EAAY,KAAH,IAAGx4D,EAAOF,OAAO,MAC1B2kD,EAAQ,CACVrT,EAAGvxC,EACH5K,EAAG6K,OAAO,GACV4kD,EAAG8T,EAAY,KAAH,IAAGx4D,EAAOF,OAAO,KAAMA,OAAO,KAC1C2c,EAAG+7C,EAAY14D,OAAO,2CACtBgB,EAAGf,EACH4kD,GAAI7kD,OAAO,iFACX8kD,GAAI9kD,OAAO,iFACX24D,KAAM34D,OAAO,uEAGjB,SAAS44D,EAAUp4D,GACf,IAAQ8wC,EAASqT,EAATrT,EAAGn8C,EAAMwvD,EAANxvD,EACL0jE,EAAK3e,EAAI15C,EAAIA,GACbs4D,EAAK5e,EAAI2e,EAAKr4D,GACpB,OAAO05C,EAAI4e,EAAKxnB,EAAI9wC,EAAIrL,EAC5B,CACA,IAAM4jE,EAAmBpU,EAAMrT,IAAMvxC,EAC/Bi5D,EAAa,WACf,WAAYx4D,EAAGC,EAAG6kD,IAAG,eACjBviD,KAAKvC,EAAIA,EACTuC,KAAKtC,EAAIA,EACTsC,KAAKuiD,EAAIA,CACb,CAaC,OAbA,8BAcD,SAAOC,GACH,KAAMA,aAAiByT,GACnB,MAAM,IAAI3jE,UAAU,0BACxB,IAAWowD,EAAqB1iD,KAAxBvC,EAAUklD,EAAc3iD,KAAjBtC,EAAUklD,EAAO5iD,KAAVuiD,EACXM,EAAqBL,EAAxB/kD,EAAUqlD,EAAcN,EAAjB9kD,EAAUqlD,EAAOP,EAAVD,EAChB2T,EAAO/e,EAAI,KAAD,IAACyL,EAAMzlD,IACjBg5D,EAAOhf,EAAI,KAAD,IAAC4L,EAAM5lD,IACjBi5D,EAAKjf,EAAIuL,EAAKyT,GACdE,EAAKlf,EAAI0L,EAAKqT,GACdI,EAAKnf,EAAIA,EAAIwL,EAAKI,GAAMoT,GACxBI,EAAKpf,EAAIA,EAAI2L,EAAKF,GAAMsT,GAC9B,OAAOE,IAAOC,GAAMC,IAAOC,CAC/B,GAAC,oBACD,WACI,OAAO,IAAIN,EAAcj2D,KAAKvC,EAAG05C,GAAKn3C,KAAKtC,GAAIsC,KAAKuiD,EACxD,GAAC,oBACD,WACI,IAAWG,EAAqB1iD,KAAxBvC,EAAUklD,EAAc3iD,KAAjBtC,EAAUklD,EAAO5iD,KAAVuiD,EAChBa,EAAIjM,EAAI,KAAD,IAACuL,EAAMvlD,IACdgC,EAAIg4C,EAAI,KAAD,IAACwL,EAAMxlD,IACdkmD,EAAIlM,EAAI,KAAD,IAACh4C,EAAKhC,IACbmmD,EAAInM,EAAIh6C,GAAOg6C,EAAI,KAAD,IAAEuL,EAAKvjD,EAAMhC,IAAOimD,EAAIC,IAC1CtQ,EAAIoE,EAAIse,EAAMrS,GACdI,EAAIrM,EAAI,KAAD,IAACpE,EAAK51C,IACbumD,EAAKvM,EAAIqM,EAAIrmD,EAAMmmD,GAGzB,OAAO,IAAI2S,EAAcvS,EAFdvM,EAAIpE,GAAKuQ,EAAII,GAAMgS,EAAMrS,GACzBlM,EAAIh6C,EAAMwlD,EAAKC,GAE9B,GAAC,iBACD,SAAIJ,GACA,KAAMA,aAAiByT,GACnB,MAAM,IAAI3jE,UAAU,0BACxB,IAAWowD,EAAqB1iD,KAAxBvC,EAAUklD,EAAc3iD,KAAjBtC,EAAUklD,EAAO5iD,KAAVuiD,EACXM,EAAqBL,EAAxB/kD,EAAUqlD,EAAcN,EAAjB9kD,EAAUqlD,EAAOP,EAAVD,EACtB,GAAIM,IAAO7lD,GAAO8lD,IAAO9lD,EACrB,OAAOgD,KACX,GAAI0iD,IAAO1lD,GAAO2lD,IAAO3lD,EACrB,OAAOwlD,EACX,IAAM0T,EAAO/e,EAAI,KAAD,IAACyL,EAAMzlD,IACjBg5D,EAAOhf,EAAI,KAAD,IAAC4L,EAAM5lD,IACjBi5D,EAAKjf,EAAIuL,EAAKyT,GACdE,EAAKlf,EAAI0L,EAAKqT,GACdI,EAAKnf,EAAIA,EAAIwL,EAAKI,GAAMoT,GACxBI,EAAKpf,EAAIA,EAAI2L,EAAKF,GAAMsT,GACxBzS,EAAItM,EAAIkf,EAAKD,GACbtf,EAAIK,EAAIof,EAAKD,GACnB,GAAI7S,IAAMzmD,EACN,OAAI85C,IAAM95C,EACCgD,KAAK+jD,SAGLkS,EAActR,KAG7B,IAAM6R,EAAKrf,EAAI,KAAD,IAACsM,EAAKtmD,IACds5D,EAAMtf,EAAIsM,EAAI+S,GACdE,EAAIvf,EAAIif,EAAKI,GACb9S,EAAKvM,EAAI,SAAAL,EAAK35C,GAAMs5D,EAAMt5D,EAAMu5D,GAGtC,OAAO,IAAIT,EAAcvS,EAFdvM,EAAIL,GAAK4f,EAAIhT,GAAM4S,EAAKG,GACxBtf,EAAIyL,EAAKG,EAAKU,GAE7B,GAAC,sBACD,SAASjB,GACL,OAAOxiD,KAAKqQ,IAAImyC,EAAMwB,SAC1B,GAAC,4BACD,SAAeoB,GACX,IAAMG,EAAK0Q,EAActR,KACzB,GAAsB,kBAAXS,GAAuBA,IAAWpoD,EACzC,OAAOuoD,EACX,IAAI3rC,EAAI0rC,EAAgBF,GACxB,GAAIxrC,IAAM1c,EACN,OAAO8C,KACX,IAAKg2D,EAAkB,CAGnB,IAFA,IAAI7Y,EAAIoI,EACJ1O,EAAI72C,KACD4Z,EAAI5c,GACH4c,EAAI1c,IACJigD,EAAIA,EAAE9sC,IAAIwmC,IACdA,EAAIA,EAAEkN,SACNnqC,IAAM1c,EAEV,OAAOigD,CACX,CAKA,IAJA,MAA+BwZ,EAAgB/8C,GAAzCg9C,EAAK,EAALA,MAAOC,EAAE,EAAFA,GAAIC,EAAK,EAALA,MAAOtgB,EAAE,EAAFA,GACpBugB,EAAMxR,EACNyR,EAAMzR,EACN1O,EAAI72C,KACD62D,EAAK75D,GAAOw5C,EAAKx5C,GAChB65D,EAAK35D,IACL65D,EAAMA,EAAI1mD,IAAIwmC,IACdL,EAAKt5C,IACL85D,EAAMA,EAAI3mD,IAAIwmC,IAClBA,EAAIA,EAAEkN,SACN8S,IAAO35D,EACPs5C,IAAOt5C,EAOX,OALI05D,IACAG,EAAMA,EAAI/S,UACV8S,IACAE,EAAMA,EAAIhT,UACdgT,EAAM,IAAIf,EAAc9e,EAAI6f,EAAIv5D,EAAImkD,EAAMgU,MAAOoB,EAAIt5D,EAAGs5D,EAAIzU,GACrDwU,EAAI1mD,IAAI2mD,EACnB,GAAC,8BACD,SAAiB/S,GAKb,IAJA,IAAMC,EAAU8R,EAAmB,IAAM/R,EAAI,EAAI,IAAMA,EAAI,EACrDE,EAAS,GACXhH,EAAIn9C,KACJmX,EAAOgmC,EACFgD,EAAS,EAAGA,EAAS+D,EAAS/D,IAAU,CAC7ChpC,EAAOgmC,EACPgH,EAAOvsD,KAAKuf,GACZ,IAAK,IAAIxf,EAAI,EAAGA,EAAI,KAAH,IAAG,EAAMssD,EAAI,GAAItsD,IAC9Bwf,EAAOA,EAAK9G,IAAI8sC,GAChBgH,EAAOvsD,KAAKuf,GAEhBgmC,EAAIhmC,EAAK4sC,QACb,CACA,OAAOI,CACX,GAAC,kBACD,SAAKvqC,EAAGwqC,IACCA,GAAepkD,KAAKyD,OAAOwyD,EAAcphB,QAC1CuP,EAAcC,EAAMxP,MACxB,IAAMoP,EAAKG,GAAeA,EAAYE,cAAiB,EACvD,GAAI,IAAML,EACN,MAAM,IAAIlwD,MAAM,iEAEpB,IAAIwwD,EAAcH,GAAeI,EAAiBz+C,IAAIq+C,GACjDG,IACDA,EAAcvkD,KAAKykD,iBAAiBR,GAChCG,GAAqB,IAANH,IACfM,EAAc0R,EAAcvR,WAAWH,GACvCC,EAAiB9jD,IAAI0jD,EAAaG,KAU1C,IAPA,IAAIpH,EAAI8Y,EAActR,KAClBC,EAAIqR,EAActR,KAChBT,EAAU,GAAK8R,EAAmB,IAAM/R,EAAI,IAAMA,GAClDY,EAAa,KAAH,IAAG,EAAMZ,EAAI,GACvBa,EAAO7nD,OAAO,WAAKgnD,GAAI,GACvBc,EAAY,KAAH,IAAG,EAAKd,GACjBe,EAAU/nD,OAAOgnD,GACd9D,EAAS,EAAGA,EAAS+D,EAAS/D,IAAU,CAC7C,IAAMjtD,EAASitD,EAAS0E,EACpBI,EAAQjyD,OAAO4mB,EAAIkrC,GAMvB,GALAlrC,IAAMorC,EACFC,EAAQJ,IACRI,GAASF,EACTnrC,GAAK1c,GAEK,IAAV+nD,EAAa,CACb,IAAIC,EAAKX,EAAYrxD,GACjBitD,EAAS,IACT+E,EAAKA,EAAGlB,UACZY,EAAIA,EAAEv0C,IAAI60C,EACd,KACK,CACD,IAAIC,EAASZ,EAAYrxD,EAASiB,KAAKy/C,IAAIqR,GAAS,GAChDA,EAAQ,IACRE,EAASA,EAAOnB,UACpB7G,EAAIA,EAAE9sC,IAAI80C,EACd,CACJ,CACA,MAAO,CAAEhI,EAAAA,EAAGyH,EAAAA,EAChB,GAAC,sBACD,SAASQ,EAAQhB,GACb,IACI8F,EACA+M,EAFAr9C,EAAI0rC,EAAgBF,GAGxB,GAAI4Q,EAAkB,CAClB,MAAiCW,EAAgB/8C,GAAzCg9C,EAAK,EAALA,MAAOC,EAAE,EAAFA,GAAIC,EAAK,EAALA,MAAOtgB,EAAE,EAAFA,GAC1B,EAAyBx2C,KAAKqlD,KAAKwR,EAAIzS,GAA9B2S,EAAG,EAAN5Z,EAAW+Z,EAAG,EAANtS,EACd,EAAyB5kD,KAAKqlD,KAAK7O,EAAI4N,GAA9B4S,EAAG,EAAN7Z,EAAWga,EAAG,EAANvS,EACVgS,IACAG,EAAMA,EAAI/S,UACV8S,IACAE,EAAMA,EAAIhT,UACdgT,EAAM,IAAIf,EAAc9e,EAAI6f,EAAIv5D,EAAImkD,EAAMgU,MAAOoB,EAAIt5D,EAAGs5D,EAAIzU,GAC5D2H,EAAQ6M,EAAI1mD,IAAI2mD,GAChBC,EAAOC,EAAI7mD,IAAI8mD,EACnB,KACK,CACD,MAAiBn3D,KAAKqlD,KAAKzrC,EAAGwqC,GAC9B8F,EADS,EAAD/M,EAER8Z,EAFY,EAADrS,CAGf,CACA,OAAOqR,EAAcvR,WAAW,CAACwF,EAAO+M,IAAO,EACnD,GAAC,sBACD,WAAgC,IAAvBxR,EAAO,UAAH,6CAAGC,EAAO1lD,KAAKuiD,GAChB9kD,EAAYuC,KAAZvC,EAAGC,EAASsC,KAATtC,EAAG6kD,EAAMviD,KAANuiD,EACR6U,EAAM3R,EACN4R,EAAMlgB,EAAIigB,EAAMA,GAChBE,EAAMngB,EAAIkgB,EAAMD,GAChBzR,EAAKxO,EAAI15C,EAAI45D,GACbzR,EAAKzO,EAAIz5C,EAAI45D,GACbzR,EAAK1O,EAAIoL,EAAI6U,GACnB,GAAIvR,IAAO3oD,EACP,MAAM,IAAInJ,MAAM,oBACpB,OAAO,IAAIswD,EAAMsB,EAAIC,EACzB,IAAC,yBAnND,SAAkBzI,GACd,KAAMA,aAAakH,GACf,MAAM,IAAI/xD,UAAU,4CAExB,OAAO,IAAI2jE,EAAc9Y,EAAE1/C,EAAG0/C,EAAEz/C,EAAGR,EACvC,GAAC,2BACD,SAAqBinD,GACjB,IAAM4B,EAmjBd,SAAqBC,GAAmB,IAAb7I,EAAI,UAAH,6CAAGyE,EAAMC,EAC3B0V,EAAU,IAAIp/D,MAAM6tD,EAAKpzD,QAOzBszD,EAAWR,EANMM,EAAKluD,QAAO,SAACO,EAAK69C,EAAKv+C,GAC1C,OAAIu+C,IAAQl5C,EACD3E,GACXk/D,EAAQ5/D,GAAKU,EACN8+C,EAAI9+C,EAAM69C,EAAKiH,GAC1B,GAAGjgD,GACqCigD,GAOxC,OANA6I,EAAKG,aAAY,SAAC9tD,EAAK69C,EAAKv+C,GACxB,OAAIu+C,IAAQl5C,EACD3E,GACXk/D,EAAQ5/D,GAAKw/C,EAAI9+C,EAAMk/D,EAAQ5/D,GAAIwlD,GAC5BhG,EAAI9+C,EAAM69C,EAAKiH,GAC1B,GAAG+I,GACIqR,CACX,CAnkBsBnR,CAAYjC,EAAO19C,KAAI,SAAC02C,GAAC,OAAKA,EAAEoF,CAAC,KAC/C,OAAO4B,EAAO19C,KAAI,SAAC02C,EAAGxlD,GAAC,OAAKwlD,EAAEkJ,SAASN,EAAMpuD,GAAG,GACpD,GAAC,wBACD,SAAkBwsD,GACd,OAAO8R,EAAc3P,cAAcnC,GAAQ19C,IAAIwvD,EAAc1P,WACjE,KAAC,EAlBc,GA2NnB0P,EAAcphB,KAAO,IAAIohB,EAAcrU,EAAME,GAAIF,EAAMG,GAAI7kD,GAC3D+4D,EAActR,KAAO,IAAIsR,EAAcj5D,EAAKE,EAAKF,GACjD,IAAMwnD,EAAmB,IAAIgF,QAChBnF,EAAK,WACd,WAAY5mD,EAAGC,IAAG,eACdsC,KAAKvC,EAAIA,EACTuC,KAAKtC,EAAIA,CACb,CAiEC,OAjEA,sCACD,SAAemnD,GACX7kD,KAAKskD,aAAeO,EACpBL,EAAiBh6C,OAAOxK,KAC5B,GAAC,wBA8DD,WAAiC,IAAtBw3D,EAAe,UAAH,8CACnB,OAAO5M,EAAW5qD,KAAKunD,MAAMiQ,GACjC,GAAC,mBACD,WAA4B,IAAtBA,EAAe,UAAH,8CACR/5D,EAAIg6D,EAAYz3D,KAAKvC,GAC3B,GAAI+5D,EAAc,CACd,IAAMppD,EAASpO,KAAKtC,EAAIR,EAAM,KAAO,KACrC,MAAO,GAAP,OAAUkR,GAAM,OAAG3Q,EACvB,CAEI,MAAO,KAAP,OAAYA,GAAC,OAAGg6D,EAAYz3D,KAAKtC,GAEzC,GAAC,oBACD,WACI,OAAOsC,KAAKunD,OAAM,GAAMtrD,MAAM,EAClC,GAAC,oBACD,WACI,OAAO+D,KAAKsnD,YAAW,GAAMrrD,MAAM,EACvC,GAAC,4BACD,WACI,IAAM0+B,EAAM,iCACJl9B,EAASuC,KAATvC,EAAGC,EAAMsC,KAANtC,EACX,IAAKg6D,EAAoBj6D,KAAOi6D,EAAoBh6D,GAChD,MAAM,IAAI3J,MAAM4mC,GACpB,IAAMg9B,EAAOxgB,EAAIz5C,EAAIA,GAErB,GAAIy5C,EAAIwgB,EADM9B,EAAUp4D,MACET,EACtB,MAAM,IAAIjJ,MAAM4mC,EACxB,GAAC,oBACD,SAAO6nB,GACH,OAAOxiD,KAAKvC,IAAM+kD,EAAM/kD,GAAKuC,KAAKtC,IAAM8kD,EAAM9kD,CAClD,GAAC,oBACD,WACI,OAAO,IAAI2mD,EAAMrkD,KAAKvC,EAAG05C,GAAKn3C,KAAKtC,GACvC,GAAC,oBACD,WACI,OAAOu4D,EAAc1P,WAAWvmD,MAAM+jD,SAASsC,UACnD,GAAC,iBACD,SAAI7D,GACA,OAAOyT,EAAc1P,WAAWvmD,MAAMqQ,IAAI4lD,EAAc1P,WAAW/D,IAAQ6D,UAC/E,GAAC,sBACD,SAAS7D,GACL,OAAOxiD,KAAKqQ,IAAImyC,EAAMwB,SAC1B,GAAC,sBACD,SAASoB,GACL,OAAO6Q,EAAc1P,WAAWvmD,MAAM2nD,SAASvC,EAAQplD,MAAMqmD,UACjE,GAAC,kCACD,SAAqBuR,EAAGrpB,EAAGn8C,GACvB,IAAMyvD,EAAIoU,EAAc1P,WAAWvmD,MAC7B63D,EAAKtpB,IAAMvxC,GAAOuxC,IAAMrxC,GAAO8C,OAASqkD,EAAMxP,KAAOgN,EAAE2D,eAAejX,GAAKsT,EAAE8F,SAASpZ,GACtFupB,EAAK7B,EAAc1P,WAAWqR,GAAGpS,eAAepzD,GAChDuJ,EAAMk8D,EAAGxnD,IAAIynD,GACnB,OAAOn8D,EAAI8H,OAAOwyD,EAActR,WAAQrsD,EAAYqD,EAAI0qD,UAC5D,IAAC,gCAlHD,SAAyBxlD,GACrB,IAAMk3D,EAA2B,KAAjBl3D,EAAMjO,OAChB6K,EAAIu6D,EAAcD,EAAUl3D,EAAQA,EAAMF,SAAS,IACzD,IAAK+2D,EAAoBj6D,GACrB,MAAM,IAAI1J,MAAM,yBACpB,IACI2J,EAySZ,SAAiBD,GACb,IAAQokD,EAAMD,EAANC,EACFoW,EAAMh7D,OAAO,GACbi7D,EAAOj7D,OAAO,IACdk7D,EAAOl7D,OAAO,IACdm7D,EAAOn7D,OAAO,IACdo7D,EAAOp7D,OAAO,IACdq7D,EAAOr7D,OAAO,IACdgsD,EAAMxrD,EAAIA,EAAIA,EAAKokD,EACnB0W,EAAMtP,EAAKA,EAAKxrD,EAAKokD,EACrB2W,EAAMpN,EAAKmN,EAAI9C,GAAO8C,EAAM1W,EAC5B4W,EAAMrN,EAAKoN,EAAI/C,GAAO8C,EAAM1W,EAC5B6W,EAAOtN,EAAKqN,EAAIt7D,GAAO8rD,EAAMpH,EAC7B8W,EAAOvN,EAAKsN,EAAKR,GAAQQ,EAAO7W,EAChC+W,EAAOxN,EAAKuN,EAAKR,GAAQQ,EAAO9W,EAChCgX,EAAOzN,EAAKwN,EAAKP,GAAQO,EAAO/W,EAChCiX,EAAQ1N,EAAKyN,EAAKP,GAAQO,EAAOhX,EACjCkX,EAAQ3N,EAAK0N,EAAMT,GAAQO,EAAO/W,EAClCmX,EAAQ5N,EAAK2N,EAAMtD,GAAO8C,EAAM1W,EAChCoX,EAAM7N,EAAK4N,EAAMZ,GAAQO,EAAO9W,EAChCqX,EAAM9N,EAAK6N,EAAIhB,GAAOhP,EAAMpH,EAClC,OAAOuJ,EAAK8N,EAAI/7D,EACpB,CA/TgBg8D,CADGtD,EAAUp4D,IAEf27D,GAAU17D,EAAIR,KAASA,EACzB66D,EACIqB,IACA17D,EAAIy5C,GAAKz5C,IAG6B,KAAP,EAAXmD,EAAM,MACPu4D,IACnB17D,EAAIy5C,GAAKz5C,IAEjB,IAAMwsD,EAAQ,IAAI7F,EAAM5mD,EAAGC,GAE3B,OADAwsD,EAAME,iBACCF,CACX,GAAC,iCACD,SAA2BrpD,GACvB,IAEMqpD,EAAQ,IAAI7F,EAFR2T,EAAcn3D,EAAMF,SAAS,EAAG,KAChCq3D,EAAcn3D,EAAMF,SAAS,GAAI,MAG3C,OADAupD,EAAME,iBACCF,CACX,GAAC,qBACD,SAAejU,GACX,IAAMp1C,EAAQ6nD,EAAYzS,GACpB/1C,EAAMW,EAAMjO,OACZsW,EAASrI,EAAM,GACrB,GAAY,KAARX,GAAuB,KAARA,IAA0B,IAAXgJ,GAA8B,IAAXA,GACjD,OAAOlJ,KAAKq5D,kBAAkBx4D,GAElC,GAAY,KAARX,GAAyB,IAAXgJ,EACd,OAAOlJ,KAAKs5D,oBAAoBz4D,GACpC,MAAM,IAAI9M,MAAM,wGAAD,OAAyGmM,GAC5H,GAAC,4BACD,SAAsBm6B,GAClB,OAAOgqB,EAAMxP,KAAK8S,SAAS4R,EAAoBl/B,GACnD,GAAC,2BACD,SAAqBoB,EAASt2B,EAAWq0D,GAErC,IAAMv7D,EAAIw7D,EADVh+B,EAAUitB,EAAYjtB,IAEtB,EAAiBi+B,EAAmBv0D,GAA5B2xC,EAAC,EAADA,EAAG34C,EAAC,EAADA,EACX,GAAiB,IAAbq7D,GAA+B,IAAbA,EAClB,MAAM,IAAIzlE,MAAM,kDAEpB,IAAMqa,EAAoB,EAAXorD,EAAe,KAAO,KAC/Bh8D,EAAI6mD,EAAMiG,QAAQl8C,EAASqpD,EAAY3gB,IACrCl9B,EAAMgoC,EAANhoC,EACF+/C,EAAOjU,EAAO5O,EAAGl9B,GACjB+sC,EAAKxP,GAAKl5C,EAAI07D,EAAM//C,GACpBgtC,EAAKzP,EAAIh5C,EAAIw7D,EAAM//C,GACnBg+C,EAAIvT,EAAMxP,KAAK+kB,qBAAqBp8D,EAAGmpD,EAAIC,GACjD,IAAKgR,EACD,MAAM,IAAI7jE,MAAM,+CAEpB,OADA6jE,EAAExN,iBACKwN,CACX,KAAC,EArEa,GA+HlB,SAASiC,EAAS17D,GACd,OAAOnL,OAAOg4B,SAAS7sB,EAAE,GAAI,KAAO,EAAI,KAAOA,EAAIA,CACvD,CACA,SAAS27D,EAAY75D,GACjB,GAAIA,EAAKrN,OAAS,GAAiB,IAAZqN,EAAK,GACxB,MAAM,IAAIlM,MAAM,kCAAD,OAAmCszD,EAAWpnD,KAEjE,IAAMC,EAAMD,EAAK,GACXssB,EAAMtsB,EAAKU,SAAS,EAAGT,EAAM,GACnC,IAAKA,GAAOqsB,EAAI35B,SAAWsN,EACvB,MAAM,IAAInM,MAAM,2CAEpB,GAAe,IAAXw4B,EAAI,IAAeA,EAAI,IAAM,IAC7B,MAAM,IAAIx4B,MAAM,8CAEpB,MAAO,CAAEkM,KAAM+3D,EAAczrC,GAAMorC,KAAM13D,EAAKU,SAAST,EAAM,GACjE,CAlBAmkD,EAAMxP,KAAO,IAAIwP,EAAMzC,EAAME,GAAIF,EAAMG,IACvCsC,EAAMM,KAAO,IAAIN,EAAMrnD,EAAKA,GAgCrB,IAAMmtD,EAAS,WAClB,WAAYrT,EAAG34C,IAAG,eACd6B,KAAK82C,EAAIA,EACT92C,KAAK7B,EAAIA,EACT6B,KAAKoqD,gBACT,CAoBC,OApBA,sCAqBD,WACI,IAAQtT,EAAS92C,KAAT82C,EAAG34C,EAAM6B,KAAN7B,EACX,IAAK47D,EAAmBjjB,GACpB,MAAM,IAAI/iD,MAAM,0CACpB,IAAKgmE,EAAmB57D,GACpB,MAAM,IAAIpK,MAAM,yCACxB,GAAC,sBACD,WACI,IAAMimE,EAAOpY,EAAMhoC,GAAK1c,EACxB,OAAO8C,KAAK7B,EAAI67D,CACpB,GAAC,wBACD,WACI,OAAOh6D,KAAKi6D,WAAa,IAAI9P,EAAUnqD,KAAK82C,EAAG8K,EAAMhoC,EAAI5Z,KAAK7B,GAAK6B,IACvE,GAAC,2BACD,WAAoC,IAAtBw3D,EAAe,UAAH,8CACtB,OAAO5M,EAAW5qD,KAAKk6D,SAAS1C,GACpC,GAAC,sBACD,WAA+B,IAAtBA,EAAe,UAAH,8CACX2C,EAAON,EAASO,EAAoBp6D,KAAK7B,IAC/C,GAAIq5D,EACA,OAAO2C,EACX,IAAME,EAAOR,EAASO,EAAoBp6D,KAAK82C,IACzCwjB,EAAOF,EAAoBC,EAAKznE,OAAS,GACzC2nE,EAAOH,EAAoBD,EAAKvnE,OAAS,GACzCA,EAASwnE,EAAoBC,EAAKznE,OAAS,EAAIunE,EAAKvnE,OAAS,EAAI,GACvE,MAAO,KAAP,OAAYA,EAAM,aAAK0nE,GAAI,OAAGD,EAAI,aAAKE,GAAI,OAAGJ,EAClD,GAAC,wBACD,WACI,OAAOn6D,KAAKw6D,eAChB,GAAC,mBACD,WACI,OAAOx6D,KAAKk6D,UAChB,GAAC,+BACD,WACI,OAAOtP,EAAW5qD,KAAKy6D,eAC3B,GAAC,0BACD,WACI,OAAOhD,EAAYz3D,KAAK82C,GAAK2gB,EAAYz3D,KAAK7B,EAClD,IAAC,0BA1DD,SAAmB83C,GACf,IAAM1zC,EAAMm4D,EAASzkB,GACfriD,EAAO,wBACb,GAAmB,kBAARqiD,IAAqB1zC,EAC5B,MAAM,IAAIjQ,UAAU,GAAD,OAAIsB,EAAI,oCAC/B,IAAM0T,EAAM/E,EAAM8kD,EAAWpR,GAAOA,EACpC,GAAmB,MAAf3uC,EAAI1U,OACJ,MAAM,IAAImB,MAAM,GAAD,OAAIH,EAAI,2BAC3B,OAAO,IAAIu2D,EAAUwQ,EAAYrzD,EAAIrL,MAAM,EAAG,KAAM0+D,EAAYrzD,EAAIrL,MAAM,GAAI,MAClF,GAAC,qBACD,SAAeg6C,GACX,IAAM1zC,EAAMm4D,EAASzkB,GACrB,GAAmB,kBAARA,IAAqB1zC,EAC5B,MAAM,IAAIjQ,UAAU,oDACxB,MAlCR,SAA2B2N,GACvB,GAAIA,EAAKrN,OAAS,GAAgB,IAAXqN,EAAK,GACxB,MAAM,IAAIlM,MAAM,0BAAD,OAA2BszD,EAAWpnD,KAEzD,GAAIA,EAAK,KAAOA,EAAKrN,OAAS,EAC1B,MAAM,IAAImB,MAAM,uCAEpB,MAAkC+lE,EAAY75D,EAAKU,SAAS,IAA9Cm2C,EAAC,EAAP72C,KACR,EAAsC65D,EADT,EAAZnC,MACHx5D,EAAC,EAAP8B,KAAe26D,EAAU,EAAhBjD,KACjB,GAAIiD,EAAWhoE,OACX,MAAM,IAAImB,MAAM,gDAAD,OAAiDszD,EAAWuT,KAE/E,MAAO,CAAE9jB,EAAAA,EAAG34C,EAAAA,EAChB,CAqByB08D,CAAkBt4D,EAAM0zC,EAAM2U,EAAW3U,IAC1D,OAAO,IAAIkU,EADF,EAADrT,EAAI,EAAD34C,EAEf,GAAC,qBACD,SAAe83C,GACX,OAAOj2C,KAAK86D,QAAQ7kB,EACxB,KAAC,EAzBiB,GAkEtB,SAASr0C,IAAuB,2BAAR2oD,EAAM,yBAANA,EAAM,gBAC1B,IAAKA,EAAO54C,MAAM+oD,GACd,MAAM,IAAI3mE,MAAM,4BACpB,GAAsB,IAAlBw2D,EAAO33D,OACP,OAAO23D,EAAO,GAGlB,IAFA,IAAM33D,EAAS23D,EAAOzyD,QAAO,SAACy2C,EAAGhsC,GAAG,OAAKgsC,EAAIhsC,EAAI3P,MAAM,GAAE,GACnDkqB,EAAS,IAAIzqB,WAAWO,GACrB+E,EAAI,EAAG6yD,EAAM,EAAG7yD,EAAI4yD,EAAO33D,OAAQ+E,IAAK,CAC7C,IAAM4K,EAAMgoD,EAAO5yD,GACnBmlB,EAAOpc,IAAI6B,EAAKioD,GAChBA,GAAOjoD,EAAI3P,MACf,CACA,OAAOkqB,CACX,CACA,SAAS49C,EAAS75D,GACd,OAAOA,aAAiBxO,UAC5B,CACA,IAAMq4D,EAAQvyD,MAAM1F,KAAK,CAAEG,OAAQ,MAAO,SAACmF,EAAGJ,GAAC,OAAKA,EAAEyE,SAAS,IAAIg6C,SAAS,EAAG,IAAI,IACnF,SAASiR,EAAWsD,GAChB,KAAMA,aAAkBt4D,YACpB,MAAM,IAAI0B,MAAM,uBAEpB,IADA,IAAIkiD,EAAM,GACDt+C,EAAI,EAAGA,EAAIgzD,EAAO/3D,OAAQ+E,IAC/Bs+C,GAAOyU,EAAMC,EAAOhzD,IAExB,OAAOs+C,CACX,CACA,SAASwhB,EAAYvhB,GACjB,GAAIA,EAAMyf,EACN,MAAM,IAAI5hE,MAAM,2BACpB,OAAOmiD,EAAI95C,SAAS,IAAIg6C,SAAS,GAAI,IACzC,CACA,SAAS2kB,EAAS7kB,GACd,OAAO0U,EAAW6M,EAAYvhB,GAClC,CACA,SAASkkB,EAAoBlkB,GACzB,IAAMD,EAAMC,EAAI95C,SAAS,IACzB,OAAoB,EAAb65C,EAAIrjD,OAAa,IAAH,OAAOqjD,GAAQA,CACxC,CACA,SAAS0kB,EAAY1kB,GACjB,GAAmB,kBAARA,EACP,MAAM,IAAI3jD,UAAU,4CAA8C2jD,GAEtE,OAAOh5C,OAAO,KAAD,OAAMg5C,GACvB,CACA,SAAS2U,EAAW3U,GAChB,GAAmB,kBAARA,EACP,MAAM,IAAI3jD,UAAU,2CAA6C2jD,GAErE,GAAIA,EAAIrjD,OAAS,EACb,MAAM,IAAImB,MAAM,4CAA8CkiD,EAAIrjD,QAEtE,IADA,IAAM+lB,EAAQ,IAAItmB,WAAW4jD,EAAIrjD,OAAS,GACjC+E,EAAI,EAAGA,EAAIghB,EAAM/lB,OAAQ+E,IAAK,CACnC,IAAMiG,EAAQ,EAAJjG,EACJkzD,EAAU5U,EAAIh6C,MAAM2B,EAAGA,EAAI,GAC3BktD,EAAO93D,OAAOg4B,SAAS6/B,EAAS,IACtC,GAAI73D,OAAO+3D,MAAMD,IAASA,EAAO,EAC7B,MAAM,IAAI/2D,MAAM,yBACpB4kB,EAAMhhB,GAAKmzD,CACf,CACA,OAAOnyC,CACX,CACA,SAASq/C,EAAcn3D,GACnB,OAAO85D,EAAYtT,EAAWxmD,GAClC,CACA,SAAS6nD,EAAYzS,GACjB,OAAOA,aAAe5jD,WAAaA,WAAWI,KAAKwjD,GAAO2U,EAAW3U,EACzE,CACA,SAASqP,EAAgBpP,GACrB,GAAmB,kBAARA,GAAoBljD,OAAOg6D,cAAc9W,IAAQA,EAAM,EAC9D,OAAOj5C,OAAOi5C,GAClB,GAAmB,kBAARA,GAAoB6jB,EAAmB7jB,GAC9C,OAAOA,EACX,MAAM,IAAI5jD,UAAU,sDACxB,CACA,SAAS6kD,EAAI5I,GAAgB,IAAbn8C,EAAI,UAAH,6CAAGwvD,EAAMC,EAChB/kC,EAASyxB,EAAIn8C,EACnB,OAAO0qB,GAAU9f,EAAM8f,EAAS1qB,EAAI0qB,CACxC,CACA,SAASsuC,EAAK3tD,EAAG4tD,GAGb,IAFA,IAAQxJ,EAAMD,EAANC,EACJt1B,EAAM9uB,EACH4tD,KAAUruD,GACbuvB,GAAOA,EACPA,GAAOs1B,EAEX,OAAOt1B,CACX,CAwBA,SAASm5B,EAAOhoC,GAA0B,IAAlButC,EAAS,UAAH,6CAAGrJ,EAAMC,EACnC,GAAInkC,IAAW1gB,GAAOiuD,GAAUjuD,EAC5B,MAAM,IAAIjJ,MAAM,6CAAD,OAA8C2pB,EAAM,gBAAQutC,IAK/E,IAHA,IAAI1c,EAAI4I,EAAIz5B,EAAQutC,GAChB74D,EAAI64D,EACJxtD,EAAIT,EAAKU,EAAIR,EAAK4sD,EAAI5sD,EAAKnF,EAAIiF,EAC5BuxC,IAAMvxC,GAAK,CACd,IAAMkuD,EAAI94D,EAAIm8C,EACRuI,EAAI1kD,EAAIm8C,EACR/C,EAAI/tC,EAAIqsD,EAAIoB,EACZtxC,EAAIlc,EAAI3F,EAAImzD,EAClB94D,EAAIm8C,EAAGA,EAAIuI,EAAGr5C,EAAIqsD,EAAGpsD,EAAI3F,EAAG+xD,EAAIte,EAAGzzC,EAAI6hB,CAC3C,CACA,IAAMuxC,EAAM/4D,EACZ,GAAI+4D,IAAQjuD,EACR,MAAM,IAAInJ,MAAM,0BACpB,OAAOojD,EAAI15C,EAAGwtD,EAClB,CAkBA,IAAM+P,EAAa,SAACzsB,EAAGn8C,GAAC,OAAMm8C,EAAIn8C,EAAI+K,GAAO/K,CAAC,EACxC6oE,EAAY,KAAH,IAAG99D,EAAOF,OAAO,MAChC,SAAS05D,EAAgBpgB,GACrB,IAAQ38B,EAAMgoC,EAANhoC,EACFshD,EAAKj+D,OAAO,sCACZ+rD,GAAM9rD,EAAMD,OAAO,sCACnBk+D,EAAKl+D,OAAO,uCACZgsD,EAAKiS,EACLE,EAAKJ,EAAW/R,EAAK1S,EAAG38B,GACxByhD,EAAKL,GAAYhS,EAAKzS,EAAG38B,GAC3Bi9C,EAAK1f,EAAIZ,EAAI6kB,EAAKF,EAAKG,EAAKF,EAAIvhD,GAChC48B,EAAKW,GAAKikB,EAAKpS,EAAKqS,EAAKpS,EAAIrvC,GAC3Bg9C,EAAQC,EAAKoE,EACbnE,EAAQtgB,EAAKykB,EAKnB,GAJIrE,IACAC,EAAKj9C,EAAIi9C,GACTC,IACAtgB,EAAK58B,EAAI48B,GACTqgB,EAAKoE,GAAazkB,EAAKykB,EACvB,MAAM,IAAIlnE,MAAM,2CAA6CwiD,GAEjE,MAAO,CAAEqgB,MAAAA,EAAOC,GAAAA,EAAIC,MAAAA,EAAOtgB,GAAAA,EAC/B,CACA,SAASijB,EAAa/jC,GAClB,IAAQ9b,EAAMgoC,EAANhoC,EAEF0hD,EAAqB,EADR5lC,EAAK9iC,OACO,IAC3BqL,EAAI+5D,EAActiC,GAKtB,OAJI4lC,EAAQ,IACRr9D,IAAShB,OAAOq+D,IAChBr9D,GAAK2b,IACL3b,GAAK2b,GACF3b,CACX,CAAC,IACKs9D,EAAQ,WACV,cAAc,eACVv7D,KAAKjI,EAAI,IAAI1F,WAAW,IAAIyN,KAAK,GACjCE,KAAKu2C,EAAI,IAAIlkD,WAAW,IAAIyN,KAAK,GACjCE,KAAKw7D,QAAU,CACnB,CA2CC,OA3CA,4BACD,WAAgB,2BAAR9nE,EAAM,yBAANA,EAAM,gBACV,OAAO85D,GAAMiO,WAAU,MAAhBjO,GAAK,CAAYxtD,KAAKu2C,GAAC,OAAK7iD,GACvC,GAAC,sBACD,WACI,GAAoC,oBAAzB85D,GAAMkO,eACb,MAAM,IAAI3nE,MAAM,yDAAyD,2BAFrEL,EAAM,yBAANA,EAAM,gBAGd,IAAM64B,EAAMihC,GAAMkO,eAAc,MAApBlO,GAAK,CAAgBxtD,KAAKu2C,GAAC,OAAK7iD,IAC5C,GAAI64B,aAAe9X,QACf,MAAM,IAAI1gB,MAAM,uDACpB,OAAOw4B,CACX,GAAC,kBACD,WACI,GAAIvsB,KAAKw7D,SAAW,IAChB,MAAM,IAAIznE,MAAM,qDAEpBiM,KAAKw7D,SAAW,CACpB,GAAC,6DACD,qGAAoC,OAAvBv3D,EAAO,EAAH,6BAAG,IAAI5R,WAAY,SACjB2N,KAAKy6B,KAAKz6B,KAAKjI,EAAG1F,WAAWI,KAAK,CAAC,IAAQwR,GAAK,OAAzD,OAANjE,KAAKu2C,EAAI,EAAH,cACSv2C,KAAKy6B,KAAKz6B,KAAKjI,GAAE,OAA1B,GAANiI,KAAKjI,EAAI,EAAH,KACc,IAAhBkM,EAAKrR,OAAY,kEAENoN,KAAKy6B,KAAKz6B,KAAKjI,EAAG1F,WAAWI,KAAK,CAAC,IAAQwR,GAAK,QAAzD,OAANjE,KAAKu2C,EAAI,EAAH,eACSv2C,KAAKy6B,KAAKz6B,KAAKjI,GAAE,QAAhCiI,KAAKjI,EAAI,EAAH,sDACT,kDARA,IAQA,wBACD,WAAoC,IAAzBkM,EAAO,UAAH,6CAAG,IAAI5R,WAClB2N,KAAKu2C,EAAIv2C,KAAK27D,SAAS37D,KAAKjI,EAAG1F,WAAWI,KAAK,CAAC,IAAQwR,GACxDjE,KAAKjI,EAAIiI,KAAK27D,SAAS37D,KAAKjI,GACR,IAAhBkM,EAAKrR,SAEToN,KAAKu2C,EAAIv2C,KAAK27D,SAAS37D,KAAKjI,EAAG1F,WAAWI,KAAK,CAAC,IAAQwR,GACxDjE,KAAKjI,EAAIiI,KAAK27D,SAAS37D,KAAKjI,GAChC,GAAC,+DACD,mFACgB,OAAZiI,KAAK47D,OAAO,SACG57D,KAAKy6B,KAAKz6B,KAAKjI,GAAE,OAA1B,OAANiI,KAAKjI,EAAI,EAAH,uBACCiI,KAAKjI,GAAC,gDAChB,kDALA,IAKA,0BACD,WAGI,OAFAiI,KAAK47D,OACL57D,KAAKjI,EAAIiI,KAAK27D,SAAS37D,KAAKjI,GACrBiI,KAAKjI,CAChB,KAAC,EAhDS,GAkDd,SAASgiE,EAAmB7jB,GACxB,OAAOl5C,EAAMk5C,GAAOA,EAAM0L,EAAMhoC,CACpC,CACA,SAAS89C,EAAoBxhB,GACzB,OAAOl5C,EAAMk5C,GAAOA,EAAM0L,EAAMC,CACpC,CACA,SAASga,EAASC,EAAQtwB,EAAGqL,GACzB,IAAMN,EAAIyhB,EAAc8D,GACxB,GAAK/B,EAAmBxjB,GAAxB,CAEA,IAAQ38B,EAAMgoC,EAANhoC,EACFsxC,EAAI7G,EAAMxP,KAAK8S,SAASpR,GACxBO,EAAIK,EAAI+T,EAAEztD,EAAGmc,GACnB,GAAIk9B,IAAM95C,EAAV,CAEA,IAAMmB,EAAIg5C,EAAIuO,EAAOnP,EAAG38B,GAAKu9B,EAAI3L,EAAIqL,EAAIC,EAAGl9B,GAAIA,GAChD,GAAIzb,IAAMnB,EAAV,CAEA,IAAMqpC,EAAM,IAAI8jB,EAAUrT,EAAG34C,GAE7B,MAAO,CAAEkoC,IAAAA,EAAKmzB,UADItO,EAAEztD,IAAM4oC,EAAIyQ,EAAI,EAAI,GAAK9jD,OAAOk4D,EAAExtD,EAAIR,GAF9C,CAHA,CALA,CAYd,CACA,SAASq8D,EAAoBx1D,GACzB,IAAImyC,EACJ,GAAmB,kBAARnyC,EACPmyC,EAAMnyC,OAEL,GAAmB,kBAARA,GAAoB/Q,OAAOg6D,cAAcjpD,IAAQA,EAAM,EACnEmyC,EAAMj5C,OAAO8G,QAEZ,GAAmB,kBAARA,EAAkB,CAC9B,GAAmB,KAAfA,EAAInR,OACJ,MAAM,IAAImB,MAAM,oCACpBmiD,EAAMykB,EAAY52D,EACtB,KACK,KAAI22D,EAAS32D,GAMd,MAAM,IAAIzR,UAAU,8BALpB,GAAmB,KAAfyR,EAAInR,OACJ,MAAM,IAAImB,MAAM,oCACpBmiD,EAAM8hB,EAAcj0D,EAIxB,CACA,IAAKg2D,EAAmB7jB,GACpB,MAAM,IAAIniD,MAAM,qCACpB,OAAOmiD,CACX,CAUA,SAASwjB,EAAmBv0D,GACxB,GAAIA,aAAqBglD,EAErB,OADAhlD,EAAUilD,iBACHjlD,EAEX,IACI,OAAOglD,EAAU2Q,QAAQ31D,EAI7B,CAFA,MAAOmT,GACH,OAAO6xC,EAAU4R,YAAY52D,EACjC,CACJ,CACO,SAASnD,EAAaq4B,GAAkC,IAAtBm9B,EAAe,UAAH,8CACjD,OAAOnT,EAAM2X,eAAe3hC,GAAYitB,WAAWkQ,EACvD,CAyBA,SAASyE,EAASp7D,GAEd,OAAOm3D,EADOn3D,EAAMjO,OAAS,GAAKiO,EAAM5E,MAAM,EAAG,IAAM4E,EAE3D,CACA,SAASq7D,EAAYr7D,GACjB,IAAMs7D,EAAKF,EAASp7D,GACdu7D,EAAKjlB,EAAIglB,EAAIva,EAAMhoC,GACzB,OAAOyiD,EAAWD,EAAKp/D,EAAMm/D,EAAKC,EACtC,CACA,SAASC,EAAWnmB,GAChB,GAAmB,kBAARA,EACP,MAAM,IAAIniD,MAAM,mBAEpB,OAAO62D,EADK6M,EAAYvhB,GAE5B,CACA,SAASomB,EAAY7gC,EAASpB,EAAYkiC,GACtC,GAAe,MAAX9gC,EACA,MAAM,IAAI1nC,MAAM,2CAAD,OAA4C0nC,EAAO,MACtE,IAAM+gC,EAAK9T,EAAYjtB,GACjBob,EAAI0iB,EAAoBl/B,GACxBoiC,EAAW,CAACJ,EAAWxlB,GAAIqlB,EAAYM,IAC7C,GAAoB,MAAhBD,EAAsB,EACD,IAAjBA,IACAA,EAAe/O,GAAMc,YAAY,KACrC,IAAM91D,EAAIkwD,EAAY6T,GACtB,GAAiB,KAAb/jE,EAAE5F,OACF,MAAM,IAAImB,MAAM,yCACpB0oE,EAAS7kE,KAAKY,EAClB,CAGA,MAAO,CAAEyL,KAFIrC,EAAW,aAAI66D,GAEbjxB,EADLywB,EAASO,GACD3lB,EAAAA,EACtB,CACA,SAAS6lB,GAAYC,EAAQn7D,GACzB,IAAM6kC,EAAkBs2B,EAAlBt2B,IAAKmzB,EAAamD,EAAbnD,SACX,EAAsCnmE,OAAOI,OAAO,CAAEmpE,WAAW,EAAM/gC,KAAK,GAAQr6B,GAA5Eo7D,EAAS,EAATA,UAAW/gC,EAAG,EAAHA,IAAKC,EAAS,EAATA,UACpB8gC,GAAav2B,EAAI4zB,aACjB5zB,EAAMA,EAAIw2B,aACVrD,GAAY,GAEhB,IAAMpM,EAASvxB,EAAMwK,EAAIm0B,gBAAkBn0B,EAAIy2B,oBAC/C,OAAOhhC,EAAY,CAACsxB,EAAQoM,GAAYpM,CAC5C,CAUA,SAAS2P,GAASthC,EAASC,GAAoB,IAEvC2K,EAF4B7kC,EAAO,UAAH,6CAAG,CAAC,EACxC,EAAuB86D,EAAY7gC,EAASC,EAASl6B,EAAK+6D,cAAlDt4D,EAAI,EAAJA,KAAMunC,EAAC,EAADA,EAAGqL,EAAC,EAADA,EAEXmmB,EAAO,IAAIzB,EAEjB,IADAyB,EAAKC,WAAWh5D,KACPoiC,EAAMw1B,EAASmB,EAAKE,eAAgB1xB,EAAGqL,KAC5CmmB,EAAKC,aACT,OAAOP,GAAYr2B,EAAK7kC,EAC5B,CAmKA6iD,EAAMxP,KAAKmZ,eAAe,GAC1B,IAAMlN,GAAS,CACXmN,KAAMC,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IACNC,IAAqB,kBAATrT,MAAqB,WAAYA,KAAOA,KAAKgG,YAASxoD,GAOhE6kE,GAAuB,CAAC,EACjB3P,GAAQ,CACjB4P,kBAAiB,SAAC/iC,GACd,IAEI,OADAk/B,EAAoBl/B,IACb,CAIX,CAFA,MAAO/hB,GACH,OAAO,CACX,CACJ,EACA+kD,WAAY,SAAChjC,EAAYijC,GAGrB,OAAOvC,EAAS5jB,EAFNoiB,EAAoBl/B,GACpBk/B,EAAoB+D,GACH1b,EAAMhoC,GACrC,EACA2jD,cAAe,SAACljC,GACZ,IAAM8iB,EAAIoc,EAAoBl/B,GAC9B,OAAO0gC,EAASnZ,EAAMhoC,EAAIujC,EAC9B,EACAqgB,eAAgB,SAACrgB,EAAGmgB,EAAO9F,GACvB,IAAM3V,EAAIwC,EAAMiG,QAAQnN,GAClBx/C,EAAI47D,EAAoB+D,GACxB1F,EAAIvT,EAAMxP,KAAK+kB,qBAAqB/X,EAAGlkD,EAAGT,GAChD,IAAK06D,EACD,MAAM,IAAI7jE,MAAM,6BACpB,OAAO6jE,EAAEtQ,WAAWkQ,EACxB,EACAiG,cAAe,SAACtgB,EAAGmgB,EAAO9F,GACtB,IAAM3V,EAAIwC,EAAMiG,QAAQnN,GAClBx/C,EAAIq6D,EAActP,EAAY4U,IACpC,OAAOzb,EAAE8F,SAAShqD,GAAG2pD,WAAWkQ,EACpC,EACAkG,iBAAkB,SAAChoC,GAEf,IADAA,EAAOgzB,EAAYhzB,IACV9iC,OAAS,IAAM8iC,EAAK9iC,OAAS,KAClC,MAAM,IAAImB,MAAM,yDAEpB,OAAOgnE,EADK5jB,EAAI6gB,EAActiC,GAAOksB,EAAMhoC,EAAI1c,GAAOA,EAE1D,EACAoxD,YAAa,WAAsB,IAArBz1C,EAAc,UAAH,6CAAG,GACxB,GAAIioC,GAAOqN,IACP,OAAOrN,GAAOqN,IAAIxN,gBAAgB,IAAItuD,WAAWwmB,IAEhD,GAAIioC,GAAOmN,KAAM,CAClB,IAAQK,EAAgBxN,GAAOmN,KAAvBK,YACR,OAAOj8D,WAAWI,KAAK67D,EAAYz1C,GACvC,CAEI,MAAM,IAAI9kB,MAAM,oDAExB,EACAw6D,iBAAkB,WACd,OAAOf,GAAMkQ,iBAAiBlQ,GAAMc,YAAY,IACpD,EACAjH,WAAAA,EACAuD,WAAAA,EACAhpD,YAAAA,EACAu1C,IAAAA,EACAuO,OAAAA,EACAthD,OAAQ,WAAF,8BAAE,8HAAUu5D,EAAQ,yBAARA,EAAQ,YAClB7c,GAAOqN,IAAK,CAAF,+BACWrN,GAAOqN,IAAIK,OAAO3zB,OAAO,UAAWj5B,EAAW,aAAI+7D,IAAU,OAAtE,OAANjrE,EAAS,EAAH,uBACL,IAAIL,WAAWK,IAAO,WAExBouD,GAAOmN,KAAM,CAAF,gBAGwB,OAFhCQ,EAAe3N,GAAOmN,KAAtBQ,WACF/4B,EAAO+4B,EAAW,UACxBkP,EAASr5D,SAAQ,SAACknC,GAAC,OAAK9V,EAAKkF,OAAO4Q,EAAE,IAAE,kBACjCn5C,WAAWI,KAAKijC,EAAKmF,WAAS,cAG/B,IAAI9mC,MAAM,gDAA+C,4CAEtE,kDAdO,GAeR0nE,WAAY,WAAF,8BAAE,WAAO13D,GAAG,qHAAK45D,EAAQ,iCAARA,EAAQ,cAC3B7c,GAAOqN,IAAK,CAAF,gCACSrN,GAAOqN,IAAIK,OAAOoP,UAAU,MAAO75D,EAAK,CAAEnQ,KAAM,OAAQ8hC,KAAM,CAAE9hC,KAAM,aAAe,EAAO,CAAC,SAAQ,OAChF,OADlCiqE,EAAO,EAAH,KACJz7D,EAAUR,EAAW,aAAI+7D,GAAS,SACnB7c,GAAOqN,IAAIK,OAAOrsD,KAAK,OAAQ07D,EAAMz7D,GAAQ,OAAtD,OAAN1P,EAAS,EAAH,uBACL,IAAIL,WAAWK,IAAO,YAExBouD,GAAOmN,KAAM,CAAF,gBAGwB,OAFhC6P,EAAehd,GAAOmN,KAAtB6P,WACFpoC,EAAOooC,EAAW,SAAU/5D,GAClC45D,EAASr5D,SAAQ,SAACknC,GAAC,OAAK9V,EAAKkF,OAAO4Q,EAAE,IAAE,kBACjCn5C,WAAWI,KAAKijC,EAAKmF,WAAS,cAG/B,IAAI9mC,MAAM,qDAAoD,4CAE3E,mDAhBW,GAiBZgqE,gBAAYzlE,EACZojE,oBAAgBpjE,EAChB0lE,WAAY,WAAF,8BAAE,WAAO5jE,GAAG,gGACkB,QACvB9B,KADT2lE,EAAOd,GAAqB/iE,IACV,gCACCozD,GAAMppD,OAAO/R,WAAWI,KAAK2H,GAAK,SAACy4B,GAAC,OAAKA,EAAE6Z,WAAW,EAAE,KAAE,OAAvEwxB,EAAO,EAAH,KACVD,EAAOr8D,EAAYs8D,EAAMA,GACzBf,GAAqB/iE,GAAO6jE,EAAK,sBALdN,EAAQ,iCAARA,EAAQ,mCAOxBnQ,GAAMppD,OAAM,MAAZopD,GAAK,CAAQyQ,GAAI,OAAKN,KAAS,2CACzC,mDARW,GASZQ,eAAgB,SAAC/jE,GACb,GAAgC,oBAArBozD,GAAMuQ,WACb,MAAM,IAAIhqE,MAAM,qDACpB,IAAIkqE,EAAOd,GAAqB/iE,GAChC,QAAa9B,IAAT2lE,EAAoB,CACpB,IAAMC,EAAO1Q,GAAMuQ,WAAW1rE,WAAWI,KAAK2H,GAAK,SAACy4B,GAAC,OAAKA,EAAE6Z,WAAW,EAAE,KACzEuxB,EAAOr8D,EAAYs8D,EAAMA,GACzBf,GAAqB/iE,GAAO6jE,CAChC,CAAC,2BARoBN,EAAQ,iCAARA,EAAQ,kBAS7B,OAAOnQ,GAAMuQ,WAAU,MAAhBvQ,GAAK,CAAYyQ,GAAI,OAAKN,GACrC,EACAjP,WAAU,WAAqC,IAApC7J,EAAa,UAAH,6CAAG,EAAGqF,EAAQ,UAAH,6CAAG7F,EAAMxP,KAC/BsQ,EAAS+E,IAAU7F,EAAMxP,KAAOqV,EAAQ,IAAI7F,EAAM6F,EAAMzsD,EAAGysD,EAAMxsD,GAGvE,OAFAynD,EAAO6I,eAAenJ,GACtBM,EAAOwC,SAAS8N,GACTtQ,CACX,+lBCjiCaiZ,GCtEJC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAUX9qE,SAAAA,EAAY+qE,EAAkBC,GAAAA,IAAAA,EACxBpZ,GADwBoZ,EAAAA,EAAAA,GAAAA,KAAAA,GAE5B,IAAQn8D,EAAqBk8D,EAArBl8D,QAAYwoB,GAAAA,EAAAA,EAAAA,GAAS0zC,EAA7B,GACQE,EAASF,EAATE,KACF7jC,EACY,IAAhB6jC,EAAK5rE,OAAewP,EAApB,YAA0Co8D,EAAKxpC,KAAK,KAApD,OAA+D5yB,EAIjE,OAHA,cAAMu4B,GACNtnC,OAAOI,QAAP,UAAoBm3B,GACpB,EAAKh3B,KAAO,EAAKL,YAAYK,KAC7B,EAAK2qE,SAAW,iBACd,cAAQ,EAAApZ,GAAR,EAAQA,EAAR,CAAoBmZ,GAAD,eAAaC,KACjC,EAFD,CAGD,kBAtBUF,EAsBV,OAtB8B/rE,qBDRjBmsE,EAAShhE,GACvB,MAAoB,kBAANA,GAAuB,MAALA,CACjC,UAmBeihE,EAAMzjE,GACpB,MAAwB,kBAAVA,EAAqBuV,KAAKC,UAAUxV,GAA3C,GAAuDA,CAC/D,UAOe0jE,EAAiBjrB,GAC/B,MAAwBA,EAAMtU,OAAtBnP,EAAF,EAAEA,KAAMh1B,EAAAA,EAAAA,MACd,OAAOg1B,OAAO33B,EAAY2C,CAC3B,UAMe2jE,EACd9hD,EACAW,EACAohD,EACA5jE,GAEA,IAAe,IAAX6hB,EAAJ,EAEsB,IAAXA,EACTA,EAAS,CAAC,EACiB,kBAAXA,IAChBA,EAAS,CAAE1a,QAAS0a,IAGtB,IAAQ0hD,EAAiB/gD,EAAjB+gD,KAAMM,EAAWrhD,EAAXqhD,OACNp3D,EAASm3D,EAATn3D,KACR,EAKIoV,EAJFiiD,EADI,EACJA,WADI,IAEJ38D,QAAAA,OAAO,IAAG,EAAH,6BAAiCsF,EAAjC,KACLq3D,EAAa,qBAAsBA,EAAzB,IAA0C,IAD/C,oBAEcL,EAAMzjE,GAFpB,MAKT,OAAO,gBACLA,MAAAA,EACAyM,KAAAA,EACAq3D,WAAAA,EACAh7D,IAAKy6D,EAAKA,EAAK5rE,OAAS,GACxB4rE,KAAAA,EACAM,OAAAA,GACGhiD,GAPE,IAQL1a,QAAAA,GAnBD,CAqBF,UAMgBg8D,EACfthD,EACAW,EACAohD,EACA5jE,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,KAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAzFOwjE,EADchhE,EA4FLqf,IA3FoC,oBAAvBrf,EAAEwrC,OAAO+1B,YA4FpCliD,EAAS,CAACA,IACX,UAEeA,GAAhB,yDACE,GADSg6B,EAAX,UACQwnB,EAAUM,EAAU9nB,EAAGr5B,EAASohD,EAAQ5jE,IAE9C,iBACE,OADF,UACQqjE,EAAN,yKApGN,IAAuB7gE,CAoGjB,mCAUWwhE,EACfhkE,EACA4jE,GAAAA,IACAlrD,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAKI,CAAC,EAAD,mKAKJ,GALI,EAEkEA,EAA9D6qD,KAAAA,OAAI,IAAG,KAAT,IAAgE7qD,EAAnDmrD,OAAAA,OAAM,IAAG,GAAC7jE,GAAvB,IAAgE0Y,EAAjCwI,OAAAA,OAAM,IAAG,GAAxC,IAAgExI,EAAjBmxC,KAAAA,OAAI,IAAG,KACtDoa,EAAe,CAAEV,KAAAA,EAAMM,OAAAA,GAEzB3iD,IACFlhB,EAAQ4jE,EAAOM,QAAQlkE,EAAOikE,GAG5Bpa,GACgB,SAAhB+Z,EAAOn3D,MACP+2D,EAASI,EAAOthD,SAChBkhD,EAASxjE,KACR9C,MAAMC,QAAQ6C,IAEf,IAAW8I,KAAO9I,OACW3C,IAAvBumE,EAAOthD,OAAOxZ,WACT9I,EAAM8I,GAMjBq7D,GAAQ,EAAZ,UAEsBP,EAAOQ,UAAUpkE,EAAOikE,IAA9C,yDAEE,OAFSZ,EAAX,QACEc,GAAQ,EAAR,UACM,CAACd,OAAShmE,GAAhB,yJAGoBumE,EAAOn2D,QAAQzN,EAAOikE,IAA5C,gFAAU3oB,EAAD,KAAIx+C,EAAJ,KAAOoG,EAAP,KACDmhE,EAAKL,EAAIlnE,EAAGoG,EAAa,CAC7BqgE,UAAYlmE,IAANi+C,EAAkBioB,EAAlB,kBAA6BA,GAAJ,CAAUjoB,IACzCuoB,YAAcxmE,IAANi+C,EAAkBuoB,EAAlB,kBAA+BA,GAAJ,CAAY/mE,IAC/CokB,OAAAA,EACA2oC,KAAAA,IAJF,UAOgBwa,GAAhB,gEAAW3hE,EAAX,SACQ,GAAN,iBAEE,OADAyhE,GAAQ,EAAR,UACM,CAACzhE,EAAE,QAAIrF,GAAb,gCACS6jB,IACTpkB,EAAI4F,EAAE,QAEIrF,IAANi+C,EACFt7C,EAAQlD,EACCkD,aAAiB+H,IAC1B/H,EAAMyF,IAAI61C,EAAGx+C,GACJkD,aAAiBiX,IAC1BjX,EAAMoV,IAAItY,GACD0mE,EAASxjE,KAClBA,EAAMs7C,GAAKx+C,IAEd,8RAIDqnE,EAAJ,2BACwBP,EAAOU,QAAQtkE,EAAYikE,IAAjD,2DAEE,OAFSZ,EAAX,QACEc,GAAQ,EAAR,UACM,CAACd,OAAShmE,GAAhB,qJAIA8mE,EAAJ,iBACE,OADF,UACQ,MAAC9mE,EAAW2C,GAAlB,wGAlEE,EAkEF,CE5LJ,IAMayH,EAAAA,WAYXnP,SAAAA,EAAYisE,GAAAA,IAAAA,EAAAA,MAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAQV,IACE93D,EAME83D,EANF93D,KACA6V,EAKEiiD,EALFjiD,OACA8hD,EAIEG,EAJFH,UACAE,EAGEC,EAHFD,QAJI,EAOFC,EAFFL,QAAAA,OAAO,IAAG,EAAClkE,SAAAA,GAAD,OAAoBA,CAL1B,MAOFukE,EADF92D,QAAAA,OAAO,IAAG,GAAH,eAAG,wHAGZ1I,KAAK0H,KAAOA,EACZ1H,KAAKud,OAASA,EACdvd,KAAK0I,QAAUA,EACf1I,KAAKm/D,QAAUA,EAGbn/D,KAAKq/D,UADHA,EACe,SAACpkE,EAAOwiB,GAEvB,OAAO2gD,EADQiB,EAAUpkE,EAAOwiB,GACNA,EAAS,EAAMxiB,EAC1C,EAEgB,iBAAM,EAAvB,EAIA+E,KAAKu/D,QADHA,EACa,SAACtkE,EAAOwiB,GAErB,OAAO2gD,EADQmB,EAAQtkE,EAAOwiB,GACJA,EAAS,EAAMxiB,EAC1C,EAEc,iBAAM,EAArB,CAEH,CAmDA,OAjDD,8BAIA8D,SAAO9D,GACL,gBAoDFA,EACA4jE,GAEA,IAAM/hD,EAASokC,EAASjmD,EAAO4jE,GAE/B,GAAI/hD,EAAO,GACT,MAAMA,EAAO,EAEhB,CA5DU/d,CAAO9D,EAAO+E,KACtB,GAED,oBAIA1M,SAAO2H,GACL,OAAO3H,EAAO2H,EAAO+E,KACtB,GAED,gBAIAy/D,SAAGxkE,GACD,OAAOwkE,EAAGxkE,EAAO+E,KAClB,GAED,kBAKA8kD,SAAK7pD,GACH,gBAuDuBA,EAAgB4jE,GACzC,IAAM/hD,EAASokC,EAASjmD,EAAO4jE,EAAQ,CAAE1iD,QAAQ,EAAM2oC,MAAM,IAE7D,GAAIhoC,EAAO,GACT,MAAMA,EAAO,GAEb,OAAOA,EAAO,EAEjB,CA/DUgoC,CAAK7pD,EAAO+E,KACpB,GAED,sBASAkhD,SACEjmD,GADM,IAEN0Y,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAEI,CAAC,EAEL,OAAOutC,EAASjmD,EAAO+E,KAAM2T,EAC9B,OAtGUjR,YA4HGpP,EAAa2H,EAAgB4jE,GAC3C,IAAM/hD,EAASokC,EAASjmD,EAAO4jE,EAAQ,CAAE1iD,QAAQ,IAEjD,GAAIW,EAAO,GACT,MAAMA,EAAO,GAEb,OAAOA,EAAO,EAEjB,UAoBe2iD,EAASxkE,EAAgB4jE,GAEvC,OADe3d,EAASjmD,EAAO4jE,GAChB,EAChB,UAOe3d,EACdjmD,EACA4jE,GAII,IAHJlrD,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAGI,CAAC,EAEC+rD,EAAST,EAAIhkE,EAAO4jE,EAAQlrD,GAC5B4I,EAAQoiD,EAAce,GAE5B,GAAInjD,EAAM,GAAI,CACZ,IAAMjE,EAAQ,IAAI+lD,EAAY9hD,EAAM,IAAtB,eAA0B,uGACtBmjD,GAAhB,8DAAW/hE,EAAX,SACQ,GAAN,gBACE,OADF,SACQA,EAAE,GAAR,sMAKN,MAAO,CAAC2a,OAAOhgB,EAChB,CACC,IAAMP,EAAIwkB,EAAM,GAChB,MAAO,MAACjkB,EAAWP,EAEtB,UCpIe4nE,EAAU/rE,EAAcyrE,GACtC,OAAO,IAAI38D,EAAO,CAAEgF,KAAM9T,EAAM2pB,OAAQ,KAAM8hD,UAAAA,GAC/C,UCnDejiD,IACd,OAAOuiD,EAAO,OAAO,kBAAM,CAAd,GACd,UAYehnD,EAA6BinD,GAC3C,OAAO,IAAIl9D,EAAO,CAChBgF,KAAM,QACN6V,OAAQqiD,EACPl3D,SAAD,0BAASzN,GAAT,wFACM2kE,IAAWznE,MAAMC,QAAQ6C,GAA7B,2BACuBA,EAAMyN,WAA3B,yDACE,OADF,qBAAY/Q,EAAD,KAAII,EAAJ,cACH,CAACJ,EAAGI,EAAG6nE,GAAb,qMAINT,QAAO,SAAClkE,GACN,OAAO9C,MAAMC,QAAQ6C,GAASA,EAAMgB,QAAUhB,CAC/C,EACDokE,UAAS,SAACpkE,GACR,OACE9C,MAAMC,QAAQ6C,IAAd,0CAC0CyjE,EAAMzjE,EAEnD,GAEJ,UAMegkB,IACd,OAAO0gD,EAAO,WAAY1kE,SAAAA,GACxB,MAAwB,mBAAVA,CACf,GACF,UAoEemhB,EACdyjD,GAEA,OAAOF,EAAO,YAAa1kE,SAAAA,GACzB,OACEA,aAAiB4kE,GAAjB,eACgBA,EAAMjsE,KADtB,6BACwD8qE,EAAMzjE,EAEjE,GACF,UAqGeuhB,EAAWsjD,GACzB,IAAMC,EAAcrB,EAAMoB,GACpBniE,SAAWmiE,EACjB,OAAO,IAAIp9D,EAAO,CAChBgF,KAAM,UACN6V,OACQ,WAAN5f,GAAwB,WAANA,GAAwB,YAANA,EAAkBmiE,EAAW,KACnET,UAAS,SAACpkE,GACR,OACEA,IAAU6kE,GAAV,yBAC0BC,EAD1B,oBAC0DrB,EAAMzjE,EAEnE,GAEJ,UAwCe+kE,IACd,OAAOL,EAAO,SAAS,kBAAM,CAAhB,GACd,UAMerhD,EAAeugD,GAC7B,OAAO,IAAIn8D,GAAJ,kBACFm8D,GADa,IAEhBQ,UAAW,SAACpkE,EAAOikE,GAAR,OAA0B,OAAVjkE,GAAkB4jE,EAAOQ,UAAUpkE,EAAOikE,EAFrD,EAGhBK,QAAS,SAACtkE,EAAOikE,GAAR,OAA0B,OAAVjkE,GAAkB4jE,EAAOU,QAAQtkE,EAAOikE,EAAtB,IAE9C,UAMexhD,IACd,OAAOiiD,EAAO,UAAW1kE,SAAAA,GACvB,MACoB,kBAAVA,IAAuB8vD,MAAM9vD,IAArC,oCACoCyjE,EAAMzjE,EAE7C,GACF,UAgDekiB,EAAe0hD,GAC7B,OAAO,IAAIn8D,GAAJ,kBACFm8D,GADa,IAEhBQ,UAAW,SAACpkE,EAAOikE,GAAR,YACC5mE,IAAV2C,GAAuB4jE,EAAOQ,UAAUpkE,EAAOikE,EAHjC,EAIhBK,QAAS,SAACtkE,EAAOikE,GAAR,YAA0B5mE,IAAV2C,GAAuB4jE,EAAOU,QAAQtkE,EAAOikE,EAAtB,IAEnD,UASe//C,EACd8gD,EACAC,GAEA,OAAO,IAAIx9D,EAAO,CAChBgF,KAAM,SACN6V,OAAQ,KACP7U,SAAD,0BAASzN,GAAT,kFACMwjE,EAASxjE,GAAb,qCACkBA,GAAhB,8CAEE,OAFSs7C,EAAX,WACQx+C,EAAIkD,EAAMs7C,GAAhB,SACM,CAACA,EAAGA,EAAG0pB,GAAb,OACA,OADA,SACM,CAAC1pB,EAAGx+C,EAAGmoE,GAAb,iEAINb,UAAS,SAACpkE,GACR,OACEwjE,EAASxjE,IAAT,qCAAwDyjE,EAAMzjE,EAEjE,GAEJ,UAiDeohB,IACd,OAAOsjD,EAAO,UAAW1kE,SAAAA,GACvB,MACmB,kBAAVA,GAAP,oCACoCyjE,EAAMzjE,EAE7C,GACF,UAsDeshB,EAAM4jD,GACpB,IAAMC,EAAQJ,IAEd,OAAO,IAAIt9D,EAAO,CAChBgF,KAAM,QACN6V,OAAQ,KACP7U,SAAD,0BAASzN,GAAT,kFACM9C,MAAMC,QAAQ6C,GAAlB,gBACQrI,EAASuB,KAAKmlB,IAAI6mD,EAASvtE,OAAQqI,EAAMrI,QAEtC+E,EAAI,EAAb,YAAgBA,EAAI/E,GAApB,gBACE,OADF,SACQ,CAAC+E,EAAGsD,EAAMtD,GAAIwoE,EAASxoE,IAAMyoE,GAAnC,OAD0BzoE,IAA5B,yDAKJ0nE,UAAS,SAACpkE,GACR,OACE9C,MAAMC,QAAQ6C,IAAd,oCACoCyjE,EAAMzjE,EAE7C,GAEJ,UASeyM,EACd6V,GAEA,IAAM1W,EAAOxT,OAAOwT,KAAK0W,GACzB,OAAO,IAAI7a,EAAO,CAChBgF,KAAM,OACN6V,OAAAA,EACC7U,SAAD,0BAASzN,GAAT,oFACMwjE,EAASxjE,GAAb,2BACkB4L,GAAhB,yDACE,OADS0vC,EAAX,iBACQ,CAACA,EAAGt7C,EAAMs7C,GAAIh5B,EAAOg5B,IAA3B,qMAIN8oB,UAAS,SAACpkE,GACR,OACEwjE,EAASxjE,IAAT,qCAAwDyjE,EAAMzjE,EAEjE,GAEJ,UAwDeN,EAAM0lE,GACpB,IAAMN,EAAcM,EAAQ55D,KAAKtI,SAAAA,GAAD,OAAOA,EAAEuJ,IAArB,IAA2BstB,KAAK,OACpD,OAAO,IAAItyB,EAAO,CAChBgF,KAAM,QACN6V,OAAQ,KACR8hD,UAAS,SAACpkE,EAAOikE,GACf,IAEA,EAFMX,EAAW,GAAjB,UAEgB8B,GAAhB,QAAK,EAAL,qBAAyB,KACvB,EAAoBpB,EAAIhkE,EAD1B,QACoCikE,GAAxBQ,GAAV,UAAM,SAGN,KAFA,OAAgBA,EAAhB,GAAM,GAEK,GACT,MAAO,GACF,IACL,EADK,UACmBA,GAAxB,QAAK,EAAL,qBAAgC,KAApBpB,GAAoB,kBAArB,GACLA,GACFC,EAAS3mE,KAAK0mE,EAEjB,gCAEJ,gCAED,MAAO,8CACyCyB,EADzC,oBACyErB,EAC5EzjE,IAFG,OAIFsjE,EAEN,GAEJ,UAMerhD,IACd,OAAOyiD,EAAO,WAAW,kBAAM,CAAlB,GACd,UCtoBexjD,EACd0iD,EACA12D,EACAg3D,GAEA,OAAO,IAAIz8D,GAAJ,kBACFm8D,GADa,IAEhBM,QAAS,SAAClkE,EAAOikE,GACf,OAAOO,EAAGxkE,EAAOkN,GACb02D,EAAOM,QAAQA,EAAQlkE,EAAOikE,GAAMA,GACpCL,EAAOM,QAAQlkE,EAAOikE,EAC3B,IAEJ,sCCbD,SAASoB,EAAQ/xB,EAAGluC,EAAKiZ,GACvB,OAAOjZ,GAAOkuC,GAAKA,GAAKj1B,CAC1B,CAMA,SAASinD,EAAajqB,GACpB,QAAUh+C,IAANg+C,EAAiB,MAAO,CAAC,EAC7B,GAAIA,IAAMjjD,OAAOijD,GAAI,OAAOA,EAC5B,MAAMhkD,UAAU,2CAClB,mFA+HA,SAASkuE,EAAOC,GAEdzgE,KAAKygE,OAAS,GAAGxkE,MAAM9B,KAAKsmE,EAC9B,CAEAD,EAAOhtE,UAAY,CAIjBktE,YAAa,WACX,OAAQ1gE,KAAKygE,OAAO7tE,MACtB,EAUCo5C,KAAM,WACL,OAAKhsC,KAAKygE,OAAO7tE,OAEToN,KAAKygE,OAAOznE,SAjCA,CAkCrB,EASD2nE,QAAS,SAASC,GAChB,GAAIzoE,MAAMC,QAAQwoE,GAEhB,IADA,IAAIH,EAAsCG,EACnCH,EAAO7tE,QACZoN,KAAKygE,OAAOpvD,QAAQovD,EAAOI,YAE7B7gE,KAAKygE,OAAOpvD,QAAQuvD,EAExB,EASAhpE,KAAM,SAASgpE,GACb,GAAIzoE,MAAMC,QAAQwoE,GAEhB,IADA,IAAIH,EAAsCG,EACnCH,EAAO7tE,QACZoN,KAAKygE,OAAO7oE,KAAK6oE,EAAOznE,cAE1BgH,KAAKygE,OAAO7oE,KAAKgpE,EAErB,GAUF,IAAI/hE,GAAY,EAOhB,SAASiiE,EAAa/oB,EAAOgpB,GAC3B,GAAIhpB,EACF,MAAMzlD,UAAU,iBAClB,OAAOyuE,GAAkB,KAC3B,CA8Bc,IAAIC,EAAmB,QAUrC,SAASlpB,EAAY7oB,EAAUtb,GAC7B,KAAM3T,gBAAgB83C,GACpB,OAAO,IAAIA,EAAY7oB,EAAUtb,GAGnC,IADAsb,OAAwB32B,IAAb22B,EAAyB3yB,OAAO2yB,GAAU8b,cAAgBi2B,KACpDA,EACf,MAAM,IAAIjtE,MAAM,mDAElB4f,EAAU4sD,EAAa5sD,GAGvB3T,KAAKihE,YAAa,EAElBjhE,KAAKkhE,UAAW,EAEhBlhE,KAAKmhE,SAAW,KAEhBnhE,KAAKohE,OAAS7lE,QAAQoY,EAAe,OAErC3T,KAAKqhE,WAAa9lE,QAAQoY,EAAmB,WAE7CtgB,OAAO+R,eAAepF,KAAM,WAAY,CAAC/E,MAAO,UAChD5H,OAAO+R,eAAepF,KAAM,QAAS,CAAC/E,MAAO+E,KAAKohE,SAClD/tE,OAAO+R,eAAepF,KAAM,YAAa,CAAC/E,MAAO+E,KAAKqhE,YACxD,CA4FA,SAAShM,EAAYpmC,EAAUtb,GAC7B,KAAM3T,gBAAgBq1D,GACpB,OAAO,IAAIA,EAAYpmC,EAAUtb,GAEnC,IADAsb,OAAwB32B,IAAb22B,EAAyB3yB,OAAO2yB,GAAU8b,cAAgBi2B,KACpDA,EACf,MAAM,IAAIjtE,MAAM,mDAElB4f,EAAU4sD,EAAa5sD,GAGvB3T,KAAKihE,YAAa,EAElBjhE,KAAKshE,SAAW,KAEhBthE,KAAKuhE,SAAW,CAACxpB,MAAOx8C,QAAQoY,EAAe,QAE/CtgB,OAAO+R,eAAepF,KAAM,WAAY,CAAC/E,MAAO,SAClD,CA2DA,SAASumE,EAAY7tD,GACnB,IAAIokC,EAAQpkC,EAAQokC,MAMM0pB,EAAkB,EAClBC,EAAkB,EAClBC,EAAoB,EACpBC,EAAsB,IACtBC,EAAsB,IAShD7hE,KAAKygC,QAAU,SAASqhC,EAAQC,GAG9B,IAxVoB,IAwVhBA,GAAgD,IAAtBJ,EAE5B,OADAA,EAAoB,EACbb,EAAa/oB,GAItB,IA9VoB,IA8VhBgqB,EACF,OAAOljE,EAGT,GAA0B,IAAtB8iE,EAAyB,CAG3B,GAAIrB,EAAQyB,EAAM,EAAM,KAEtB,OAAOA,EAIT,GAAIzB,EAAQyB,EAAM,IAAM,KAGtBJ,EAAoB,EACpBF,EAAkBM,EAAO,SAItB,GAAIzB,EAAQyB,EAAM,IAAM,KAEd,MAATA,IACFH,EAAsB,KAEX,MAATG,IACFF,EAAsB,KAGxBF,EAAoB,EACpBF,EAAkBM,EAAO,QAItB,KAAIzB,EAAQyB,EAAM,IAAM,KAgB3B,OAAOjB,EAAa/oB,GAdP,MAATgqB,IACFH,EAAsB,KAEX,MAATG,IACFF,EAAsB,KAGxBF,EAAoB,EACpBF,EAAkBM,EAAO,GAO3B,CAMA,OADAN,IAAsC,EAAIE,EACnC,IACT,CAIA,IAAKrB,EAAQyB,EAAMH,EAAqBC,GAatC,OARAJ,EAAkBE,EAAoBD,EAAkB,EACxDE,EAAsB,IACtBC,EAAsB,IAGtBC,EAAOnB,QAAQoB,GAGRjB,EAAa/oB,GAgBtB,GAXA6pB,EAAsB,IACtBC,EAAsB,IAMtBJ,GAAoBM,EAAO,KAAU,GAAKJ,GAD1CD,GAAmB,IAKfA,IAAoBC,EACtB,OAAO,KAGT,IAAIK,EAAaP,EAOjB,OAHAA,EAAkBE,EAAoBD,EAAkB,EAGjDM,CACT,CACF,CAOA,SAASC,EAAYtuD,GACPA,EAAQokC,MAMpB/3C,KAAKygC,QAAU,SAASqhC,EAAQE,GAE9B,IAvdoB,IAudhBA,EACF,OAAOnjE,EAIT,GAAIyhE,EAAQ0B,EAAY,EAAQ,KAC9B,OAAOA,EAGT,IAAIzqE,EAAOrE,EAEPotE,EAAQ0B,EAAY,IAAQ,OAC9BzqE,EAAQ,EACRrE,EAAS,KAGFotE,EAAQ0B,EAAY,KAAQ,QACnCzqE,EAAQ,EACRrE,EAAS,KAGFotE,EAAQ0B,EAAY,MAAS,WACpCzqE,EAAQ,EACRrE,EAAS,KAQX,IAHA,IAAI2N,EAAQ,EAAEmhE,GAAe,EAAIzqE,GAAUrE,GAGpCqE,EAAQ,GAAG,CAGhB,IAAI2qE,EAAOF,GAAe,GAAKzqE,EAAQ,GAGvCsJ,EAAMjJ,KAAK,IAAe,GAAPsqE,GAGnB3qE,GAAS,CACX,CAGA,OAAOsJ,CACT,CACF,CA1WAi3C,EAAYtkD,UAAY,CAMtBkB,OAAQ,SAAgBg/C,EAAO//B,GAC7B,IAAI9S,EAEFA,EADmB,kBAAV6yC,GAAsBA,aAAiB/J,YACxC,IAAIt3C,WAAWqhD,GACG,kBAAVA,GAAsB,WAAYA,GACzCA,EAAMhhD,kBAAkBi3C,YACzB,IAAIt3C,WAAWqhD,EAAMhhD,OACNghD,EAAM/gD,WACN+gD,EAAMjxC,YAErB,IAAIpQ,WAAW,GAGzBshB,EAAU4sD,EAAa5sD,GAElB3T,KAAKihE,aACRjhE,KAAKmhE,SAAW,IAAIK,EAAY,CAACzpB,MAAO/3C,KAAKohE,SAC7CphE,KAAKkhE,UAAW,GAElBlhE,KAAKihE,WAAa1lE,QAAQoY,EAAgB,QAS1C,IAPA,IAKImJ,EALAqlD,EAAe,IAAI3B,EAAO3/D,GAE1BuhE,EAAc,IAKVD,EAAazB,gBACnB5jD,EAAS9c,KAAKmhE,SAAS1gC,QAAQ0hC,EAAcA,EAAan2B,WAC3CntC,GAEA,OAAXie,IAEA3kB,MAAMC,QAAQ0kB,GAChBslD,EAAYxqE,KAAKg2C,MAAMw0B,EAA0CtlD,GAEjEslD,EAAYxqE,KAAKklB,IAErB,IAAK9c,KAAKihE,WAAY,CACpB,EAAG,CAED,IADAnkD,EAAS9c,KAAKmhE,SAAS1gC,QAAQ0hC,EAAcA,EAAan2B,WAC3CntC,EACb,MACa,OAAXie,IAEA3kB,MAAMC,QAAQ0kB,GAChBslD,EAAYxqE,KAAKg2C,MAAMw0B,EAA0CtlD,GAEjEslD,EAAYxqE,KAAKklB,GACrB,QAAUqlD,EAAazB,eACvB1gE,KAAKmhE,SAAW,IAClB,CAoBA,OAlBIiB,EAAYxvE,UAI4B,IAAtC,CAAC,SAAS4e,QAAQxR,KAAKivB,WACtBjvB,KAAKqhE,YAAerhE,KAAKkhE,WAEL,QAAnBkB,EAAY,IACdpiE,KAAKkhE,UAAW,EAChBkB,EAAYppE,SAIZgH,KAAKkhE,UAAW,IAjQ1B,SAA4BkB,GAE1B,IADA,IAAIjkE,EAAI,GACCxG,EAAI,EAAGA,EAAIyqE,EAAYxvE,SAAU+E,EAAG,CAC3C,IAAI0qE,EAAKD,EAAYzqE,GACjB0qE,GAAM,MACRlkE,GAAK7B,OAAOqxC,aAAa00B,IAEzBA,GAAM,MACNlkE,GAAK7B,OAAOqxC,aAA0B,OAAZ00B,GAAM,IACQ,OAAT,KAALA,IAE9B,CACA,OAAOlkE,CACT,CAyPWmkE,CAAmBF,EAC5B,GA8BF/M,EAAY7hE,UAAY,CAMtBmB,OAAQ,SAAgB4tE,EAAY5uD,GAClC4uD,EAAaA,EAAajmE,OAAOimE,GAAc,GAC/C5uD,EAAU4sD,EAAa5sD,GAKlB3T,KAAKihE,aACRjhE,KAAKshE,SAAW,IAAIW,EAAYjiE,KAAKuhE,WACvCvhE,KAAKihE,WAAa1lE,QAAQoY,EAAgB,QAM1C,IAJA,IAGImJ,EAHAjc,EAAQ,GACRshE,EAAe,IAAI3B,EA1Y3B,SAA4BnkD,GAgB1B,IAZA,IAAIle,EAAI7B,OAAO+f,GAGXzC,EAAIzb,EAAEvL,OAGN+E,EAAI,EAGJmyD,EAAI,GAGDnyD,EAAIiiB,GAAG,CAGZ,IAAIiZ,EAAI10B,EAAEuuC,WAAW/0C,GAKrB,GAAIk7B,EAAI,OAAUA,EAAI,MAEpBi3B,EAAElyD,KAAKi7B,QAIJ,GAAI,OAAUA,GAAKA,GAAK,MAE3Bi3B,EAAElyD,KAAK,YAIJ,GAAI,OAAUi7B,GAAKA,GAAK,MAG3B,GAAIl7B,IAAMiiB,EAAI,EACZkwC,EAAElyD,KAAK,WAGJ,CAEH,IAAIi/C,EAAIx6B,EAAOqwB,WAAW/0C,EAAI,GAG9B,GAAI,OAAUk/C,GAAKA,GAAK,MAAQ,CAE9B,IAAItI,EAAQ,KAAJ1b,EAGJzgC,EAAQ,KAAJykD,EAIRiT,EAAElyD,KAAK,OAAW22C,GAAK,IAAMn8C,GAG7BuF,GAAK,CACP,MAKEmyD,EAAElyD,KAAK,MAEX,CAIFD,GAAK,CACP,CAGA,OAAOmyD,CACT,CA6TkC0Y,CAAmBD,KAGzCJ,EAAazB,gBACnB5jD,EAAS9c,KAAKshE,SAAS7gC,QAAQ0hC,EAAcA,EAAan2B,WAC3CntC,GAEX1G,MAAMC,QAAQ0kB,GAChBjc,EAAMjJ,KAAKg2C,MAAM/sC,EAAoCic,GAErDjc,EAAMjJ,KAAKklB,GAEf,IAAK9c,KAAKihE,WAAY,CACpB,MACEnkD,EAAS9c,KAAKshE,SAAS7gC,QAAQ0hC,EAAcA,EAAan2B,WAC3CntC,GAEX1G,MAAMC,QAAQ0kB,GAChBjc,EAAMjJ,KAAKg2C,MAAM/sC,EAAoCic,GAErDjc,EAAMjJ,KAAKklB,GAEf9c,KAAKshE,SAAW,IAClB,CACA,OAAO,IAAIjvE,WAAWwO,EACxB","sources":["../../src/Layout.ts","../node_modules/@noble/hashes/esm/sha3.js","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/account.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/layout.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/loader.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/node_modules/fast-stable-stringify/index.js","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/errors.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/connection.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@web3auth/solana-provider/node_modules/@solana/web3.js/src/index.ts","../node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","../node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/sollet/solletInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/sollet/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../node_modules/@web3auth/solana-provider/src/solanaWallet.ts","../node_modules/@web3auth/solana-provider/node_modules/buffer/index.js","../node_modules/base-x/src/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/bs58/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/index.browser.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/@babel/runtime/helpers/get.js","../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/@babel/runtime/helpers/superPropBase.js","../node_modules/@noble/ed25519/lib/esm/index.js","../node_modules/@noble/hashes/esm/_assert.js","../node_modules/@noble/hashes/esm/_sha2.js","../node_modules/@noble/hashes/esm/_u64.js","../node_modules/@noble/hashes/esm/hmac.js","../node_modules/@noble/hashes/esm/sha256.js","../node_modules/@noble/hashes/esm/sha512.js","../node_modules/@noble/hashes/esm/utils.js","../node_modules/@noble/hashes/esm/cryptoBrowser.js","../node_modules/@noble/secp256k1/lib/esm/index.js","../node_modules/superstruct/src/utils.ts","../node_modules/superstruct/src/error.ts","../node_modules/superstruct/src/struct.ts","../node_modules/superstruct/src/structs/utilities.ts","../node_modules/superstruct/src/structs/types.ts","../node_modules/superstruct/src/structs/coercions.ts","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapConstructorWithOpts, } from './utils.js';\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        assert.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        assert.exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        assert.exists(this, false);\n        assert.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        assert.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        assert.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n","import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as HttpAgent} from 'http';\nimport {Agent as HttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: HttpAgent | HttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager:\n    | {requestEnd(): void; requestStart(): HttpAgent | HttpsAgent}\n    | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        agentManager = new AgentManager(\n          url.startsWith('https:') /* useHttps */,\n        );\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof HttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof HttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agentManager = {requestEnd() {}, requestStart: () => httpAgent};\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: HttpAgent | HttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | DurableNonceTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | DurableNonceTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as\n        | BlockheightBasedTransactionConfirmationStrategy\n        | DurableNonceTransactionConfirmationStrategy;\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import type { Transaction } from \"@solana/web3.js\";\nimport { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<Transaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: Transaction[] }>) => Promise<Transaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: Transaction }, Transaction>(\"signTransaction\", signTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction }, { signature: string }>(\"signAndSendTransaction\", signAndSendTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction[] }, Transaction[]>(\"signAllTransactions\", signAllTransactions),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        unsignedTx.push(bs58.encode(req.params.message[i].serializeMessage()));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n","import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\n\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolletHandlers } from \"./providerHandlers\";\n\nexport class SolletInjectedProvider extends BaseInjectedProvider<SolletWallet> {\n  protected getProviderHandlers(injectedProvider: SolletWallet): IProviderHandlers {\n    return getSolletHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\nimport { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolletHandlers = (injectedProvider: SolletWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  providerHandlers.signMessage = async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n    const { signature } = await injectedProvider.sign(req.params.message, \"utf8\");\n    return signature;\n  };\n  providerHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return providerHandlers;\n};\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { Keypair, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      transaction.partialSign(keyPair);\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      transaction.sign(keyPair);\n\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [bs58.encode(transaction.serialize())],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        transaction.partialSign(keyPair);\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction(transaction: Transaction): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const signedTransaction = (await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    })) as Transaction;\n    return signedTransaction;\n  }\n\n  public async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const signedTransactions = (await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    })) as Transaction[];\n    return signedTransactions;\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _websocket = _interopRequireDefault(require(\"./lib/client/websocket.browser\"));\n\nvar _client = _interopRequireDefault(require(\"./lib/client\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Client = /*#__PURE__*/function (_CommonClient) {\n  (0, _inherits2[\"default\"])(Client, _CommonClient);\n\n  var _super = _createSuper(Client);\n\n  function Client() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ws://localhost:8080\";\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$autoconnect = _ref.autoconnect,\n        autoconnect = _ref$autoconnect === void 0 ? true : _ref$autoconnect,\n        _ref$reconnect = _ref.reconnect,\n        reconnect = _ref$reconnect === void 0 ? true : _ref$reconnect,\n        _ref$reconnect_interv = _ref.reconnect_interval,\n        reconnect_interval = _ref$reconnect_interv === void 0 ? 1000 : _ref$reconnect_interv,\n        _ref$max_reconnects = _ref.max_reconnects,\n        max_reconnects = _ref$max_reconnects === void 0 ? 5 : _ref$max_reconnects;\n\n    var generate_request_id = arguments.length > 2 ? arguments[2] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, Client);\n    return _super.call(this, _websocket[\"default\"], address, {\n      autoconnect: autoconnect,\n      reconnect: reconnect,\n      reconnect_interval: reconnect_interval,\n      max_reconnects: max_reconnects\n    }, generate_request_id);\n  }\n\n  return (0, _createClass2[\"default\"])(Client);\n}(_client[\"default\"]);\n\nexports.Client = Client;","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","var superPropBase = require(\"./superPropBase.js\");\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    module.exports = _get = Reflect.get.bind(), module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  }\n\n  return _get.apply(this, arguments);\n}\n\nmodule.exports = _get, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var getPrototypeOf = require(\"./getPrototypeOf.js\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _255n = BigInt(255);\nconst CURVE_ORDER = _2n ** BigInt(252) + BigInt('27742317777372353535851937790883648493');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: _2n ** _255n - BigInt(19),\n    l: CURVE_ORDER,\n    n: CURVE_ORDER,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst MAX_256B = _2n ** BigInt(256);\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 ** _2n);\n        const B = mod(Y1 ** _2n);\n        const C = mod(_2n * mod(Z1 ** _2n));\n        const D = mod(a * A);\n        const E = mod(mod((X1 + Y1) ** _2n) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.ZERO;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2 ** _2n));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= MAX_256B)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & (_2n ** _255n - _1n));\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, MAX_256B))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        x_3 = mod((DA + CB) ** _2n);\n        z_3 = mod(x_1 * (DA - CB) ** _2n);\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n","export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n","import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (!(this.iHash instanceof Hash))\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        const blockLen = (this.blockLen = this.iHash.blockLen);\n        this.outputLen = this.iHash.outputLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > this.iHash.blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n","export const crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst POW_2_256 = _2n ** BigInt(256);\nconst CURVE = {\n    a: _0n,\n    b: BigInt(7),\n    P: POW_2_256 - _2n ** BigInt(32) - BigInt(977),\n    n: POW_2_256 - BigInt('432420386565659656852420866394968145599'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n};\nexport { CURVE };\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 ** _2n);\n        const Z2Z2 = mod(Z2 ** _2n);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 ** _2n);\n        const B = mod(Y1 ** _2n);\n        const C = mod(B ** _2n);\n        const D = mod(_2n * (mod((X1 + B) ** _2n) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E ** _2n);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 ** _2n);\n        const Z2Z2 = mod(Z2 ** _2n);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H ** _2n);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r ** _2n - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, 33));\n        const y = bytesToNumber(bytes.subarray(33, 65));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        const h = truncateHash(msgHash);\n        const { r, s } = normalizeSignature(signature);\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(r));\n        const { n } = CURVE;\n        const rinv = invert(r, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.y & _1n ? '03' : '02';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = isUint8a(hex);\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = isUint8a(hex);\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const rLen = numberToHexUnpadded(rHex.length / 2);\n        const sLen = numberToHexUnpadded(sHex.length / 2);\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every(isUint8a))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction isUint8a(bytes) {\n    return bytes instanceof Uint8Array;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction numTo32bStr(num) {\n    if (num > POW_2_256)\n        throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    return hexToBytes(numTo32bStr(num));\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst POW_2_128 = _2n ** BigInt(128);\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n    const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n    const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n    const b2 = a1;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    const { n } = CURVE;\n    const byteLength = hash.length;\n    const delta = byteLength * 8 - 256;\n    let h = bytesToNumber(hash);\n    if (delta > 0)\n        h = h >> BigInt(delta);\n    if (h >= n)\n        h -= n;\n    return h;\n}\nclass HmacDrbg {\n    constructor() {\n        this.v = new Uint8Array(32).fill(1);\n        this.k = new Uint8Array(32).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        if (typeof utils.hmacSha256Sync !== 'function')\n            throw new Error('utils.hmacSha256Sync is undefined, you need to set it');\n        const res = utils.hmacSha256Sync(this.k, ...values);\n        if (res instanceof Promise)\n            throw new Error('To use sync sign(), ensure utils.hmacSha256 is sync');\n        return res;\n    }\n    incr() {\n        if (this.counter >= 1000) {\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        }\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        this.v = await this.hmac(this.v);\n        return this.v;\n    }\n    generateSync() {\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n    const k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k))\n        return;\n    const { n } = CURVE;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    const sig = new Signature(r, s);\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (isUint8a(key)) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isPub(item) {\n    const arr = isUint8a(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    const hex = numTo32bStr(num);\n    return hexToBytes(hex);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(32);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== 32)\n            throw new Error('sign: Expected 32 bytes of extra data');\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    let { sig, recovery } = recSig;\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    await drbg.reseed(seed);\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction finalizeSchnorrChallenge(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nfunction hasEvenY(point) {\n    return (point.y & _1n) === _0n;\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nfunction initSchnorrSigArgs(message, privateKey, auxRand) {\n    if (message == null)\n        throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n    const m = ensureBytes(message);\n    const d0 = normalizePrivateKey(privateKey);\n    const rand = ensureBytes(auxRand);\n    if (rand.length !== 32)\n        throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    const P = Point.fromPrivateKey(d0);\n    const px = P.toRawX();\n    const d = hasEvenY(P) ? d0 : CURVE.n - d0;\n    return { m, P, px, d, rand };\n}\nfunction initSchnorrNonce(d, t0h) {\n    return numTo32b(d ^ bytesToNumber(t0h));\n}\nfunction finalizeSchnorrNonce(k0h) {\n    const k0 = mod(bytesToNumber(k0h), CURVE.n);\n    if (k0 === _0n)\n        throw new Error('sign: Creation of signature failed. k is zero');\n    const R = Point.fromPrivateKey(k0);\n    const rx = R.toRawX();\n    const k = hasEvenY(R) ? k0 : CURVE.n - k0;\n    return { R, rx, k };\n}\nfunction finalizeSchnorrSig(R, k, e, d) {\n    return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n}\nasync function schnorrSign(message, privateKey, auxRand = utils.randomBytes()) {\n    const { m, px, d, rand } = initSchnorrSigArgs(message, privateKey, auxRand);\n    const t = initSchnorrNonce(d, await utils.taggedHash(TAGS.aux, rand));\n    const { R, rx, k } = finalizeSchnorrNonce(await utils.taggedHash(TAGS.nonce, t, px, m));\n    const e = finalizeSchnorrChallenge(await utils.taggedHash(TAGS.challenge, rx, px, m));\n    const sig = finalizeSchnorrSig(R, k, e, d);\n    const isValid = await schnorrVerify(sig, m, px);\n    if (!isValid)\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\nfunction schnorrSignSync(message, privateKey, auxRand = utils.randomBytes()) {\n    const { m, px, d, rand } = initSchnorrSigArgs(message, privateKey, auxRand);\n    const t = initSchnorrNonce(d, utils.taggedHashSync(TAGS.aux, rand));\n    const { R, rx, k } = finalizeSchnorrNonce(utils.taggedHashSync(TAGS.nonce, t, px, m));\n    const e = finalizeSchnorrChallenge(utils.taggedHashSync(TAGS.challenge, rx, px, m));\n    const sig = finalizeSchnorrSig(R, k, e, d);\n    const isValid = schnorrVerifySync(sig, m, px);\n    if (!isValid)\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !hasEvenY(R) || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = finalizeSchnorrChallenge(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = finalizeSchnorrChallenge(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    privateAdd: (privateKey, tweak) => {\n        const p = normalizePrivateKey(privateKey);\n        const t = normalizePrivateKey(tweak);\n        return numTo32b(mod(p + t, CURVE.n));\n    },\n    privateNegate: (privateKey) => {\n        const p = normalizePrivateKey(privateKey);\n        return numTo32b(CURVE.n - p);\n    },\n    pointAddScalar: (p, tweak, isCompressed) => {\n        const P = Point.fromHex(p);\n        const t = normalizePrivateKey(tweak);\n        const Q = Point.BASE.multiplyAndAddUnsafe(P, t, _1n);\n        if (!Q)\n            throw new Error('Tweaked point at infinity');\n        return Q.toRawBytes(isCompressed);\n    },\n    pointMultiply: (p, tweak, isCompressed) => {\n        const P = Point.fromHex(p);\n        const t = bytesToNumber(ensureBytes(tweak));\n        return P.multiply(t).toRawBytes(isCompressed);\n    },\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.hashToPrivateKey(utils.randomBytes(40));\n    },\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof utils.sha256Sync !== 'function')\n            throw new Error('utils.sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = utils.sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256Sync(tagP, ...messages);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","buffer_1","from","buffer","byteOffset","length","Layout","span","property","Number","isInteger","offset","RangeError","rv","Object","create","constructor","prototype","assign","values","nameWithProperty","name","lo","ExternalLayout","Error","GreedyCount","elementSpan","rem","Math","floor","src","OffsetLayout","layout","UInt","UIntBE","decode","encode","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","isCount","idx","getSpan","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","undefined","fd","e","fsp","dest","makeDestinationObject","firstOffset","lastOffset","lastWrote","fv","shift","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","replicate","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","variant","VariantLayout","vb","union","fromArray","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","bits","bf","BitField","Boolean","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","BigInt","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","t","j","u64","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","h","l","s","rotlL","Keccak","blockLen","suffix","outputLen","enableXOF","rounds","pos","posOut","finished","destroyed","assert","state","state32","u32","B","Uint32Array","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","fill","keccakP","this","data","len","toBytes","take","min","keccak","out","finish","bufferOut","set","subarray","writeInto","bytes","xofInto","destroy","digestInto","to","Hash","gen","wrapConstructor","keccak_256","genShake","wrapConstructorWithOpts","opts","dkLen","ed25519","sha512","concatBytes","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","isOnCurve","sign","message","verify","toBuffer","arr","Buffer","byteLength","Struct","properties","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Map","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","equals","eq","toBase58","toJSON","toArrayLike","zeroPad","key","fromPublicKey","seed","programId","publicKeyBytes","sha256","seeds","forEach","createProgramAddressSync","address","nonce","seedsWithNonce","concat","err","findProgramAddressSync","pubkeyData","default","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","signature","defineProperty","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","map","instruction","programIdIndex","accountKeyIndexes","keys","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","str","chars","alloc","getAlloc","type","getItemAlloc","item","field","decodeLength","size","elem","encodeLength","rem_len","condition","TransactionStatus","CompiledKeys","payer","keyMetaMap","getMessageComponents","mapEntries","entries","writableSigners","filter","isSigner","isWritable","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","extractTableLookup","lookupTable","drainKeysFoundInLookupTable","addresses","keyMeta","isInvoked","writableIndexes","drainedWritableKeys","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","getOrInsertDefault","payerKeyMeta","ix","accountMeta","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","accounts","getAccountKeys","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","compile","payerKey","byteArray","accountCount","dataSlice","MessageV0","compiledInstructions","addressTableLookups","lookup","numAccountKeysFromLookups","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","compiledKeys","lookupTableAccounts","extractResult","addressTableLookup","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","DEFAULT_SIGNATURE","TransactionInstruction","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","every","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","abortSignal","status","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","freeze","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","params","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","ceil","chunkSize","program","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","executable","error","allocate","owner","transfer","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","all","objToString","objKeys","obj","val","isArrayProp","max","propVal","toStr","isFinite","returnVal","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","customMessage","code","globalThis","fetch","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedConfig","createRpcResult","result","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","number","notificationResultAndContext","versionedMessageFromResponse","version","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","process","Connection","endpoint","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","makeWebsocketUrl","url","customFetch","fetchWithMiddleware","fetchImpl","info","init","reject","modifiedInfo","modifiedInit","modifiedFetchArgs","clientBrowser","RpcClient","request","callback","method","body","agent","headers","too_many_requests_retries","waitTime","res","log","statusText","text","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_buildArgs","unsafeRes","getBalanceAndContext","then","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","configOrCommitment","encoding","configWithoutEncoding","strategy","rawSignature","aborted","reason","decodedSignature","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","expiryPromise","checkBlockHeight","getBlockHeight","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","race","outcome","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","_signatureStatus","commitmentForStatus","timeoutMs","timeoutId","TIMED_OUT","clearTimeout","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","transactionDetails","c","extra","block","endSlot","getFirstAvailableBlock","firstAvailableBlock","getConfirmedBlockSignatures","until","getSlot","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","accountInfo","fromAccountData","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","_blockhashWithExpiryBlockHeight","sigVerify","logTrace","traceIndent","join","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","_this$_subscriptionSt","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","fastStableStringify","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","recentSlot","lookupTableAddress","bumpSeed","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","fromSecretKey","createInstructionWithPublicKey","secp256k1","hmac","msgs","msg","update","digest","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","msgHash","privKey","pkey","messageHash","der","recovered","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","stakePubkey","lockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","VoteProgram","Voter","voteInit","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","voteAuthorizeWithSeedArgs","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","createChainIdMiddleware","chainId","req","next","end","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","createFetchMiddleware","networkMiddleware","createGetAccountsMiddleware","_ref","getAccounts","createAsyncMiddleware","_context","createRequestAccountsMiddleware","_ref3","requestAccounts","_context2","createGenericJRPCMiddleware","targetMethod","handler","_context3","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","_inherits","_classCallCheck","_super","chainConfig","chainNamespace","CHAIN_NAMESPACES","_createClass","injectedProvider","engine","JRPCEngine","getProviderHandlers","solanaMiddleware","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","_lookupNetwork","BaseProvider","getBaseProviderHandlers","_requestAccounts","_getAccounts","_getPrivateKey","ethErrors","_getSecretKey","_context5","_context6","display","sigData","_req$params","_req$params2","_context7","_context8","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","SlopeInjectedProxyProvider","getProviderEngineProxy","_yield$injectedProvid","_yield$injectedProvid2","txMessage","_yield$injectedProvid3","_yield$injectedProvid4","conn","allTxns","unsignedTx","_yield$injectedProvid5","_data$signatures","getSlopeHandlers","SolflareInjectedProvider","solflareProviderHandlers","getSolflareHandlers","SolletInjectedProvider","getSolletHandlers","getTorusHandlers","_req$params3","_req$params4","_req$params5","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","emit","_context4","_this","configure","_objectSpread","setupProvider","_getProviderHandlers","keyPairGenerator","_context9","keyPair","signedMsg","nacl","_providerEngineProxy","sig","txns","_req$params6","_iterator","tx","SolanaPrivateKeyProvider","_enable","_createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","getChainConfig","health","chainSwitchHandlers","addNewChainConfig","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","displayName","blockExplorer","switchSolanaChain","switchChain","_ref6","createChainSwitchMiddleware","accountHandlers","updatePrivatekey","_this2","updateAccount","_ref7","createAccountMiddleware","providerFactory","SolanaWallet","_defineProperty","_yield$this$provider$","signedTransaction","signedTransactions","base64","require","ieee754","customInspectSymbol","Symbol","K_MAX_LENGTH","createBuffer","buf","setPrototypeOf","encodingOrOffset","allocUnsafe","isEncoding","actual","fromString","ArrayBuffer","isView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","isBuffer","checked","numberIsNaN","fromObject","toPrimitive","assertSize","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","m","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","utf8Write","blitBuffer","asciiWrite","charCodeAt","asciiToBytes","base64Write","ucs2Write","units","hi","utf16leToBytes","fromByteArray","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","enumerable","poolSize","allocUnsafeSlow","_isBuffer","compare","a","list","swap16","swap32","swap64","toLocaleString","inspect","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","_arr","ret","hexSliceLookupTable","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","readUintLE","mul","readUintBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readInt8","readInt16LE","readInt16BE","readBigInt64LE","readBigInt64BE","writeUintLE","writeUintBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUint32BE","writeBigUInt64LE","writeBigUInt64BE","sub","writeInt8","writeInt16LE","writeInt16BE","writeBigInt64LE","writeBigInt64BE","targetStart","copyWithin","errors","E","sym","getMessage","Base","configurable","stack","addNumericalSeparator","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","received","abs","INVALID_BASE64_RE","leadSurrogate","toByteArray","base64clean","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","_Buffer","module","ALPHABET","BASE_MAP","charAt","xc","BASE","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","pbegin","pend","b58","it1","it2","repeat","reversed","reverse","hex","num","width","padStart","__createBinding","o","k","k2","__setModuleDefault","__decorate","decorators","desc","d","r","getOwnPropertyDescriptor","Reflect","decorate","__importStar","mod","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","fieldName","maybeResize","writeBuffer","toArray","writeU32","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readBuffer","readU32","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","writeFixedArray","writeArray","writeU8","serializeStruct","addToFieldPath","borshSerialize","structSchema","deserializeField","reader","readFixedArray","readArray","readU8","deserializeStruct","classType","borshDeserialize","fieldValue","Writer","Reader","basex","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","self","isBatch","hasCallback","_parseResponse","responseText","parse","isError","_interopRequireDefault","_createClass2","_classCallCheck2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_websocket","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","_isNativeReflectConstruct","Super","NewTarget","Client","_CommonClient","_ref$autoconnect","_ref$reconnect","reconnect","_ref$reconnect_interv","reconnect_interval","_ref$max_reconnects","generate_request_id","_regenerator","_asyncToGenerator2","_typeof2","_eventemitter","__rest","p","getOwnPropertySymbols","propertyIsEnumerable","CommonClient","_EventEmitter","webSocketFactory","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","current_reconnects","_connect","socket","timeout","ws_opts","send","promise","_login","mark","_callee","resp","wrap","prev","sent","abrupt","stop","_x","_listMethods","_callee2","_this3","_subscribe","_callee3","event","_x2","_unsubscribe","_callee4","_x3","_this4","listeners","_ref2","EventEmitter","WebSocketBrowserImpl","protocols","window","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","listener","getRandomValues","rnds8","rng","crypto","msCrypto","REGEX","byteToHex","validate","rnds","random","superPropBase","_get","receiver","getPrototypeOf","object","_255n","CURVE_ORDER","CURVE","P","Gx","Gy","MAX_256B","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","z","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","X2Z1","Y1Z2","Y2Z1","A","C","D","G","F","H","X3","Y3","T3","T1","T2","double","negate","W","windows","points","affinePoint","Point","_WINDOW_SIZE","precomputes","pointPrecomputes","precomputeWindow","normalizeZ","ZERO","f","windowSize","mask","maxNumber","shiftBy","wbits","pr","cached","scalar","wNAF","normalizeScalar","P0","multiplyUnsafe","invZ","invert","ax","ay","zz","legacyRist","toInv","nums","tmp","inverted","reduceRight","invertBatch","toAffine","toAffineBatch","fromAffine","assertRstPoint","RistrettoPoint","ep","u1","u2","invsqrt","invertSqrt","D1","D2","zInv","edIsNegative","_y","numberTo32BytesLE","bytesToHex","toRawBytes","toHex","one","two","subtract","multiply","r0","Ns","uvRatio","Ns_D_is_sq","isValid","s_","Nt","s2","W0","W1","W2","W3","r1","bytes255ToNumberLE","ensureBytes","R1","calcElligatorRistrettoMap","r2","R2","emsg","b1","b2","equalBytes","u1_2","u2_2","I","Dx","Dy","WeakMap","isTorsionFree","strict","normed","bytesToNumberLE","y2","u","isXOdd","isLastByteOdd","getExtendedPublicKey","point","Signature","assertValidity","u8","fromHex","arrays","pad","_sha512Sync","hexes","uint8a","hexToBytes","hexByte","byte","isNaN","numberTo32BytesBE","modulo","q","gcd","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","expectedLength","isSafeInteger","adjustBytes25519","checkPrivateKey","getKeyFromHash","hashed","head","pointBytes","sha512s","utils","getExtendedPublicKeySync","prepareVerification","SB","pub","finishVerification","kA","sync","_setWindowSize","node","nodeCrypto","web","TORSION_SUBGROUP","hashToPrivateScalar","randomBytes","randomPrivateKey","subtle","createHash","precompute","sha512Sync","defineProperties","lengths","bool","exists","checkFinished","output","SHA2","padOffset","isLE","view","createView","dataView","roundClean","setBigUint64","_32n","_u32_max","wh","wl","setUint32","oview","U32_MASK64","fromBig","le","lst","Ah","Al","toBig","shrSH","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","HMAC","_key","iHash","oHash","_cloneInto","Maj","SHA256_K","IV","SHA256_W","SHA256","getUint32","W15","s0","rotr","s1","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_256","SHA384","DataView","TextEncoder","hashConstructor","hashC","hashCons","_3n","_8n","POW_2_256","beta","weistrass","x2","x3","USE_ENDOMORPHISM","JacobianPoint","Z1Z1","Z2Z2","U1","U2","S1","S2","HH","HHH","V","splitScalarEndo","k1neg","k1","k2neg","k1p","k2p","fake","f1p","f2p","iz1","iz2","iz3","scratch","isCompressed","numTo32bStr","isValidFieldElement","left","Q","aP","bQ","isShort","bytesToNumber","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","sqrtMod","isYOdd","fromCompressedHex","fromUncompressedHex","normalizePrivateKey","recovery","truncateHash","normalizeSignature","rinv","multiplyAndAddUnsafe","sliceDER","parseDERInt","isWithinCurveOrder","HALF","hasHighS","toDERHex","sHex","numberToHexUnpadded","rHex","rLen","sLen","toDERRawBytes","toCompactHex","isUint8a","hexToNumber","rBytesLeft","parseDERSignature","fromDER","numTo32b","divNearest","POW_2_128","a1","a2","c1","c2","delta","HmacDrbg","counter","hmacSha256","hmacSha256Sync","hmacSync","incr","kmdToSig","kBytes","fromCompact","fromPrivateKey","bits2int","bits2octets","z1","z2","int2octets","initSigArgs","extraEntropy","h1","seedArgs","finalizeSig","recSig","canonical","normalizeS","toCompactRawBytes","signSync","drbg","reseedSync","generateSync","TAGGED_HASH_PREFIXES","isValidPrivateKey","privateAdd","tweak","privateNegate","pointAddScalar","pointMultiply","hashToPrivateKey","messages","importKey","ckey","createHmac","sha256Sync","taggedHash","tagP","tagH","taggedHashSync","toFailures","StructError","failure","failures","path","isObject","print","shiftIterator","toFailure","struct","branch","refinement","iterator","run","ctx","coercer","valid","validator","ts","refiner","props","is","tuples","define","Element","Class","constant","description","never","Key","Value","Elements","Never","Structs","inRange","ToDictionary","Stream","tokens","endOfStream","prepend","token","pop","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}