{"version":3,"file":"static/js/3177.488b7e38.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts","../node_modules/@web3auth/torus-evm-adapter/src/torusWalletAdapter.ts"],"sourcesContent":["import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  public clientId: string;\n\n  constructor(params: { clientId?: string } = {}) {\n    super();\n    this.clientId = params.clientId;\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage as string, challenge, this.name, this.sessionTime, this.clientId);\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n","import Torus, { LoginParams, NetworkInterface, TorusCtorArgs, TorusParams } from \"@toruslabs/torus-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\nexport interface TorusWalletOptions {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: LoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n  clientId?: string;\n}\n\nexport class TorusWalletAdapter extends BaseEvmAdapter<never> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_EVM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: LoginParams = {};\n\n  private rehydrated = false;\n\n  constructor(params: TorusWalletOptions) {\n    super(params);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n    this.sessionTime = params.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.torusInstance) {\n      return this.torusInstance.provider as unknown as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    let network: NetworkInterface;\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n      const { blockExplorer, displayName, chainId, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n      network = { chainId: Number.parseInt(chainId, 16), host: \"mainnet\", blockExplorer, networkName: displayName, ticker, tickerName };\n    } else {\n      const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n      network = { chainId: Number.parseInt(chainId, 16), host: rpcTarget, blockExplorer, networkName: displayName, ticker, tickerName };\n    }\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus evm adapter init\");\n    await this.torusInstance.init({\n      showTorusButton: false,\n      ...this.initParams,\n      network,\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_EVM);\n\n    try {\n      log.debug(\"initializing torus evm adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with torus evm provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_EVM });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      const { chainId } = this.torusInstance.provider;\n      if (chainId && parseInt(chainId) !== parseInt((this.chainConfig as CustomChainConfig).chainId, 16)) {\n        const { chainId: _chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n        const network: NetworkInterface = {\n          chainId: Number.parseInt(_chainId, 16),\n          host: rpcTarget,\n          blockExplorer,\n          networkName: displayName,\n          tickerName,\n          ticker,\n        };\n        // in some cases when user manually switches chain and relogin then adapter will not connect to initially passed\n        // chainConfig but will connect to the one that user switched to.\n        // So here trying to switch network to the one that was initially passed in chainConfig.\n        await this.torusInstance.setProvider({\n          ...network,\n        });\n        const updatedChainID = await this.torusInstance.ethereum.request<string>({ method: \"eth_chainId\" });\n        if (updatedChainID && parseInt(updatedChainID) !== parseInt((this.chainConfig as CustomChainConfig).chainId, 16)) {\n          throw WalletInitializationError.fromCode(\n            5000,\n            `Not connected to correct chainId. Expected: ${(this.chainConfig as CustomChainConfig).chainId}, Current: ${updatedChainID}`\n          );\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_EVM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_STATUS.ERRORED, error);\n      throw error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with torus wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await super.disconnect();\n    await this.torusInstance.logout();\n    this.torusInstance.hideTorusButton();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo(\"\");\n    return userInfo;\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n}\n"],"names":["BaseEvmAdapter","_inherits","params","arguments","_classCallCheck","_this","_defineProperty","clientId","_createClass","key","value","_authenticateUser","this","provider","chainConfig","chainId","_context","WalletLoginError","_this$chainConfig2","chainNamespace","status","ADAPTER_STATUS","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","signedMessage","verifySignedChallenge","sessionTime","saveToken","_disconnect","_context2","clearToken","BaseAdapter","TorusWalletAdapter","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","torusWalletOptions","adapterSettings","initParams","loginSettings","get","torusInstance","set","_","Error","options","_get","blockExplorer","displayName","rpcTarget","ticker","tickerName","network","Number","host","networkName","getChainConfig","_this$chainConfig","Torus","log","init","showTorusButton","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","_connect","WalletInitializationError","adapter","login","_this$chainConfig3","_chainId","setProvider","ethereum","updatedChainID","reconnected","Web3AuthError","_args3","cleanup","_context3","logout","hideTorusButton","_getUserInfo","_context4","getUserInfo","userInfo"],"sourceRoot":""}