{"version":3,"file":"static/js/9912.1020f4e3.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-solana-adapter/src/baseSolanaAdapter.ts","../node_modules/@web3auth/base-solana-adapter/node_modules/base-x/src/index.js","../node_modules/@web3auth/base-solana-adapter/node_modules/bs58/index.js","../node_modules/@web3auth/phantom-adapter/src/utils.ts","../node_modules/@web3auth/phantom-adapter/src/phantomAdapter.ts"],"sourcesContent":["import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nexport abstract class BaseSolanaAdapter<T> extends BaseAdapter<T> {\n  public clientId: string;\n\n  constructor(params: { clientId?: string } = {}) {\n    super();\n    this.clientId = params.clientId;\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request<Uint8Array>({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\",\n        },\n      });\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        bs58.encode(signedMessage as Uint8Array),\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","import type { IPhantomWalletProvider } from \"@web3auth/solana-provider\";\n\nexport function poll(callback: () => boolean | Promise<boolean>, interval: number, count: number): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done)\n          poll(callback, interval, count - 1)\n            .then((res) => {\n              resolve(res);\n              return res;\n            })\n            .catch((err) => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nexport const detectProvider = async (\n  options: { interval: number; count: number } = { interval: 1000, count: 3 }\n): Promise<IPhantomWalletProvider | null> => {\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!(window as any).solana?.isPhantom;\n  if (isPhantomAvailable) {\n    return (window as any).solana;\n  }\n  const isAvailable = await poll(() => (window as any).solana?.isPhantom, options.interval, options.count);\n  if (isAvailable) return (window as any).solana;\n  return null;\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { IPhantomWalletProvider, PhantomInjectedProvider } from \"@web3auth/solana-provider\";\n\nimport { detectProvider } from \"./utils\";\nexport interface PhantomAdapterOptions {\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n  clientId?: string;\n}\n\nexport class PhantomAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.PHANTOM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public _wallet: IPhantomWalletProvider | null = null;\n\n  private phantomProvider: PhantomInjectedProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(options: PhantomAdapterOptions) {\n    super(options);\n    this.chainConfig = options?.chainConfig || null;\n    this.sessionTime = options?.sessionTime || 86400;\n  }\n\n  get isWalletConnected(): boolean {\n    return !!(this._wallet?.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.phantomProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n    this._wallet = await detectProvider({ interval: 500, count: 3 });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      log.debug(\"initializing phantom adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.PHANTOM });\n\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise<SafeEventEmitterProvider | null>((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet as IPhantomWalletProvider);\n              resolve(this.provider);\n            };\n            if (!this._wallet) {\n              reject(WalletInitializationError.notInstalled());\n              return;\n            }\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            (this._wallet as IPhantomWalletProvider)._handleDisconnect = (...args: unknown[]) => {\n              reject(WalletInitializationError.windowClosed());\n              return handleDisconnect.apply(this._wallet, args);\n            };\n\n            this._wallet.connect().catch((reason: unknown) => {\n              reject(reason);\n            });\n          });\n        } catch (error: unknown) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError((error as Error)?.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error: unknown) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnect();\n    try {\n      await this._wallet?.disconnect();\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error: unknown) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError((error as Error)?.message));\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async connectWithProvider(injectedProvider: IPhantomWalletProvider): Promise<SafeEventEmitterProvider | null> {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.PHANTOM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    return this.provider;\n  }\n\n  private _onDisconnect = () => {\n    if (this._wallet) {\n      this._wallet.off(\"disconnect\", this._onDisconnect);\n      this.rehydrated = false;\n      // ready to be connected again only if it was previously connected and not cleaned up\n      this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    }\n  };\n}\n"],"names":["BaseSolanaAdapter","_inherits","params","arguments","_classCallCheck","_this","_defineProperty","clientId","_createClass","key","value","_authenticateUser","this","provider","chainConfig","chainId","_context","WalletLoginError","_this$chainConfig2","chainNamespace","status","ADAPTER_STATUS","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","encodedMessage","TextEncoder","encode","message","display","signedMessage","verifySignedChallenge","bs58","sessionTime","saveToken","_disconnect","_context2","clearToken","BaseAdapter","module","exports","ALPHABET","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","Error","it4","vch","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray","from","pbegin","pend","b58","it1","it2","str","repeat","decode","string","basex","require","poll","callback","interval","count","Promise","resolve","reject","setTimeout","_asyncToGenerator","done","then","res","catch","err","detectProvider","_ref2","_args2","options","solana","_window$solana","isPhantom","_window$solana2","PhantomAdapter","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","_wallet","off","_onDisconnect","rehydrated","emit","ADAPTER_EVENTS","get","_this$_wallet","isConnected","phantomProvider","_this$phantomProvider","set","_","_get","getChainConfig","WalletInitializationError","PhantomInjectedProvider","config","autoConnect","connect","_connect","_context3","adapter","handleDisconnect","_handleDisconnect","_ref","_this2","connectWithProvider","once","args","apply","reason","Web3AuthError","publicKey","on","_this$_wallet2","_args4","cleanup","_context4","disconnect","_getUserInfo","isWalletConnected","_context5","injectedProvider","_context6","setupProvider","reconnected"],"sourceRoot":""}