{"version":3,"file":"static/js/7844.62c059c2.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/openlogin-adapter/src/config.ts","../node_modules/@web3auth/openlogin-adapter/src/openloginAdapter.ts"],"sourcesContent":["import { OPENLOGIN_NETWORK, UX_MODE } from \"@toruslabs/openlogin\";\nimport { ChainNamespaceType, getChainConfig } from \"@web3auth/base\";\n\nimport { OpenloginAdapterOptions } from \"./interface\";\n\nexport const getOpenloginDefaultOptions = (chainNamespace?: ChainNamespaceType, chainId?: number | string): OpenloginAdapterOptions => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP,\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : null,\n    loginSettings: {},\n  };\n};\n","import OpenLogin, { getHashQueryParams, LoginParams, OPENLOGIN_NETWORK, OpenLoginOptions, SUPPORTED_KEY_CURVES, UX_MODE } from \"@toruslabs/openlogin\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { CommonPrivateKeyProvider, IBaseProvider } from \"@web3auth/base-provider\";\nimport merge from \"lodash.merge\";\n\nimport { getOpenloginDefaultOptions } from \"./config\";\nimport type { LoginSettings, OpenloginAdapterOptions } from \"./interface\";\n\nexport type OpenloginLoginParams = LoginParams & {\n  // to maintain backward compatibility\n  login_hint?: string;\n};\n\ntype PrivateKeyProvider = IBaseProvider<string>;\n\nexport class OpenloginAdapter extends BaseAdapter<OpenloginLoginParams> {\n  readonly name: string = WALLET_ADAPTERS.OPENLOGIN;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.MULTICHAIN;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.IN_APP;\n\n  public openloginInstance: OpenLogin | null = null;\n\n  public clientId: string;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  private openloginOptions: OpenLoginOptions;\n\n  private loginSettings: LoginSettings = {};\n\n  private privKeyProvider: PrivateKeyProvider | null = null;\n\n  constructor(params: OpenloginAdapterOptions) {\n    super();\n    log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions(params.chainConfig?.chainNamespace, params.chainConfig?.chainId);\n    this.openloginOptions = {\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET,\n      ...defaultOptions.adapterSettings,\n      ...(params.adapterSettings || {}),\n    };\n    this.clientId = params.adapterSettings?.clientId as string;\n    this.loginSettings = { ...defaultOptions.loginSettings, ...params.loginSettings };\n    this.sessionTime = this.loginSettings.sessionTime || 86400;\n    // if no chainNamespace is passed then chain config should be set before calling init\n    if (params.chainConfig?.chainNamespace) {\n      this.currentChainNamespace = params.chainConfig?.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = { ...defaultChainIdConfig, ...params?.chainConfig };\n      log.debug(\"const openlogin chainConfig\", this.chainConfig);\n      if (!this.chainConfig.rpcTarget && params.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.openloginOptions?.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    let isRedirectResult = false;\n\n    if (this.openloginOptions.uxMode === UX_MODE.REDIRECT) {\n      const redirectResult = getHashQueryParams();\n      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n        isRedirectResult = true;\n      }\n    }\n    this.openloginOptions = {\n      ...this.openloginOptions,\n      replaceUrlOnRedirect: isRedirectResult,\n    };\n    this.openloginInstance = new OpenLogin(this.openloginOptions);\n    log.debug(\"initializing openlogin adapter init\");\n\n    await this.openloginInstance.init();\n\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      log.debug(\"initializing openlogin adapter\");\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params?: OpenloginLoginParams): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { ...params, adapter: WALLET_ADAPTERS.OPENLOGIN });\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error: unknown) {\n      log.error(\"Failed to connect with openlogin provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if ((error as Error)?.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async authenticateUser(): Promise<{ idToken: string }> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const userInfo = await this.getUserInfo();\n    return {\n      idToken: userInfo.idToken as string,\n    };\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings: OpenLoginOptions & { sessionTime: number }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = { ...defaultOptions.adapterSettings, ...(this.openloginOptions || {}), ...adapterSettings };\n    if (adapterSettings.sessionTime) {\n      this.loginSettings = { ...this.loginSettings, sessionTime: adapterSettings.sessionTime };\n    }\n    if (adapterSettings.clientId) {\n      this.clientId = adapterSettings.clientId;\n    }\n  }\n\n  // should be called only before initialization.\n  setChainConfig(customChainConfig: CustomChainConfig): void {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n\n  private async connectWithProvider(params: OpenloginLoginParams = {}): Promise<void> {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const { SolanaPrivateKeyProvider } = await import(\"@web3auth/solana-provider\");\n      this.privKeyProvider = new SolanaPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const { EthereumPrivateKeyProvider } = await import(\"@web3auth/ethereum-provider\");\n      this.privKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.privKeyProvider = new CommonPrivateKeyProvider();\n    } else {\n      throw new Error(`Invalid chainNamespace: ${this.currentChainNamespace} found while connecting to wallet`);\n    }\n    // if not logged in then login\n    if (!this.openloginInstance.privKey) {\n      if (!this.loginSettings.curve) {\n        this.loginSettings.curve =\n          this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n      }\n      await this.openloginInstance.login(\n        merge(\n          this.loginSettings,\n          params,\n          { loginProvider: params.loginProvider },\n          { extraLoginOptions: { ...(params.extraLoginOptions || {}), login_hint: params.login_hint || params.extraLoginOptions?.login_hint } }\n        )\n      );\n    }\n    let finalPrivKey = this.openloginInstance.privKey;\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const { getED25519Key } = await import(\"@toruslabs/openlogin-ed25519\");\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.OPENLOGIN, reconnected: !params } as CONNECTED_EVENT_DATA);\n    }\n  }\n}\n"],"names":["getOpenloginDefaultOptions","chainNamespace","chainId","adapterSettings","network","OPENLOGIN_NETWORK","clientId","uxMode","UX_MODE","chainConfig","getChainConfig","loginSettings","OpenloginAdapter","_inherits","params","_classCallCheck","_this","_defineProperty","WALLET_ADAPTERS","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","CHAIN_NAMESPACES","log","defaultOptions","_params$chainConfig","openloginOptions","_params$adapterSettin","sessionTime","currentChainNamespace","_params$chainConfig4","defaultChainIdConfig","rpcTarget","WalletInitializationError","_createClass","key","get","this","privKeyProvider","_this$privKeyProvider","provider","set","_","Error","value","options","_get","_this$openloginOption","_context","isRedirectResult","redirectResult","getHashQueryParams","Object","keys","length","_pid","_objectSpread","replaceUrlOnRedirect","openloginInstance","OpenLogin","init","status","emit","ADAPTER_EVENTS","privKey","autoConnect","connect","adapter","_context2","connectWithProvider","message","includes","WalletLoginError","_disconnect","_args3","cleanup","_context3","logout","_authenticateUser","_context4","getUserInfo","userInfo","idToken","_getUserInfo","_context5","customChainConfig","_connectWithProvider","_yield$import","SolanaPrivateKeyProvider","_yield$import2","EthereumPrivateKeyProvider","_params$extraLoginOpt","finalPrivKey","_yield$import3","getED25519Key","_args6","_context6","config","CommonPrivateKeyProvider","curve","SUPPORTED_KEY_CURVES","login","merge","loginProvider","extraLoginOptions","login_hint","sk","toString","setupProvider","reconnected","BaseAdapter"],"sourceRoot":""}