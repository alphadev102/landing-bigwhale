{"version":3,"file":"static/js/5001.0e3c5702.chunk.js","mappings":"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","sources":["../node_modules/ethereum-cryptography/src/hash-utils.ts","../node_modules/ethereum-cryptography/src/keccak.ts","../node_modules/ethereum-cryptography/node_modules/secp256k1/elliptic.js","../node_modules/ethereum-cryptography/node_modules/secp256k1/lib/elliptic.js","../node_modules/ethereum-cryptography/node_modules/secp256k1/lib/index.js","../node_modules/ethereum-cryptography/src/random.ts","../node_modules/ethereum-cryptography/src/secp256k1.ts","../node_modules/ethereumjs-util/src/account.ts","../node_modules/ethereumjs-util/src/address.ts","../node_modules/ethereumjs-util/src/bytes.ts","../node_modules/ethereumjs-util/src/constants.ts","../node_modules/ethereumjs-util/src/externals.ts","../node_modules/ethereumjs-util/src/hash.ts","../node_modules/ethereumjs-util/src/helpers.ts","../node_modules/ethereumjs-util/src/index.ts","../node_modules/ethereumjs-util/src/internal.ts","../node_modules/ethereumjs-util/src/object.ts","../node_modules/ethereumjs-util/src/signature.ts","../node_modules/ethereumjs-util/src/types.ts","../node_modules/rlp/src/index.ts"],"sourcesContent":["import { Hash } from \"crypto\";\n\nexport function createHashFunction(\n  hashConstructor: () => Hash\n): (msg: Buffer) => Buffer {\n  return msg => {\n    const hash = hashConstructor();\n    hash.update(msg);\n    return Buffer.from(hash.digest());\n  };\n}\n","import { createHashFunction } from \"./hash-utils\";\n\nconst createKeccakHash = require(\"keccak\");\n\nexport const keccak224 = createHashFunction(() =>\n  createKeccakHash(\"keccak224\")\n);\n\nexport const keccak256 = createHashFunction(() =>\n  createKeccakHash(\"keccak256\")\n);\n\nexport const keccak384 = createHashFunction(() =>\n  createKeccakHash(\"keccak384\")\n);\n\nexport const keccak512 = createHashFunction(() =>\n  createKeccakHash(\"keccak512\")\n);\n","module.exports = require('./lib')(require('./lib/elliptic'))\n","const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n","const errors = {\n  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n  TWEAK_ADD:\n    'The tweak was out of range or the resulted private key is invalid',\n  TWEAK_MUL: 'The tweak was out of range or equal to zero',\n  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n  SECKEY_INVALID: 'Private Key is invalid',\n  PUBKEY_PARSE: 'Public Key could not be parsed',\n  PUBKEY_SERIALIZE: 'Public Key serialization error',\n  PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n  SIG_PARSE: 'Signature could not be parsed',\n  SIGN: 'The nonce generation function failed, or the private key was invalid',\n  RECOVER: 'Public key could not be recover',\n  ECDH: 'Scalar was invalid (zero or overflow)'\n}\n\nfunction assert (cond, msg) {\n  if (!cond) throw new Error(msg)\n}\n\nfunction isUint8Array (name, value, length) {\n  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)\n\n  if (length !== undefined) {\n    if (Array.isArray(length)) {\n      const numbers = length.join(', ')\n      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`\n      assert(length.includes(value.length), msg)\n    } else {\n      const msg = `Expected ${name} to be an Uint8Array with length ${length}`\n      assert(value.length === length, msg)\n    }\n  }\n}\n\nfunction isCompressed (value) {\n  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')\n}\n\nfunction getAssertedOutput (output = (len) => new Uint8Array(len), length) {\n  if (typeof output === 'function') output = output(length)\n  isUint8Array('output', output, length)\n  return output\n}\n\nfunction toTypeString (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nmodule.exports = (secp256k1) => {\n  return {\n    contextRandomize (seed) {\n      assert(\n        seed === null || seed instanceof Uint8Array,\n        'Expected seed to be an Uint8Array or null'\n      )\n      if (seed !== null) isUint8Array('seed', seed, 32)\n\n      switch (secp256k1.contextRandomize(seed)) {\n        case 1:\n          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)\n      }\n    },\n\n    privateKeyVerify (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      return secp256k1.privateKeyVerify(seckey) === 0\n    },\n\n    privateKeyNegate (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      switch (secp256k1.privateKeyNegate(seckey)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    privateKeyTweakAdd (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    privateKeyTweakMul (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    publicKeyVerify (pubkey) {\n      isUint8Array('public key', pubkey, [33, 65])\n\n      return secp256k1.publicKeyVerify(pubkey) === 0\n    },\n\n    publicKeyCreate (seckey, compressed = true, output) {\n      isUint8Array('private key', seckey, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCreate(output, seckey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SECKEY_INVALID)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyConvert (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyConvert(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyNegate (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyNegate(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyCombine (pubkeys, compressed = true, output) {\n      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')\n      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')\n      for (const pubkey of pubkeys) {\n        isUint8Array('public key', pubkey, [33, 65])\n      }\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_COMBINE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    signatureNormalize (sig) {\n      isUint8Array('signature', sig, 64)\n\n      switch (secp256k1.signatureNormalize(sig)) {\n        case 0:\n          return sig\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n      }\n    },\n\n    signatureExport (sig, output) {\n      isUint8Array('signature', sig, 64)\n      output = getAssertedOutput(output, 72)\n\n      const obj = { output, outputlen: 72 }\n      switch (secp256k1.signatureExport(obj, sig)) {\n        case 0:\n          return output.slice(0, obj.outputlen)\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    signatureImport (sig, output) {\n      isUint8Array('signature', sig)\n      output = getAssertedOutput(output, 64)\n\n      switch (secp256k1.signatureImport(output, sig)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaSign (msg32, seckey, options = {}, output) {\n      isUint8Array('message', msg32, 32)\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')\n      output = getAssertedOutput(output, 64)\n\n      const obj = { signature: output, recid: null }\n      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n        case 0:\n          return obj\n        case 1:\n          throw new Error(errors.SIGN)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaVerify (sig, msg32, pubkey) {\n      isUint8Array('signature', sig, 64)\n      isUint8Array('message', msg32, 32)\n      isUint8Array('public key', pubkey, [33, 65])\n\n      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n        case 0:\n          return true\n        case 3:\n          return false\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_PARSE)\n      }\n    },\n\n    ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n      isUint8Array('signature', sig, 64)\n      assert(\n        toTypeString(recid) === 'Number' &&\n          recid >= 0 &&\n          recid <= 3,\n        'Expected recovery id to be a Number within interval [0, 3]'\n      )\n      isUint8Array('message', msg32, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.RECOVER)\n        case 3:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdh (pubkey, seckey, options = {}, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.hashfn !== undefined) {\n        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')\n        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)\n        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)\n        isUint8Array('output', output)\n      } else {\n        output = getAssertedOutput(output, 32)\n      }\n\n      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.ECDH)\n      }\n    }\n  }\n}\n","const randombytes = require(\"randombytes\");\n\nexport function getRandomBytes(bytes: number): Promise<Buffer> {\n  return new Promise((resolve, reject) => {\n    randombytes(bytes, function(err: any, resp: Buffer) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(resp);\n    });\n  });\n}\n\nexport function getRandomBytesSync(bytes: number): Buffer {\n  return randombytes(bytes);\n}\n","import { privateKeyVerify } from \"secp256k1\";\nimport { getRandomBytes, getRandomBytesSync } from \"./random\";\n\nconst SECP256K1_PRIVATE_KEY_SIZE = 32;\n\nexport async function createPrivateKey(): Promise<Uint8Array> {\n  while (true) {\n    const pk = await getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE);\n    if (privateKeyVerify(pk)) {\n      return pk;\n    }\n  }\n}\n\nexport function createPrivateKeySync(): Uint8Array {\n  while (true) {\n    const pk = getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);\n    if (privateKeyVerify(pk)) {\n      return pk;\n    }\n  }\n}\n\nexport * from \"secp256k1\";\n","import assert from 'assert'\nimport { BN, rlp } from './externals'\nimport {\n  privateKeyVerify,\n  publicKeyCreate,\n  publicKeyVerify,\n  publicKeyConvert,\n} from 'ethereum-cryptography/secp256k1'\nimport { stripHexPrefix } from './internal'\nimport { KECCAK256_RLP, KECCAK256_NULL } from './constants'\nimport { zeros, bufferToHex, toBuffer } from './bytes'\nimport { keccak, keccak256, keccakFromString, rlphash } from './hash'\nimport { assertIsString, assertIsHexString, assertIsBuffer } from './helpers'\nimport { BNLike, BufferLike, bnToUnpaddedBuffer, toType, TypeOutput } from './types'\n\nexport interface AccountData {\n  nonce?: BNLike\n  balance?: BNLike\n  stateRoot?: BufferLike\n  codeHash?: BufferLike\n}\n\nexport class Account {\n  nonce: BN\n  balance: BN\n  stateRoot: Buffer\n  codeHash: Buffer\n\n  static fromAccountData(accountData: AccountData) {\n    const { nonce, balance, stateRoot, codeHash } = accountData\n\n    return new Account(\n      nonce ? new BN(toBuffer(nonce)) : undefined,\n      balance ? new BN(toBuffer(balance)) : undefined,\n      stateRoot ? toBuffer(stateRoot) : undefined,\n      codeHash ? toBuffer(codeHash) : undefined\n    )\n  }\n\n  public static fromRlpSerializedAccount(serialized: Buffer) {\n    const values = rlp.decode(serialized)\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized account input. Must be array')\n    }\n\n    return this.fromValuesArray(values)\n  }\n\n  public static fromValuesArray(values: Buffer[]) {\n    const [nonce, balance, stateRoot, codeHash] = values\n\n    return new Account(new BN(nonce), new BN(balance), stateRoot, codeHash)\n  }\n\n  /**\n   * This constructor assigns and validates the values.\n   * Use the static factory methods to assist in creating an Account from varying data types.\n   */\n  constructor(\n    nonce = new BN(0),\n    balance = new BN(0),\n    stateRoot = KECCAK256_RLP,\n    codeHash = KECCAK256_NULL\n  ) {\n    this.nonce = nonce\n    this.balance = balance\n    this.stateRoot = stateRoot\n    this.codeHash = codeHash\n\n    this._validate()\n  }\n\n  private _validate() {\n    if (this.nonce.lt(new BN(0))) {\n      throw new Error('nonce must be greater than zero')\n    }\n    if (this.balance.lt(new BN(0))) {\n      throw new Error('balance must be greater than zero')\n    }\n    if (this.stateRoot.length !== 32) {\n      throw new Error('stateRoot must have a length of 32')\n    }\n    if (this.codeHash.length !== 32) {\n      throw new Error('codeHash must have a length of 32')\n    }\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers for the account, in order.\n   */\n  raw(): Buffer[] {\n    return [\n      bnToUnpaddedBuffer(this.nonce),\n      bnToUnpaddedBuffer(this.balance),\n      this.stateRoot,\n      this.codeHash,\n    ]\n  }\n\n  /**\n   * Returns the RLP serialization of the account as a `Buffer`.\n   */\n  serialize(): Buffer {\n    return rlp.encode(this.raw())\n  }\n\n  /**\n   * Returns a `Boolean` determining if the account is a contract.\n   */\n  isContract(): boolean {\n    return !this.codeHash.equals(KECCAK256_NULL)\n  }\n\n  /**\n   * Returns a `Boolean` determining if the account is empty complying to the definition of\n   * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n   * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n   */\n  isEmpty(): boolean {\n    return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(KECCAK256_NULL)\n  }\n}\n\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nexport const isValidAddress = function (hexAddress: string): boolean {\n  try {\n    assertIsString(hexAddress)\n  } catch (e: any) {\n    return false\n  }\n\n  return /^0x[0-9a-fA-F]{40}$/.test(hexAddress)\n}\n\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\nexport const toChecksumAddress = function (hexAddress: string, eip1191ChainId?: BNLike): string {\n  assertIsHexString(hexAddress)\n  const address = stripHexPrefix(hexAddress).toLowerCase()\n\n  let prefix = ''\n  if (eip1191ChainId) {\n    const chainId = toType(eip1191ChainId, TypeOutput.BN)\n    prefix = chainId.toString() + '0x'\n  }\n\n  const hash = keccakFromString(prefix + address).toString('hex')\n  let ret = '0x'\n\n  for (let i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase()\n    } else {\n      ret += address[i]\n    }\n  }\n\n  return ret\n}\n\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nexport const isValidChecksumAddress = function (\n  hexAddress: string,\n  eip1191ChainId?: BNLike\n): boolean {\n  return isValidAddress(hexAddress) && toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress\n}\n\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nexport const generateAddress = function (from: Buffer, nonce: Buffer): Buffer {\n  assertIsBuffer(from)\n  assertIsBuffer(nonce)\n  const nonceBN = new BN(nonce)\n\n  if (nonceBN.isZero()) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    return rlphash([from, null]).slice(-20)\n  }\n\n  // Only take the lower 160bits of the hash\n  return rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20)\n}\n\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nexport const generateAddress2 = function (from: Buffer, salt: Buffer, initCode: Buffer): Buffer {\n  assertIsBuffer(from)\n  assertIsBuffer(salt)\n  assertIsBuffer(initCode)\n\n  assert(from.length === 20)\n  assert(salt.length === 32)\n\n  const address = keccak256(\n    Buffer.concat([Buffer.from('ff', 'hex'), from, salt, keccak256(initCode)])\n  )\n\n  return address.slice(-20)\n}\n\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nexport const isValidPrivate = function (privateKey: Buffer): boolean {\n  return privateKeyVerify(privateKey)\n}\n\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexport const isValidPublic = function (publicKey: Buffer, sanitize: boolean = false): boolean {\n  assertIsBuffer(publicKey)\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]))\n  }\n\n  if (!sanitize) {\n    return false\n  }\n\n  return publicKeyVerify(publicKey)\n}\n\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexport const pubToAddress = function (pubKey: Buffer, sanitize: boolean = false): Buffer {\n  assertIsBuffer(pubKey)\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = Buffer.from(publicKeyConvert(pubKey, false).slice(1))\n  }\n  assert(pubKey.length === 64)\n  // Only take the lower 160bits of the hash\n  return keccak(pubKey).slice(-20)\n}\nexport const publicToAddress = pubToAddress\n\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexport const privateToPublic = function (privateKey: Buffer): Buffer {\n  assertIsBuffer(privateKey)\n  // skip the type flag and use the X, Y points\n  return Buffer.from(publicKeyCreate(privateKey, false)).slice(1)\n}\n\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexport const privateToAddress = function (privateKey: Buffer): Buffer {\n  return publicToAddress(privateToPublic(privateKey))\n}\n\n/**\n * Converts a public key to the Ethereum format.\n */\nexport const importPublic = function (publicKey: Buffer): Buffer {\n  assertIsBuffer(publicKey)\n  if (publicKey.length !== 64) {\n    publicKey = Buffer.from(publicKeyConvert(publicKey, false).slice(1))\n  }\n  return publicKey\n}\n\n/**\n * Returns the zero address.\n */\nexport const zeroAddress = function (): string {\n  const addressLength = 20\n  const addr = zeros(addressLength)\n  return bufferToHex(addr)\n}\n\n/**\n * Checks if a given address is the zero address.\n */\nexport const isZeroAddress = function (hexAddress: string): boolean {\n  try {\n    assertIsString(hexAddress)\n  } catch (e: any) {\n    return false\n  }\n\n  const zeroAddr = zeroAddress()\n  return zeroAddr === hexAddress\n}\n","import assert from 'assert'\nimport { BN } from './externals'\nimport { toBuffer, zeros } from './bytes'\nimport {\n  isValidAddress,\n  pubToAddress,\n  privateToAddress,\n  generateAddress,\n  generateAddress2,\n} from './account'\n\nexport class Address {\n  public readonly buf: Buffer\n\n  constructor(buf: Buffer) {\n    assert(buf.length === 20, 'Invalid address length')\n    this.buf = buf\n  }\n\n  /**\n   * Returns the zero address.\n   */\n  static zero(): Address {\n    return new Address(zeros(20))\n  }\n\n  /**\n   * Returns an Address object from a hex-encoded string.\n   * @param str - Hex-encoded address\n   */\n  static fromString(str: string): Address {\n    assert(isValidAddress(str), 'Invalid address')\n    return new Address(toBuffer(str))\n  }\n\n  /**\n   * Returns an address for a given public key.\n   * @param pubKey The two points of an uncompressed key\n   */\n  static fromPublicKey(pubKey: Buffer): Address {\n    assert(Buffer.isBuffer(pubKey), 'Public key should be Buffer')\n    const buf = pubToAddress(pubKey)\n    return new Address(buf)\n  }\n\n  /**\n   * Returns an address for a given private key.\n   * @param privateKey A private key must be 256 bits wide\n   */\n  static fromPrivateKey(privateKey: Buffer): Address {\n    assert(Buffer.isBuffer(privateKey), 'Private key should be Buffer')\n    const buf = privateToAddress(privateKey)\n    return new Address(buf)\n  }\n\n  /**\n   * Generates an address for a newly created contract.\n   * @param from The address which is creating this new address\n   * @param nonce The nonce of the from account\n   */\n  static generate(from: Address, nonce: BN): Address {\n    assert(BN.isBN(nonce))\n    return new Address(generateAddress(from.buf, nonce.toArrayLike(Buffer)))\n  }\n\n  /**\n   * Generates an address for a contract created using CREATE2.\n   * @param from The address which is creating this new address\n   * @param salt A salt\n   * @param initCode The init code of the contract being created\n   */\n  static generate2(from: Address, salt: Buffer, initCode: Buffer): Address {\n    assert(Buffer.isBuffer(salt))\n    assert(Buffer.isBuffer(initCode))\n    return new Address(generateAddress2(from.buf, salt, initCode))\n  }\n\n  /**\n   * Is address equal to another.\n   */\n  equals(address: Address): boolean {\n    return this.buf.equals(address.buf)\n  }\n\n  /**\n   * Is address zero.\n   */\n  isZero(): boolean {\n    return this.equals(Address.zero())\n  }\n\n  /**\n   * True if address is in the address range defined\n   * by EIP-1352\n   */\n  isPrecompileOrSystemAddress(): boolean {\n    const addressBN = new BN(this.buf)\n    const rangeMin = new BN(0)\n    const rangeMax = new BN('ffff', 'hex')\n\n    return addressBN.gte(rangeMin) && addressBN.lte(rangeMax)\n  }\n\n  /**\n   * Returns hex encoding of address.\n   */\n  toString(): string {\n    return '0x' + this.buf.toString('hex')\n  }\n\n  /**\n   * Returns Buffer representation of address.\n   */\n  toBuffer(): Buffer {\n    return Buffer.from(this.buf)\n  }\n}\n","import { BN } from './externals'\nimport { stripHexPrefix, padToEven, isHexString, isHexPrefixed } from './internal'\nimport {\n  PrefixedHexString,\n  TransformableToArray,\n  TransformableToBuffer,\n  NestedBufferArray,\n  NestedUint8Array,\n} from './types'\nimport { assertIsBuffer, assertIsArray, assertIsHexString } from './helpers'\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nexport const intToHex = function (i: number) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(`Received an invalid integer type: ${i}`)\n  }\n  return `0x${i.toString(16)}`\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nexport const intToBuffer = function (i: number) {\n  const hex = intToHex(i)\n  return Buffer.from(padToEven(hex.slice(2)), 'hex')\n}\n\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nexport const zeros = function (bytes: number): Buffer {\n  return Buffer.allocUnsafe(bytes).fill(0)\n}\n\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nconst setLength = function (msg: Buffer, length: number, right: boolean) {\n  const buf = zeros(length)\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf)\n      return buf\n    }\n    return msg.slice(0, length)\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length)\n      return buf\n    }\n    return msg.slice(-length)\n  }\n}\n\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexport const setLengthLeft = function (msg: Buffer, length: number) {\n  assertIsBuffer(msg)\n  return setLength(msg, length, false)\n}\n\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexport const setLengthRight = function (msg: Buffer, length: number) {\n  assertIsBuffer(msg)\n  return setLength(msg, length, true)\n}\n\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nconst stripZeros = function (a: any): Buffer | number[] | string {\n  let first = a[0]\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1)\n    first = a[0]\n  }\n  return a\n}\n\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nexport const unpadBuffer = function (a: Buffer): Buffer {\n  assertIsBuffer(a)\n  return stripZeros(a) as Buffer\n}\n\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nexport const unpadArray = function (a: number[]): number[] {\n  assertIsArray(a)\n  return stripZeros(a) as number[]\n}\n\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nexport const unpadHexString = function (a: string): string {\n  assertIsHexString(a)\n  a = stripHexPrefix(a)\n  return stripZeros(a) as string\n}\n\nexport type ToBufferInputTypes =\n  | PrefixedHexString\n  | number\n  | BN\n  | Buffer\n  | Uint8Array\n  | number[]\n  | TransformableToArray\n  | TransformableToBuffer\n  | null\n  | undefined\n\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nexport const toBuffer = function (v: ToBufferInputTypes): Buffer {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0)\n  }\n\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v)\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v as Uint8Array)\n  }\n\n  if (typeof v === 'string') {\n    if (!isHexString(v)) {\n      throw new Error(\n        `Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`\n      )\n    }\n    return Buffer.from(padToEven(stripHexPrefix(v)), 'hex')\n  }\n\n  if (typeof v === 'number') {\n    return intToBuffer(v)\n  }\n\n  if (BN.isBN(v)) {\n    if (v.isNeg()) {\n      throw new Error(`Cannot convert negative BN to buffer. Given: ${v}`)\n    }\n    return v.toArrayLike(Buffer)\n  }\n\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray())\n  }\n\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer())\n  }\n\n  throw new Error('invalid type')\n}\n\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexport const bufferToInt = function (buf: Buffer): number {\n  return new BN(toBuffer(buf)).toNumber()\n}\n\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nexport const bufferToHex = function (buf: Buffer): string {\n  buf = toBuffer(buf)\n  return '0x' + buf.toString('hex')\n}\n\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nexport const fromSigned = function (num: Buffer): BN {\n  return new BN(num).fromTwos(256)\n}\n\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nexport const toUnsigned = function (num: BN): Buffer {\n  return Buffer.from(num.toTwos(256).toArray())\n}\n\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexport const addHexPrefix = function (str: string): string {\n  if (typeof str !== 'string') {\n    return str\n  }\n\n  return isHexPrefixed(str) ? str : '0x' + str\n}\n\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\nexport const toUtf8 = function (hex: string): string {\n  const zerosRegexp = /^(00)+|(00)+$/g\n  hex = stripHexPrefix(hex)\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided')\n  }\n  const bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex')\n\n  return bufferVal.toString('utf8')\n}\n\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nexport const baToJSON = function (ba: any): any {\n  if (Buffer.isBuffer(ba)) {\n    return `0x${ba.toString('hex')}`\n  } else if (ba instanceof Array) {\n    const array = []\n    for (let i = 0; i < ba.length; i++) {\n      array.push(baToJSON(ba[i]))\n    }\n    return array\n  }\n}\n\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\nexport const validateNoLeadingZeroes = function (values: { [key: string]: Buffer | undefined }) {\n  for (const [k, v] of Object.entries(values)) {\n    if (v !== undefined && v.length > 0 && v[0] === 0) {\n      throw new Error(`${k} cannot have leading zeroes, received: ${v.toString('hex')}`)\n    }\n  }\n}\n\n/**\n * Converts a {@link Uint8Array} or {@link NestedUint8Array} to {@link Buffer} or {@link NestedBufferArray}\n */\nexport function arrToBufArr(arr: Uint8Array): Buffer\nexport function arrToBufArr(arr: NestedUint8Array): NestedBufferArray\nexport function arrToBufArr(arr: Uint8Array | NestedUint8Array): Buffer | NestedBufferArray\nexport function arrToBufArr(arr: Uint8Array | NestedUint8Array): Buffer | NestedBufferArray {\n  if (!Array.isArray(arr)) {\n    return Buffer.from(arr)\n  }\n  return arr.map((a) => arrToBufArr(a))\n}\n\n/**\n * Converts a {@link Buffer} or {@link NestedBufferArray} to {@link Uint8Array} or {@link NestedUint8Array}\n */\nexport function bufArrToArr(arr: Buffer): Uint8Array\nexport function bufArrToArr(arr: NestedBufferArray): NestedUint8Array\nexport function bufArrToArr(arr: Buffer | NestedBufferArray): Uint8Array | NestedUint8Array\nexport function bufArrToArr(arr: Buffer | NestedBufferArray): Uint8Array | NestedUint8Array {\n  if (!Array.isArray(arr)) {\n    return Uint8Array.from(arr ?? [])\n  }\n  return arr.map((a) => bufArrToArr(a))\n}\n","import { Buffer } from 'buffer'\nimport { BN } from './externals'\n\n/**\n * 2^64-1\n */\nexport const MAX_UINT64 = new BN('ffffffffffffffff', 16)\n\n/**\n * The max integer that the evm can handle (2^256-1)\n */\nexport const MAX_INTEGER = new BN(\n  'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\n  16\n)\n\n/**\n * 2^256\n */\nexport const TWO_POW256 = new BN(\n  '10000000000000000000000000000000000000000000000000000000000000000',\n  16\n)\n\n/**\n * Keccak-256 hash of null\n */\nexport const KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n\n/**\n * Keccak-256 hash of null\n */\nexport const KECCAK256_NULL = Buffer.from(KECCAK256_NULL_S, 'hex')\n\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexport const KECCAK256_RLP_ARRAY_S =\n  '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'\n\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexport const KECCAK256_RLP_ARRAY = Buffer.from(KECCAK256_RLP_ARRAY_S, 'hex')\n\n/**\n * Keccak-256 hash of the RLP of null\n */\nexport const KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'\n\n/**\n * Keccak-256 hash of the RLP of null\n */\nexport const KECCAK256_RLP = Buffer.from(KECCAK256_RLP_S, 'hex')\n","/**\n * Re-exports commonly used modules:\n * * Exports [`BN`](https://github.com/indutny/bn.js), [`rlp`](https://github.com/ethereumjs/rlp).\n * @packageDocumentation\n */\n\nimport BN from 'bn.js'\nimport * as rlp from 'rlp'\n\n/**\n * [`BN`](https://github.com/indutny/bn.js)\n */\nexport { BN }\n\n/**\n * [`rlp`](https://github.com/ethereumjs/rlp)\n */\nexport { rlp }\n","import { keccak224, keccak384, keccak256 as k256, keccak512 } from 'ethereum-cryptography/keccak'\nconst createHash = require('create-hash')\nimport { rlp } from './externals'\nimport { toBuffer, setLengthLeft } from './bytes'\nimport { assertIsString, assertIsBuffer, assertIsArray, assertIsHexString } from './helpers'\n\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\nexport const keccak = function (a: Buffer, bits: number = 256): Buffer {\n  assertIsBuffer(a)\n  switch (bits) {\n    case 224: {\n      return keccak224(a)\n    }\n    case 256: {\n      return k256(a)\n    }\n    case 384: {\n      return keccak384(a)\n    }\n    case 512: {\n      return keccak512(a)\n    }\n    default: {\n      throw new Error(`Invald algorithm: keccak${bits}`)\n    }\n  }\n}\n\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\nexport const keccak256 = function (a: Buffer): Buffer {\n  return keccak(a)\n}\n\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nexport const keccakFromString = function (a: string, bits: number = 256) {\n  assertIsString(a)\n  const buf = Buffer.from(a, 'utf8')\n  return keccak(buf, bits)\n}\n\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nexport const keccakFromHexString = function (a: string, bits: number = 256) {\n  assertIsHexString(a)\n  return keccak(toBuffer(a), bits)\n}\n\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\nexport const keccakFromArray = function (a: number[], bits: number = 256) {\n  assertIsArray(a)\n  return keccak(toBuffer(a), bits)\n}\n\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\nconst _sha256 = function (a: any): Buffer {\n  a = toBuffer(a)\n  return createHash('sha256').update(a).digest()\n}\n\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\nexport const sha256 = function (a: Buffer): Buffer {\n  assertIsBuffer(a)\n  return _sha256(a)\n}\n\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\nexport const sha256FromString = function (a: string): Buffer {\n  assertIsString(a)\n  return _sha256(a)\n}\n\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\nexport const sha256FromArray = function (a: number[]): Buffer {\n  assertIsArray(a)\n  return _sha256(a)\n}\n\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nconst _ripemd160 = function (a: any, padded: boolean): Buffer {\n  a = toBuffer(a)\n  const hash = createHash('rmd160').update(a).digest()\n  if (padded === true) {\n    return setLengthLeft(hash, 32)\n  } else {\n    return hash\n  }\n}\n\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexport const ripemd160 = function (a: Buffer, padded: boolean): Buffer {\n  assertIsBuffer(a)\n  return _ripemd160(a, padded)\n}\n\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexport const ripemd160FromString = function (a: string, padded: boolean): Buffer {\n  assertIsString(a)\n  return _ripemd160(a, padded)\n}\n\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\nexport const ripemd160FromArray = function (a: number[], padded: boolean): Buffer {\n  assertIsArray(a)\n  return _ripemd160(a, padded)\n}\n\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nexport const rlphash = function (a: rlp.Input): Buffer {\n  return keccak(rlp.encode(a))\n}\n","import { isHexString } from './internal'\n\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nexport const assertIsHexString = function (input: string): void {\n  if (!isHexString(input)) {\n    const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nexport const assertIsBuffer = function (input: Buffer): void {\n  if (!Buffer.isBuffer(input)) {\n    const msg = `This method only supports Buffer but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nexport const assertIsArray = function (input: number[]): void {\n  if (!Array.isArray(input)) {\n    const msg = `This method only supports number arrays but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nexport const assertIsString = function (input: string): void {\n  if (typeof input !== 'string') {\n    const msg = `This method only supports strings but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n","/**\n * Constants\n */\nexport * from './constants'\n\n/**\n * Account class and helper functions\n */\nexport * from './account'\n\n/**\n * Address type\n */\nexport * from './address'\n\n/**\n * Hash functions\n */\nexport * from './hash'\n\n/**\n * ECDSA signature\n */\nexport * from './signature'\n\n/**\n * Utilities for manipulating Buffers, byte arrays, etc.\n */\nexport * from './bytes'\n\n/**\n * Function for definining properties on an object\n */\nexport * from './object'\n\n/**\n * External exports (BN, rlp)\n */\nexport * from './externals'\n\n/**\n * Helpful TypeScript types\n */\nexport * from './types'\n\n/**\n * Export ethjs-util methods\n */\nexport {\n  isHexPrefixed,\n  stripHexPrefix,\n  padToEven,\n  getBinarySize,\n  arrayContainsArray,\n  toAscii,\n  fromUtf8,\n  fromAscii,\n  getKeys,\n  isHexString,\n} from './internal'\n","/*\nThe MIT License\n\nCopyright (c) 2016 Nick Dodson. nickdodson.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE\n */\n\n/**\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\n * @param str the string input value\n * @return a boolean if it is or is not hex prefixed\n * @throws if the str input is not a string\n */\nexport function isHexPrefixed(str: string): boolean {\n  if (typeof str !== 'string') {\n    throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`)\n  }\n\n  return str[0] === '0' && str[1] === 'x'\n}\n\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nexport const stripHexPrefix = (str: string): string => {\n  if (typeof str !== 'string')\n    throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`)\n\n  return isHexPrefixed(str) ? str.slice(2) : str\n}\n\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nexport function padToEven(value: string): string {\n  let a = value\n\n  if (typeof a !== 'string') {\n    throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`)\n  }\n\n  if (a.length % 2) a = `0${a}`\n\n  return a\n}\n\n/**\n * Get the binary size of a string\n * @param str\n * @returns the number of bytes contained within the string\n */\nexport function getBinarySize(str: string) {\n  if (typeof str !== 'string') {\n    throw new Error(`[getBinarySize] method requires input type 'string', recieved ${typeof str}`)\n  }\n\n  return Buffer.byteLength(str, 'utf8')\n}\n\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param superset\n * @param subset\n *\n */\nexport function arrayContainsArray(\n  superset: unknown[],\n  subset: unknown[],\n  some?: boolean\n): boolean {\n  if (Array.isArray(superset) !== true) {\n    throw new Error(\n      `[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`\n    )\n  }\n  if (Array.isArray(subset) !== true) {\n    throw new Error(\n      `[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset}'`\n    )\n  }\n\n  return subset[some ? 'some' : 'every']((value) => superset.indexOf(value) >= 0)\n}\n\n/**\n * Should be called to get ascii from its hex representation\n *\n * @param string in hex\n * @returns ascii string representation of hex value\n */\nexport function toAscii(hex: string): string {\n  let str = ''\n  let i = 0\n  const l = hex.length\n\n  if (hex.substring(0, 2) === '0x') i = 2\n\n  for (; i < l; i += 2) {\n    const code = parseInt(hex.substr(i, 2), 16)\n    str += String.fromCharCode(code)\n  }\n\n  return str\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @param string\n * @param optional padding\n * @returns hex representation of input string\n */\nexport function fromUtf8(stringValue: string) {\n  const str = Buffer.from(stringValue, 'utf8')\n\n  return `0x${padToEven(str.toString('hex')).replace(/^0+|0+$/g, '')}`\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @param  string\n * @param  optional padding\n * @returns  hex representation of input string\n */\nexport function fromAscii(stringValue: string) {\n  let hex = ''\n  for (let i = 0; i < stringValue.length; i++) {\n    const code = stringValue.charCodeAt(i)\n    const n = code.toString(16)\n    hex += n.length < 2 ? `0${n}` : n\n  }\n\n  return `0x${hex}`\n}\n\n/**\n * Returns the keys from an array of objects.\n * @example\n * ```js\n * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']\n *````\n * @param  params\n * @param  key\n * @param  allowEmpty\n * @returns output just a simple array of output keys\n */\nexport function getKeys(params: Record<string, string>[], key: string, allowEmpty?: boolean) {\n  if (!Array.isArray(params)) {\n    throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`)\n  }\n  if (typeof key !== 'string') {\n    throw new Error(\n      `[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`\n    )\n  }\n\n  const result = []\n\n  for (let i = 0; i < params.length; i++) {\n    let value = params[i][key]\n    if (allowEmpty && !value) {\n      value = ''\n    } else if (typeof value !== 'string') {\n      throw new Error(`invalid abi - expected type 'string', received ${typeof value}`)\n    }\n    result.push(value)\n  }\n\n  return result\n}\n\n/**\n * Is the string a hex string.\n *\n * @param  value\n * @param  length\n * @returns  output the string is a hex string\n */\nexport function isHexString(value: string, length?: number): boolean {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) return false\n\n  if (length && value.length !== 2 + 2 * length) return false\n\n  return true\n}\n","import assert from 'assert'\nimport { stripHexPrefix } from './internal'\nimport { rlp } from './externals'\nimport { toBuffer, baToJSON, unpadBuffer } from './bytes'\n\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param self the `Object` to define properties on\n * @param fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param data data to be validated against the definitions\n * @deprecated\n */\nexport const defineProperties = function (self: any, fields: any, data?: any) {\n  self.raw = []\n  self._fields = []\n\n  // attach the `toJSON`\n  self.toJSON = function (label: boolean = false) {\n    if (label) {\n      type Dict = { [key: string]: string }\n      const obj: Dict = {}\n      self._fields.forEach((field: string) => {\n        obj[field] = `0x${self[field].toString('hex')}`\n      })\n      return obj\n    }\n    return baToJSON(self.raw)\n  }\n\n  self.serialize = function serialize() {\n    return rlp.encode(self.raw)\n  }\n\n  fields.forEach((field: any, i: number) => {\n    self._fields.push(field.name)\n    function getter() {\n      return self.raw[i]\n    }\n    function setter(v: any) {\n      v = toBuffer(v)\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = Buffer.allocUnsafe(0)\n      }\n\n      if (field.allowLess && field.length) {\n        v = unpadBuffer(v)\n        assert(\n          field.length >= v.length,\n          `The field ${field.name} must not have more ${field.length} bytes`\n        )\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        assert(\n          field.length === v.length,\n          `The field ${field.name} must have byte length of ${field.length}`\n        )\n      }\n\n      self.raw[i] = v\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter,\n    })\n\n    if (field.default) {\n      self[field.name] = field.default\n    }\n\n    // attach alias\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter,\n      })\n    }\n  })\n\n  // if the constuctor is passed data\n  if (data) {\n    if (typeof data === 'string') {\n      data = Buffer.from(stripHexPrefix(data), 'hex')\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data)\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw new Error('wrong number of fields in data')\n      }\n\n      // make sure all the items are buffers\n      data.forEach((d, i) => {\n        self[self._fields[i]] = toBuffer(d)\n      })\n    } else if (typeof data === 'object') {\n      const keys = Object.keys(data)\n      fields.forEach((field: any) => {\n        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name]\n        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias]\n      })\n    } else {\n      throw new Error('invalid data')\n    }\n  }\n}\n","import { ecdsaSign, ecdsaRecover, publicKeyConvert } from 'ethereum-cryptography/secp256k1'\nimport { BN } from './externals'\nimport { toBuffer, setLengthLeft, bufferToHex, bufferToInt } from './bytes'\nimport { keccak } from './hash'\nimport { assertIsBuffer } from './helpers'\nimport { BNLike, toType, TypeOutput } from './types'\n\nexport interface ECDSASignature {\n  v: number\n  r: Buffer\n  s: Buffer\n}\n\nexport interface ECDSASignatureBuffer {\n  v: Buffer\n  r: Buffer\n  s: Buffer\n}\n\n/**\n * Returns the ECDSA signature of a message hash.\n */\nexport function ecsign(msgHash: Buffer, privateKey: Buffer, chainId?: number): ECDSASignature\nexport function ecsign(msgHash: Buffer, privateKey: Buffer, chainId: BNLike): ECDSASignatureBuffer\nexport function ecsign(msgHash: Buffer, privateKey: Buffer, chainId: any): any {\n  const { signature, recid: recovery } = ecdsaSign(msgHash, privateKey)\n\n  const r = Buffer.from(signature.slice(0, 32))\n  const s = Buffer.from(signature.slice(32, 64))\n\n  if (!chainId || typeof chainId === 'number') {\n    // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n    if (chainId && !Number.isSafeInteger(chainId)) {\n      throw new Error(\n        'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)'\n      )\n    }\n    const v = chainId ? recovery + (chainId * 2 + 35) : recovery + 27\n    return { r, s, v }\n  }\n\n  const chainIdBN = toType(chainId as BNLike, TypeOutput.BN)\n  const v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer)\n  return { r, s, v }\n}\n\nfunction calculateSigRecovery(v: BNLike, chainId?: BNLike): BN {\n  const vBN = toType(v, TypeOutput.BN)\n\n  if (vBN.eqn(0) || vBN.eqn(1)) return toType(v, TypeOutput.BN)\n\n  if (!chainId) {\n    return vBN.subn(27)\n  }\n  const chainIdBN = toType(chainId, TypeOutput.BN)\n  return vBN.sub(chainIdBN.muln(2).addn(35))\n}\n\nfunction isValidSigRecovery(recovery: number | BN): boolean {\n  const rec = new BN(recovery)\n  return rec.eqn(0) || rec.eqn(1)\n}\n\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nexport const ecrecover = function (\n  msgHash: Buffer,\n  v: BNLike,\n  r: Buffer,\n  s: Buffer,\n  chainId?: BNLike\n): Buffer {\n  const signature = Buffer.concat([setLengthLeft(r, 32), setLengthLeft(s, 32)], 64)\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n  const senderPubKey = ecdsaRecover(signature, recovery.toNumber(), msgHash)\n  return Buffer.from(publicKeyConvert(senderPubKey, false).slice(1))\n}\n\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Signature\n */\nexport const toRpcSig = function (v: BNLike, r: Buffer, s: Buffer, chainId?: BNLike): string {\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  return bufferToHex(Buffer.concat([setLengthLeft(r, 32), setLengthLeft(s, 32), toBuffer(v)]))\n}\n\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Signature\n */\nexport const toCompactSig = function (v: BNLike, r: Buffer, s: Buffer, chainId?: BNLike): string {\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n\n  const vn = toType(v, TypeOutput.Number)\n  let ss = s\n  if ((vn > 28 && vn % 2 === 1) || vn === 1 || vn === 28) {\n    ss = Buffer.from(s)\n    ss[0] |= 0x80\n  }\n\n  return bufferToHex(Buffer.concat([setLengthLeft(r, 32), setLengthLeft(ss, 32)]))\n}\n\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nexport const fromRpcSig = function (sig: string): ECDSASignature {\n  const buf: Buffer = toBuffer(sig)\n\n  let r: Buffer\n  let s: Buffer\n  let v: number\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32)\n    s = buf.slice(32, 64)\n    v = bufferToInt(buf.slice(64))\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32)\n    s = buf.slice(32, 64)\n    v = bufferToInt(buf.slice(32, 33)) >> 7\n    s[0] &= 0x7f\n  } else {\n    throw new Error('Invalid signature length')\n  }\n\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v += 27\n  }\n\n  return {\n    v,\n    r,\n    s,\n  }\n}\n\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexport const isValidSignature = function (\n  v: BNLike,\n  r: Buffer,\n  s: Buffer,\n  homesteadOrLater: boolean = true,\n  chainId?: BNLike\n): boolean {\n  const SECP256K1_N_DIV_2 = new BN(\n    '7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0',\n    16\n  )\n  const SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16)\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false\n  }\n\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false\n  }\n\n  const rBN = new BN(r)\n  const sBN = new BN(s)\n\n  if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n    return false\n  }\n\n  if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexport const hashPersonalMessage = function (message: Buffer): Buffer {\n  assertIsBuffer(message)\n  const prefix = Buffer.from(`\\u0019Ethereum Signed Message:\\n${message.length}`, 'utf-8')\n  return keccak(Buffer.concat([prefix, message]))\n}\n","import { BN } from './externals'\nimport { isHexString } from './internal'\nimport { Address } from './address'\nimport { unpadBuffer, toBuffer, ToBufferInputTypes } from './bytes'\n\n/*\n * A type that represents a BNLike input that can be converted to a BN.\n */\nexport type BNLike = BN | PrefixedHexString | number | Buffer\n\n/*\n * A type that represents a BufferLike input that can be converted to a Buffer.\n */\nexport type BufferLike =\n  | Buffer\n  | Uint8Array\n  | number[]\n  | number\n  | BN\n  | TransformableToBuffer\n  | PrefixedHexString\n\n/*\n * A type that represents a `0x`-prefixed hex string.\n */\nexport type PrefixedHexString = string\n\n/**\n * A type that represents an Address-like value.\n * To convert to address, use `new Address(toBuffer(value))`\n */\nexport type AddressLike = Address | Buffer | PrefixedHexString\n\n/*\n * A type that represents an object that has a `toArray()` method.\n */\nexport interface TransformableToArray {\n  toArray(): Uint8Array\n  toBuffer?(): Buffer\n}\n\n/*\n * A type that represents an object that has a `toBuffer()` method.\n */\nexport interface TransformableToBuffer {\n  toBuffer(): Buffer\n  toArray?(): Uint8Array\n}\n\nexport type NestedUint8Array = Array<Uint8Array | NestedUint8Array>\nexport type NestedBufferArray = Array<Buffer | NestedBufferArray>\n\n/**\n * Convert BN to 0x-prefixed hex string.\n */\nexport function bnToHex(value: BN): PrefixedHexString {\n  return `0x${value.toString(16)}`\n}\n\n/**\n * Convert value from BN to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\nexport function bnToUnpaddedBuffer(value: BN): Buffer {\n  // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`\n  // for compatibility with browserify and similar tools\n  return unpadBuffer(value.toArrayLike(Buffer))\n}\n\n/**\n * Deprecated alias for {@link bnToUnpaddedBuffer}\n * @deprecated\n */\nexport function bnToRlp(value: BN): Buffer {\n  return bnToUnpaddedBuffer(value)\n}\n\n/**\n * Type output options\n */\nexport enum TypeOutput {\n  Number,\n  BN,\n  Buffer,\n  PrefixedHexString,\n}\n\nexport type TypeOutputReturnType = {\n  [TypeOutput.Number]: number\n  [TypeOutput.BN]: BN\n  [TypeOutput.Buffer]: Buffer\n  [TypeOutput.PrefixedHexString]: PrefixedHexString\n}\n\n/**\n * Convert an input to a specified type.\n * Input of null/undefined returns null/undefined regardless of the output type.\n * @param input value to convert\n * @param outputType type to output\n */\nexport function toType<T extends TypeOutput>(input: null, outputType: T): null\nexport function toType<T extends TypeOutput>(input: undefined, outputType: T): undefined\nexport function toType<T extends TypeOutput>(\n  input: ToBufferInputTypes,\n  outputType: T\n): TypeOutputReturnType[T]\nexport function toType<T extends TypeOutput>(\n  input: ToBufferInputTypes,\n  outputType: T\n): TypeOutputReturnType[T] | undefined | null {\n  if (input === null) {\n    return null\n  }\n  if (input === undefined) {\n    return undefined\n  }\n\n  if (typeof input === 'string' && !isHexString(input)) {\n    throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`)\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error(\n      'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)'\n    )\n  }\n\n  const output = toBuffer(input)\n\n  if (outputType === TypeOutput.Buffer) {\n    return output as TypeOutputReturnType[T]\n  } else if (outputType === TypeOutput.BN) {\n    return new BN(output) as TypeOutputReturnType[T]\n  } else if (outputType === TypeOutput.Number) {\n    const bn = new BN(output)\n    const max = new BN(Number.MAX_SAFE_INTEGER.toString())\n    if (bn.gt(max)) {\n      throw new Error(\n        'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)'\n      )\n    }\n    return bn.toNumber() as TypeOutputReturnType[T]\n  } else {\n    // outputType === TypeOutput.PrefixedHexString\n    return `0x${output.toString('hex')}` as TypeOutputReturnType[T]\n  }\n}\n","import BN from 'bn.js'\n\nimport { Decoded, Input, List } from './types'\n\n// Types exported outside of this package\nexport { Decoded, Input, List }\n\n/**\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\n * This function takes in a data, convert it to buffer if not, and a length for recursion\n * @param input - will be converted to buffer\n * @returns returns buffer of encoded data\n **/\nexport function encode(input: Input): Buffer {\n  if (Array.isArray(input)) {\n    const output: Buffer[] = []\n    for (let i = 0; i < input.length; i++) {\n      output.push(encode(input[i]))\n    }\n    const buf = Buffer.concat(output)\n    return Buffer.concat([encodeLength(buf.length, 192), buf])\n  } else {\n    const inputBuf = toBuffer(input)\n    return inputBuf.length === 1 && inputBuf[0] < 128\n      ? inputBuf\n      : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf])\n  }\n}\n\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n * @param base The base to parse the integer into\n */\nfunction safeParseInt(v: string, base: number): number {\n  if (v[0] === '0' && v[1] === '0') {\n    throw new Error('invalid RLP: extra zeros')\n  }\n\n  return parseInt(v, base)\n}\n\nfunction encodeLength(len: number, offset: number): Buffer {\n  if (len < 56) {\n    return Buffer.from([len + offset])\n  } else {\n    const hexLength = intToHex(len)\n    const lLength = hexLength.length / 2\n    const firstByte = intToHex(offset + 55 + lLength)\n    return Buffer.from(firstByte + hexLength, 'hex')\n  }\n}\n\n/**\n * RLP Decoding based on: {@link https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP|RLP}\n * @param input - will be converted to buffer\n * @param stream - Is the input a stream (false by default)\n * @returns - returns decode Array of Buffers containg the original message\n **/\nexport function decode(input: Buffer, stream?: boolean): Buffer\nexport function decode(input: Buffer[], stream?: boolean): Buffer[]\nexport function decode(input: Input, stream?: boolean): Buffer[] | Buffer | Decoded\nexport function decode(input: Input, stream: boolean = false): Buffer[] | Buffer | Decoded {\n  if (!input || (input as any).length === 0) {\n    return Buffer.from([])\n  }\n\n  const inputBuffer = toBuffer(input)\n  const decoded = _decode(inputBuffer)\n\n  if (stream) {\n    return decoded\n  }\n  if (decoded.remainder.length !== 0) {\n    throw new Error('invalid remainder')\n  }\n\n  return decoded.data\n}\n\n/**\n * Get the length of the RLP input\n * @param input\n * @returns The length of the input or an empty Buffer if no input\n */\nexport function getLength(input: Input): Buffer | number {\n  if (!input || (input as any).length === 0) {\n    return Buffer.from([])\n  }\n\n  const inputBuffer = toBuffer(input)\n  const firstByte = inputBuffer[0]\n\n  if (firstByte <= 0x7f) {\n    return inputBuffer.length\n  } else if (firstByte <= 0xb7) {\n    return firstByte - 0x7f\n  } else if (firstByte <= 0xbf) {\n    return firstByte - 0xb6\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    return firstByte - 0xbf\n  } else {\n    // a list  over 55 bytes long\n    const llength = firstByte - 0xf6\n    const length = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16)\n    return llength + length\n  }\n}\n\n/** Decode an input with RLP */\nfunction _decode(input: Buffer): Decoded {\n  let length, llength, data, innerRemainder, d\n  const decoded = []\n  const firstByte = input[0]\n\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1),\n    }\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f\n\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = Buffer.from([])\n    } else {\n      data = input.slice(1, length)\n    }\n\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid rlp encoding: byte must be less 0x80')\n    }\n\n    return {\n      data: data,\n      remainder: input.slice(length),\n    }\n  } else if (firstByte <= 0xbf) {\n    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n    // followed by the length, followed by the string\n    llength = firstByte - 0xb6\n    if (input.length - 1 < llength) {\n      throw new Error('invalid RLP: not enough bytes for string length')\n    }\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16)\n    if (length <= 55) {\n      throw new Error('invalid RLP: expected string length to be greater than 55')\n    }\n    data = input.slice(llength, length + llength)\n    if (data.length < length) {\n      throw new Error('invalid RLP: not enough bytes for string')\n    }\n\n    return {\n      data: data,\n      remainder: input.slice(length + llength),\n    }\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    length = firstByte - 0xbf\n    innerRemainder = input.slice(1, length)\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder)\n      decoded.push(d.data as Buffer)\n      innerRemainder = d.remainder\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(length),\n    }\n  } else {\n    // a list  over 55 bytes long\n    llength = firstByte - 0xf6\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16)\n    const totalLength = llength + length\n    if (totalLength > input.length) {\n      throw new Error('invalid rlp: total length is larger than the data')\n    }\n\n    innerRemainder = input.slice(llength, totalLength)\n    if (innerRemainder.length === 0) {\n      throw new Error('invalid rlp, List has a invalid length')\n    }\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder)\n      decoded.push(d.data as Buffer)\n      innerRemainder = d.remainder\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength),\n    }\n  }\n}\n\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str: string): boolean {\n  return str.slice(0, 2) === '0x'\n}\n\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str: string): string {\n  if (typeof str !== 'string') {\n    return str\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str\n}\n\n/** Transform an integer into its hexadecimal value */\nfunction intToHex(integer: number | bigint): string {\n  if (integer < 0) {\n    throw new Error('Invalid integer as argument, must be unsigned!')\n  }\n  const hex = integer.toString(16)\n  return hex.length % 2 ? `0${hex}` : hex\n}\n\n/** Pad a string to be even */\nfunction padToEven(a: string): string {\n  return a.length % 2 ? `0${a}` : a\n}\n\n/** Transform an integer into a Buffer */\nfunction intToBuffer(integer: number | bigint): Buffer {\n  const hex = intToHex(integer)\n  return Buffer.from(hex, 'hex')\n}\n\n/** Transform anything into a Buffer */\nfunction toBuffer(v: Input): Buffer {\n  if (!Buffer.isBuffer(v)) {\n    if (typeof v === 'string') {\n      if (isHexPrefixed(v)) {\n        return Buffer.from(padToEven(stripHexPrefix(v)), 'hex')\n      } else {\n        return Buffer.from(v)\n      }\n    } else if (typeof v === 'number' || typeof v === 'bigint') {\n      if (!v) {\n        return Buffer.from([])\n      } else {\n        return intToBuffer(v)\n      }\n    } else if (v === null || v === undefined) {\n      return Buffer.from([])\n    } else if (v instanceof Uint8Array) {\n      return Buffer.from(v as any)\n    } else if (BN.isBN(v)) {\n      // converts a BN to a Buffer\n      return Buffer.from(v.toArray())\n    } else {\n      throw new Error('invalid type')\n    }\n  }\n  return v\n}\n"],"names":["exports","hashConstructor","msg","hash","update","Buffer","from","digest","createKeccakHash","require","hash_utils_1","module","ec","EC","ecparams","curve","BN","n","constructor","loadPublicKey","pubkey","first","length","xbuf","x","cmp","p","y","toRed","red","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","keyPair","pub","loadCompressedPublicKey","subarray","ybuf","x3","redISub","isZero","loadUncompressedPublicKey","savePublicKey","output","point","encode","i","contextRandomize","privateKeyVerify","seckey","bn","privateKeyNegate","negate","sub","umod","toArrayLike","Uint8Array","set","privateKeyTweakAdd","tweak","iadd","isub","tweaked","privateKeyTweakMul","imul","publicKeyVerify","publicKeyCreate","keyFromPrivate","getPublic","publicKeyConvert","pair","publicKeyNegate","publicKeyCombine","pubkeys","pairs","Array","add","isInfinity","publicKeyTweakAdd","g","mul","publicKeyTweakMul","signatureNormalize","sig","r","s","nh","signatureExport","obj","sigR","sigS","lenR","posR","lenS","posS","outputlen","signatureImport","slice","Error","ecdsaSign","message","data","noncefn","_noncefn","counter","nonce","d","sign","canonical","k","pers","err","signature","recid","recoveryParam","ecdsaVerify","msg32","sigObj","sigr","sigs","verify","ecdsaRecover","recoverPubKey","ecdh","hashfn","scalar","undefined","sha256","getX","toArray","getY","errors","assert","cond","isUint8Array","name","value","isArray","numbers","join","includes","isCompressed","toTypeString","getAssertedOutput","len","Object","prototype","toString","call","secp256k1","seed","compressed","options","randombytes","bytes","Promise","resolve","reject","resp","random_1","pk","_a","secp256k1_1","__export","balance","stateRoot","codeHash","externals_1","constants_1","this","_validate","Account","accountData","toBuffer","serialized","values","decode","fromValuesArray","lt","bnToUnpaddedBuffer","raw","equals","hexAddress","assertIsString","e","test","eip1191ChainId","assertIsHexString","address","stripHexPrefix","toLowerCase","prefix","toType","types_1","keccakFromString","ret","parseInt","toUpperCase","isValidAddress","toChecksumAddress","assertIsBuffer","nonceBN","rlphash","salt","initCode","keccak256","concat","privateKey","publicKey","sanitize","pubKey","keccak","publicToAddress","privateToPublic","addr","zeros","bufferToHex","zeroAddress","buf","Address","str","isBuffer","pubToAddress","privateToAddress","isBN","generateAddress","generateAddress2","zero","addressBN","rangeMin","rangeMax","gte","lte","Number","isSafeInteger","hex","intToHex","padToEven","allocUnsafe","fill","setLength","right","copy","stripZeros","a","assertIsArray","v","isHexString","intToBuffer","isNeg","toNumber","num","fromTwos","toTwos","isHexPrefixed","replace","ba","array","push","baToJSON","entries","arrToBufArr","arr","map","bufArrToArr","buffer_1","bn_js_1","createHash","bits","keccak224","keccak384","keccak512","_sha256","_ripemd160","padded","setLengthLeft","input","__exportStar","enumerable","get","getBinarySize","arrayContainsArray","toAscii","fromUtf8","fromAscii","getKeys","byteLength","superset","subset","some","indexOf","l","substring","code","substr","String","fromCharCode","stringValue","charCodeAt","params","key","allowEmpty","result","match","self","fields","_fields","toJSON","label","obj_1","forEach","field","serialize","getter","setter","allowZero","allowLess","unpadBuffer","defineProperty","configurable","default","alias","keys_1","keys","calculateSigRecovery","chainId","vBN","eqn","subn","chainIdBN","muln","addn","isValidSigRecovery","recovery","rec","msgHash","senderPubKey","vn","ss","bufferToInt","homesteadOrLater","SECP256K1_N_DIV_2","SECP256K1_N","rBN","sBN","gt","TypeOutput","outputType","max","MAX_SAFE_INTEGER","safeParseInt","base","encodeLength","offset","hexLength","firstByte","_decode","llength","innerRemainder","decoded","remainder","totalLength","integer","inputBuf","stream","inputBuffer"],"sourceRoot":""}