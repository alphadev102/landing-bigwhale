{"version":3,"file":"static/js/6571.40662c21.chunk.js","mappings":"qoCAEO,IAAMA,EAAoB,EAAH,KACzBC,EAAAA,kBAAgB,IACnBC,WAAY,e,+/BCwDd,I,IAAMC,EAAoB,yBACbC,EAAa,aAAAC,EAAAA,EAAAA,GAAAA,EAAAA,GAAA,WAexB,WAAYC,GAA4B,cAEtC,IAFsCC,EAAAA,EAAAA,GAAAA,KAAAA,GACtCC,EAAAA,EAAAA,KAAAA,OAAQC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,uBAbmC,OAAIA,EAAAA,EAAAA,IAEZC,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,EAAAA,eAAAA,YAAwBD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,gBAEvB,OAAIA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,iBAEoB,CAAC,IAACA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,UAErB,CAAC,IAACA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,UAEQ,iBAI9CH,EAAQK,SAAU,MAAMC,EAAAA,0BAAAA,cAAwC,kDAGrE,GAFIN,EAAQO,cAAeC,EAAAA,IAAAA,YACtBA,EAAAA,IAAAA,aACmB,QAAnBR,EAAAA,EAAQS,mBAAW,QAAnBC,EAAqBC,iBAAmBC,OAAOC,OAAOlB,EAAAA,kBAAkBmB,SAA4B,QAApB,EAACd,EAAQS,mBAAW,aAAnBM,EAAqBJ,gBACzG,MAAML,EAAAA,0BAAAA,cAAwC,wDAWyB,MAV9C,YAAvBN,EAAQgB,aAA0Bd,EAAKe,QAAU,kBACrDf,EAAKgB,eAAgBC,EAAAA,EAAAA,kBAAiBjB,EAAKe,SAAWG,OAAOlB,EAAKe,SAASI,QAAQxB,GAAqB,KAExGK,EAAKoB,YAAc,OACdtB,GAAO,IACVS,YAAa,QACPc,EAAAA,EAAAA,gBAAkC,QAAnBvB,EAAAA,EAAQS,mBAAW,aAAnBe,EAAqBb,eAAmC,QAAnBX,EAAAA,EAAQS,mBAAW,aAAnBgB,EAAqBC,UAAY,CAAC,GACvF1B,EAAQS,eAGfP,EAAKyB,yBAA2BzB,EAAKyB,yBAAyBC,MAAUC,EAAAA,EAAAA,GAAAA,IAAC,CAC3E,CAsLC,OAtLAC,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAC,IAAAA,WAAAC,IAED,WACE,OAAIC,KAAKC,SAAW9B,EAAAA,eAAAA,WAA4B6B,KAAKE,qBACnCF,KAAKG,eAAeH,KAAKE,sBAC1BE,SAEV,I,EACRC,IAED,SAAaC,GACX,MAAM,IAAIC,MAAM,kBAClB,GAAC,CAAAT,IAAAA,OAAAU,MAAAA,WAAA,IAEMC,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,8EAkB8B,OAjB7BC,EAAe/B,OAAOgC,KAAKX,KAAKG,gBAAgBS,KAAI,SAACC,GAIzD,GAHAC,EAAKpB,yBAAyBoB,EAAKX,eAAeU,KAG7CC,EAAKX,eAAeU,GAAaE,iBAAkB,CACtD,IAAMC,EAAsBF,EAAKzB,YAAYb,YAC7C,IAAKwC,EAAoBtC,eAAgB,MAAML,EAAAA,0BAAAA,cAAwC,gDACvF,IAAMG,EAAc,QACfc,EAAAA,EAAAA,gBAAe0B,EAAoBtC,eAAgBsC,EAAoBvB,UACvEuB,GAELF,EAAKX,eAAeU,GAAaI,eAAezC,EACjD,CAGD,OAFAsC,EAAKX,eAAeU,GAAaK,mBAAmB,CAAEC,YAAaL,EAAKzB,YAAY8B,YAAa/C,SAAU0C,EAAKzB,YAAYjB,WAErH0C,EAAKX,eAAeU,GAAaO,KAAK,CAAEC,YAAaP,EAAK7B,gBAAkB4B,IAAeS,OAAM,SAACC,GAAC,OAAKhD,EAAAA,IAAAA,MAAUgD,E,GAC3H,IACAvB,KAAKC,OAAS9B,EAAAA,eAAAA,MAAqBqD,EAAAA,KAAAA,EAC7BC,QAAQC,IAAIhB,GAAa,2C,KAChC,kDAtBAF,IAsBA,CAAAV,IAAAA,mBAAAU,MAEM,SAAiBmB,GACtB3B,KAAK4B,wBACL,IAAMZ,EAAsBhB,KAAKX,YAAYb,YAE7C,IAAKwC,EAAoBtC,eAAgB,MAAML,EAAAA,0BAAAA,cAAwC,gDAGvF,GAD6B2B,KAAKG,eAAewB,EAAQE,MAC/B,MAAMxD,EAAAA,0BAAAA,sBAAsEsD,sBAAAA,OAAAA,EAAQE,KAAsB,oBACpI,GAAIF,EAAQG,mBAAqBC,EAAAA,mBAAAA,YAAiCJ,EAAQG,mBAAqBd,EAAoBtC,eACjH,MAAML,EAAAA,0BAAAA,2BAC8BsD,kCAAAA,OAAAA,EAAQG,iBAAyEd,0DAAAA,OAAAA,EAAoBtC,iBAa3I,OATEiD,EAAQG,mBAAqBC,EAAAA,mBAAAA,YAC7BJ,EAAQK,uBACRhB,EAAoBtC,iBAAmBiD,EAAQK,uBAG/CL,EAAQV,eAAeD,GAGzBhB,KAAKG,eAAewB,EAAQE,MAAQF,EAC7B3B,IACT,GAAC,CAAAF,IAAAA,aAAAU,MAEM,YACAtB,EAAAA,EAAAA,kBAAiBc,KAAKhB,WAC3BG,OAAOa,KAAKhB,SAASiD,WAAWrE,GAChCoC,KAAKf,cAAgB,KACvB,GAEA,CAAAa,IAAAA,YAAAU,MAAAA,WAAA,IAIA0B,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,EAAmBC,EAAiCC,GAAe,0EAC5DpC,KAAKG,eAAegC,GAAW,CAAAE,EAAAA,KAAAA,EAAA,YAC5BhE,EAAAA,0BAAAA,SAAmC,iCAAD,OAAkC8D,EAAuC,6CAAAE,EAAAA,KAAAA,EAC5FrC,KAAKG,eAAegC,GAAYG,QAAQF,GAAY,OAA7D,OAARhC,EAAW,EAAH,uBACPA,GAAQ,2C,KAChB,qDATDI,IASC,CAAAV,IAAAA,SAAAU,MAAAA,WAAA,IAED+B,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,MAAAC,EAAAA,UAAA,iEAA+D,GAAlDzE,EAAgCyE,EAAAA,OAAAA,QAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GAAAA,CAAEC,SAAS,GAClDzC,KAAKC,SAAW9B,EAAAA,eAAAA,WAA6B6B,KAAKE,qBAAoB,CAAAwC,EAAAA,KAAAA,EAAA,YAAQC,EAAAA,iBAAAA,kBAA4D,wCAAAD,EAAAA,KAAAA,EACxI1C,KAAKG,eAAeH,KAAKE,sBAAsB0C,WAAW7E,GAAQ,2C,KACzE,kDALAyC,IAKA,CAAAV,IAAAA,cAAAU,MAAAA,WAAA,IAEDqC,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,iEACyE,GAAvEtE,EAAAA,IAAAA,MAAU,oBAAqByB,KAAKC,OAAQD,KAAKE,sBAC7CF,KAAKC,SAAW9B,EAAAA,eAAAA,WAA6B6B,KAAKE,qBAAoB,CAAA4C,EAAAA,KAAAA,EAAA,YAAQH,EAAAA,iBAAAA,kBAA4D,wCACvIG,EAAAA,OAAAA,SAAAA,KAAK3C,eAAeH,KAAKE,sBAAsB6C,eAAa,2C,KACpE,kDANAvC,IAMA,CAAAV,IAAAA,mBAAAU,MAAAA,WAAA,IAEDwC,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,oEACMhD,KAAKC,SAAW9B,EAAAA,eAAAA,WAA6B6B,KAAKE,qBAAoB,CAAA+C,EAAAA,KAAAA,EAAA,YAAQN,EAAAA,iBAAAA,kBAA4D,wCACvIM,EAAAA,OAAAA,SAAAA,KAAK9C,eAAeH,KAAKE,sBAAsBgD,oBAAkB,2C,KACzE,kDALA1C,IAKA,CAAAV,IAAAA,YAAAU,MAAAA,WAAA,wBAEM,WAAgB2C,GAAe,qEAChCnD,KAAKoD,QAAQD,EAAOtB,MAAO,CAAFwB,EAAAA,KAAAA,EAAA,YAAQ,IAAI9C,MAAM,UAAD,OAAW4C,EAAOtB,KAAqB,6BACjFsB,EAAOG,kBAAoB7F,EAAkBE,YAAcwF,EAAOG,kBAAoBtD,KAAKX,YAAYb,YAAYE,eAAc,CAAA2E,EAAAA,KAAAA,EAAA,YAC7H,IAAI9C,MACkB4C,0BAAAA,OAAAA,EAAOG,gBAAe,2EAAmEtD,KAAKX,YAAYb,YAAYE,iBACjJ,OAEgC,OAAnCsB,KAAKoD,QAAQD,EAAOtB,MAAQsB,EAAOE,EAAAA,KAAAA,EAC7BF,EAAOI,iBAAiBvD,MAAK,gCAC5BA,MAAI,2C,KACZ,mDAZAQ,IAYA,CAAAV,IAAAA,2BAAAU,MAES,SAAyBgD,GAAgC,WACjEA,EAAcC,GAAGC,EAAAA,eAAAA,UAAwB,mCAAE,WAAOC,GAA0B,iEAIX,OAH/DC,EAAK3D,OAAS9B,EAAAA,eAAAA,UACdyF,EAAK1D,qBAAuByD,EAAKhC,QACjCiC,EAAKC,YAAYF,EAAKhC,SACtBpD,EAAAA,IAAAA,MAAU,YAAaqF,EAAK3D,OAAQ2D,EAAK1D,sBAAsB4D,EAAAA,KAAAA,EACzDrC,QAAQC,IACZ/C,OAAOC,OAAOgF,EAAKR,SAASxC,KAAI,SAACuC,GAC/B,OAAOA,EAAOb,UAAUhB,OAAM,SAACyC,GAEV,OAAfA,EAAMC,MAIVzF,EAAAA,IAAAA,MAAUwF,EACZ,GACF,KACD,OACDH,EAAKK,KAAKP,EAAAA,eAAAA,UAA0B,KAAKC,IAAgC,sC,KAC1E,kD,CAlBwC,IAoBzCH,EAAcC,GAAGC,EAAAA,eAAAA,aAA2B,mCAAE,WAAOC,GAAI,uEAUW,OARlEC,EAAK3D,OAAS9B,EAAAA,eAAAA,OACVe,EAAAA,EAAAA,kBAAiB0E,EAAK5E,WAClBC,EAAgBE,OAAOyE,EAAK5E,SAASI,QAAQxB,GAC/CgG,EAAK1D,uBAAyBjB,GAChC2E,EAAKM,cAIT3F,EAAAA,IAAAA,MAAU,eAAgBqF,EAAK3D,OAAQ2D,EAAK1D,sBAAsBiE,EAAAA,KAAAA,EAC5D1C,QAAQC,IACZ/C,OAAOC,OAAOgF,EAAKR,SAASxC,KAAI,SAACuC,GAC/B,OAAOA,EAAOP,aAAatB,OAAM,SAACyC,GAEb,OAAfA,EAAMC,MAIVzF,EAAAA,IAAAA,MAAUwF,EACZ,GACF,KACD,OACDH,EAAK1D,qBAAuB,KAC5B0D,EAAKK,KAAKP,EAAAA,eAAAA,aAA6BC,GAAM,sC,KAC9C,kD,CAzB2C,IA0B5CH,EAAcC,GAAGC,EAAAA,eAAAA,YAA2B,SAACC,GAC3CC,EAAK3D,OAAS9B,EAAAA,eAAAA,WACdyF,EAAKK,KAAKP,EAAAA,eAAAA,WAA2BC,GACrCpF,EAAAA,IAAAA,MAAU,aAAcqF,EAAK3D,OAAQ2D,EAAK1D,qBAC5C,IACAsD,EAAcC,GAAGC,EAAAA,eAAAA,SAAwB,SAACC,GACxCC,EAAK3D,OAAS9B,EAAAA,eAAAA,QACdyF,EAAKM,aACLN,EAAKK,KAAKP,EAAAA,eAAAA,QAAwBC,GAClCpF,EAAAA,IAAAA,MAAU,UAAWqF,EAAK3D,OAAQ2D,EAAK1D,qBACzC,IAEAsD,EAAcC,GAAGC,EAAAA,eAAAA,sBAAqC,SAACC,GACrDpF,EAAAA,IAAAA,MAAU,uBAAwBoF,GAClCC,EAAKK,KAAKP,EAAAA,eAAAA,qBAAqCC,EACjD,GACF,GAAC,CAAA7D,IAAAA,wBAAAU,MAES,WACR,GAAIR,KAAKC,SAAW9B,EAAAA,eAAAA,WAA2B,MAAME,EAAAA,0BAAAA,SAAmC,8BACxF,GAAI2B,KAAKC,SAAW9B,EAAAA,eAAAA,UAA0B,MAAME,EAAAA,0BAAAA,SAAmC,qBACvF,GAAI2B,KAAKC,SAAW9B,EAAAA,eAAAA,MAAsB,MAAME,EAAAA,0BAAAA,SAAmC,iCACrF,GAAC,CAAAyB,IAAAA,cAAAU,MAEO,SAAY2B,IACbjD,EAAAA,EAAAA,kBAAiBc,KAAKhB,WAC3BG,OAAOa,KAAKhB,SAASoF,QAAQxG,EAAmBuE,GAChDnC,KAAKf,cAAgBkD,EACvB,KAAC,EAvNuB,CAAQkC,EAAAA,I,WCzDrBC,EAAoD,CAC/D5F,eAAgBhB,EAAAA,iBAAAA,OAChB6G,UACGC,EAAAA,CAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,gBAAAA,aAA+B,CAC9BC,MAAO,eACPC,aAAa,EACbC,cAAc,EACdC,eAAe,KAEhBJ,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,gBAAAA,UAA4B,CAC3BC,MAAO,YACPC,aAAa,EACbC,cAAc,EACdC,eAAe,KAEhBJ,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,gBAAAA,QAA0B,CACzBC,MAAO,UACPC,aAAa,EACbC,cAAc,EACdC,eAAe,IAChB,IAIQC,EAAiD,CAC5DnG,eAAgBhB,EAAAA,iBAAAA,OAChB6G,UACGO,EAAAA,CAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,aAAAA,UAAyB,CACxBL,MAAO,eACPC,aAAa,EACbC,cAAc,EACdC,eAAe,KAEhBE,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,aAAAA,SAAwB,CACvBL,MAAO,WACPC,aAAa,EACbC,cAAc,EACdC,eAAe,KAEhBE,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,aAAAA,UAAyB,CACxBL,MAAO,YACPC,aAAa,EACbC,cAAc,EACdC,eAAe,KAEhBE,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,aAAAA,kBAAiC,CAChCL,MAAO,iBACPC,aAAa,EACbC,cAAc,EACdC,eAAe,IAChB,IAIQG,EAAsD,CACjErG,eAAgBhB,EAAAA,iBAAAA,OAChB6G,UACGC,EAAAA,EAAAA,GAAAA,CAAAA,EAAAA,EAAAA,gBAAAA,UAA4B,CAC3BC,MAAO,YACPC,aAAa,EACbC,cAAc,EACdC,eAAe,KAKRI,EAAmD,CAC9DtG,eAAgBhB,EAAAA,iBAAAA,OAChB6G,UACGO,EAAAA,EAAAA,GAAAA,CAAAA,EAAAA,EAAAA,aAAAA,UAAyB,CACxBL,MAAO,YACPC,aAAa,EACbC,cAAc,EACdC,eAAe,KAKRK,EAA+C,CAC1DvG,eAAgBhB,EAAAA,iBAAAA,MAChB6G,UACGO,EAAAA,EAAAA,GAAAA,CAAAA,EAAAA,EAAAA,aAAAA,UAAyB,CACxBL,MAAO,YACPC,aAAa,EACbC,cAAc,EACdC,eAAe,K,qkBCtFd,IAAMM,EAAuB,mCAAG,WAAOC,GAI7C,qHAC0C,GAAjCtD,EAAsCsD,EAAtCtD,KAAMuD,EAAgCD,EAAhCC,kBAAmBhH,EAAa+G,EAAb/G,SAC5BO,OAAOC,OAAOlB,EAAAA,kBAAkBmB,SAASuG,EAAkB1G,gBAAe,CAAA8C,EAAAA,KAAAA,EAAA,YACvE,IAAIjB,MAAM,2BAAD,OAA4B6E,EAAkB1G,iBAAiB,OAGnD,GAFvB2G,EAAmB,EAAH,MAChB/F,EAAAA,EAAAA,gBAAe8F,EAAkB1G,eAAiC,OAAjB0G,QAAAA,IAAAA,OAAAA,EAAAA,EAAmB3F,UACpE2F,GAAqB,CAAC,GAExBvD,IAASyD,EAAAA,gBAAAA,UAAyB,CAAA9D,EAAAA,KAAAA,GAAA,aAAAA,EAAAA,KAAAA,EACC,6EAAqC,OACS,OADT+D,EAAAA,EAAAA,KAAlEC,EAAkB,EAAlBA,mBACF7D,EAAU,IAAI6D,EAAmB,CAAEhH,YAAa6G,EAAkBjH,SAAAA,IAAW,kBAC5EuD,GAAO,WACLE,IAASyD,EAAAA,gBAAAA,aAA4B,CAAA9D,EAAAA,KAAAA,GAAA,aAAAA,EAAAA,KAAAA,GACR,6HAAwC,QACM,OADNiE,EAAAA,EAAAA,KAAtEC,EAAmB,EAAnBA,oBACF/D,EAAU,IAAI+D,EAAoB,CAAElH,YAAa6G,EAAkBjH,SAAAA,IAAW,kBAC7EuD,GAAO,WACLE,IAASyD,EAAAA,gBAAAA,SAAwB,CAAA9D,EAAAA,KAAAA,GAAA,aAAAA,EAAAA,KAAAA,GACR,gCAAoC,QACU,OADVmE,EAAAA,EAAAA,KAA9DC,EAAe,EAAfA,gBACFjE,EAAU,IAAIiE,EAAgB,CAAEpH,YAAa6G,EAAkBjH,SAAAA,IAAW,kBACzEuD,GAAO,WACLE,IAASyD,EAAAA,gBAAAA,QAAuB,CAAA9D,EAAAA,KAAAA,GAAA,aAAAA,EAAAA,KAAAA,GACR,oHAAmC,QACW,OADXqE,EAAAA,EAAAA,KAA5DC,EAAc,EAAdA,eACFnE,EAAU,IAAImE,EAAe,CAAEtH,YAAa6G,EAAkBjH,SAAAA,IAAW,kBACxEuD,GAAO,WACLE,IAASyD,EAAAA,gBAAAA,kBAAiC,CAAA9D,EAAAA,KAAAA,GAAA,aAAAA,EAAAA,KAAAA,GACV,sKAA6C,QACC,OADDuE,EAAAA,EAAAA,KAA9EC,EAAsB,EAAtBA,uBACFrE,EAAU,IAAIqE,EAAuB,CAAExH,YAAa6G,EAAkBjH,SAAAA,IAAW,kBAChFuD,GAAO,WACLE,IAASyD,EAAAA,gBAAAA,UAAyB,CAAA9D,EAAAA,KAAAA,GAAA,aAAAA,EAAAA,KAAAA,GACoB,gGAAqC,QAMlG,OANkGyE,EAAAA,EAAAA,KAA5FC,EAAgB,EAAhBA,iBAAkBC,EAA0B,EAA1BA,2BACpBC,EAAiBD,EAA2Bf,EAAkB1G,eAAiC,OAAjB0G,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmB3F,SACjGkC,EAAU,IAAIuE,EAAiB,EAAD,KAC/BE,GAAc,IACjB5H,YAAa,EAAF,KAAQ4H,EAAe5H,aAAe,CAAC,GAAO6G,GACzDgB,gBAAiB,EAAF,KAAQD,EAAeC,iBAAoC,IAAEjI,SAAAA,OAC5E,kBACKuD,GAAO,cAEV,IAAIpB,MAAM,+BAA8B,uC,KAC/C,gBA3CmC,sCCCvB+F,EAAc,CACzBC,GAAI,UACJC,GAAI,SACJC,GAAI,WACJC,GAAI,SACJC,GAAI,WACJC,GAAI,W,+/BCuEN,IAAaC,EAAS,aAAA/I,EAAAA,EAAAA,GAAAA,EAAAA,GAAA,WAOpB,WAAYC,GAAwB,aAAAC,EAAAA,EAAAA,GAAAA,KAAAA,GAClCC,EAAAA,EAAAA,KAAAA,KAAMF,IAASG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,kBAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,eAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,cAH0B2G,GAIzC5G,EAAKF,QAAeA,EAAAA,CAAAA,EAAAA,GACpB,IAAMiD,EAAsB/C,EAAKF,QAAQS,YACzC,GAAIwC,EAAoBtC,iBAAmBhB,EAAAA,iBAAAA,OAChB,WAArBK,EAAQ+I,SAEV7I,EAAK8I,YAAchC,EAGnB9G,EAAK8I,YAAczC,OAEhB,GAAItD,EAAoBtC,iBAAmBhB,EAAAA,iBAAAA,OACvB,WAArBK,EAAQ+I,SAEV7I,EAAK8I,YAAc/B,EAGnB/G,EAAK8I,YAAclC,MAEhB,IAAI7D,EAAoBtC,iBAAmBhB,EAAAA,iBAAAA,MAGhD,MAAM,IAAI6C,MAAM,oCAAD,OAAqCS,EAAoBtC,iBAFxET,EAAK8I,YAAc9B,CAGpB,CAGD,IAAM+B,EDtGqB,SAACA,GAC9B,IAAIC,EAAeD,EAMnB,OALKC,IAGHA,GADoB,qBAAX9H,SAA0BA,OAAO+H,UAAgCD,cAAgB9H,OAAO+H,UAAUC,WAAsB,SAClGC,MAAM,KAAK,IAErCzI,OAAO0I,UAAUC,eAAeC,KAAKjB,EAAaW,GAAgBA,EAAe,IAC1F,CC8F4BO,CAAqC,QAArB,IAAKzJ,QAAQ0J,gBAAQ,aAArBC,EAAuBV,iBAU5B,OARnC/I,EAAK0J,WAAa,IAAIC,EAAAA,GAAW,CAC/BC,MAA4B,QAAvB,EAAE5J,EAAKF,QAAQ0J,gBAAQ,aAArBK,EAAuBD,MAC9BE,SAAS,YAAKhK,QAAQ0J,gBAAb,eAAuBM,UAAW,GAC3CC,QAAS,GACTC,iBAAqBrI,EAAAA,EAAAA,GAAAA,GACrBsI,qBAAsBjK,EAAKF,QAAQmK,qBACnClB,gBAAAA,IAEF/I,EAAKkK,8BAA8B,CACrC,CA6MC,OA7MAtI,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAC,IAAAA,YAAAU,MAAAA,WAAA,wBAEM,WAAgB2E,GAAmE,0FAC1D,OAA9BiD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,wBAAAA,MAAAA,KAAAA,MAA8B1F,EAAAA,KAAAA,EACxB1C,KAAK2H,WAAWU,YAAW,OAwD/B,OAvDIrH,EAAsBhB,KAAKjC,QAAQS,YAGnC8J,GAAc,OAAI,IAAIC,IAAQ5J,GAAAA,QAAAA,EAAAA,EAAAA,GAAAA,OAAOgC,KAAKX,KAAK+G,YAAYxC,UAAY,CAAC,KAAE,OAAK5F,OAAOgC,KAAKX,KAAKG,oBAEhGqI,EAA+BF,EAAY1H,IAAG,mCAAC,WAAOC,GAAW,yFAoBrE,GAlBI4H,GAAgB,QAAI,IAAC1B,YAAYxC,gBAAjB,eAA4B1D,KAAgB,CAC9D4D,MAAO5D,EACP6D,aAAa,EACbC,cAAc,EACdC,eAAe,GAIbO,OAAAA,QAAAA,IAAAA,GAAA,QAAAA,EAAAA,EAAQ4B,mBAAR,SAAsBlG,KACxB4H,EAAgB,OAAKA,GAAkBtD,EAAO4B,YAAYlG,KAE3DC,EAAKiG,YAAYxC,SAAsD1D,GAAe4H,EAGjF9G,EAAUb,EAAKX,eAAeU,GACpCtC,EAAAA,IAAAA,MAAU,iBAAkBsC,EAAsC,QAA3B,EAAEC,EAAKiG,YAAYxC,gBAAQ,aAAzBmE,EAA4B7H,GAAa6D,YAAa/C,GAI1FA,GAAW,YAAKoF,YAAYxC,gBAAjB,UAA4B1D,GAAa6D,YAAW,CAAAlD,EAAAA,KAAAA,GAAA,aAAAA,EAAAA,KAAAA,EAEjD0D,EAAwB,CACvCrD,KAAMhB,EACNuE,kBAAmBtE,EAAK/C,QAAQS,YAChCJ,SAAU0C,EAAK/C,QAAQK,WACvB,OAEoC,OANhCuK,EAAK,EAAH,KAMR7H,EAAKX,eAAeU,GAAe8H,EAAG,kBAE/B9H,GAAW,YACTc,OAAAA,QAAAA,IAAAA,OAAAA,EAAAA,EAASiH,QAASC,EAAAA,iBAAAA,SAA2BlH,OAAAA,QAAAA,IAAAA,OAAAA,EAAAA,EAASiH,QAASC,EAAAA,iBAAAA,UAA6BhI,IAAgBC,EAAK7B,cAAa,CAAAuC,EAAAA,KAAAA,GAAA,SACzG,QAAzB,IAAKuF,YAAYxC,gBAAQ,OAAzBuE,EAA4BjI,GAAa6D,YAAa,CAAFlD,EAAAA,KAAAA,GAAA,wCAaxD,OAVDV,EAAKX,eAAeU,GAAaK,mBAAmB,CAAE9C,SAAU0C,EAAK/C,QAAQK,SAAU+C,YAAaL,EAAK/C,QAAQoD,cAI5GQ,EAAQZ,mBACLvC,EAAc,QACfc,EAAAA,EAAAA,gBAAe0B,EAAoBtC,eAA4C,QAA9B,EAAEoC,EAAKzB,YAAYb,mBAAW,aAA5BuK,EAA8BtJ,UACjFqB,EAAKzB,YAAYb,aAEtBsC,EAAKX,eAAeU,GAAaI,eAAezC,IACjD,kBAEMqC,GAAW,uC,KAErB,kD,CAlDmD,IAkDlD6B,EAAAA,KAAAA,EAEyBjB,QAAQC,IAAI8G,GAA6B,OAsCjC,OAtC7BQ,EAAe,EAAH,KACZC,EAAkBtK,OAAOC,OAAOoB,KAAKG,gBAAgB+I,MAAK,SAACvH,GAAW,MAC1E,GAAIA,EAAQiH,OAASC,EAAAA,iBAAAA,OAAyB,OAAO,EACrD,IAA4D,IAAxD/H,EAAKiG,YAAYxC,SAAS5C,EAAQE,MAAM6C,YAAsB,OAAO,EACzE,IAAK5D,EAAKiG,YAAYxC,SAAS5C,EAAQE,MAAMsH,aAAc,OAAO,EAClE,IAAMC,GAAqBC,EAAAA,EAAAA,IACzB1H,EAAQE,KACRf,EAAKX,eAAewB,EAAQE,MAC3B,QADgC,EAChCf,EAAKiG,YAAYxC,SAAsD5C,EAAQE,aAA/E,eAAsFsH,cAEzF,QAAIxK,OAAOC,OAAOwK,GAAoBF,MAAK,SAACI,GAAM,OAAKA,EAAO5E,W,GAEhE,IACAnG,EAAAA,IAAAA,MAAU0K,EAAiBjJ,KAAKG,eAAgB,mBAE1CO,EAAesI,EAAapI,IAAG,mCAAC,WAAOC,GAAW,0EACjDA,EAAa,CAAFwB,EAAAA,KAAAA,EAAA,uCAGd,GAHcA,EAAAA,KAAAA,EAERV,EAAUb,EAAKX,eAAeU,GAEhCC,EAAK7B,gBAAkB4B,GAAec,EAAQiH,OAASC,EAAAA,iBAAAA,SAAyB,CAAAxG,EAAAA,KAAAA,EAAA,uCAM7C,GAAvCvB,EAAKpB,yBAAyBiC,GAC1BA,EAAQ1B,SAAW9B,EAAAA,eAAAA,UAAwB,CAAAkE,EAAAA,KAAAA,GAAA,aAAAA,EAAAA,KAAAA,GAAQV,EAAQP,KAAK,CAAEC,YAAaP,EAAK7B,gBAAkB4B,IAAc,QAGpHc,EAAQiH,OAASC,EAAAA,iBAAAA,QACnB/H,EAAKyI,sBAAsB1I,GAC5BwB,EAAAA,KAAAA,GAAA,cAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAED9D,EAAAA,IAAAA,MAAiB8D,EAAAA,GAAAA,oCAAoC,qD,KAExD,kD,CArBoC,IAuBrCrC,KAAKC,OAAS9B,EAAAA,eAAAA,MAAqBuE,EAAAA,KAAAA,GAC7BjB,QAAQC,IAAIhB,GAAa,QAW/B,IATM8I,EAAqBlB,EAAYY,MAAK,SAACrI,GAAe,QAC1D,OAAO,YAAKV,eAAeU,UAApB,eAAkC+H,QAASC,EAAAA,iBAAAA,WAAsD,QAAzB,IAAK9B,YAAYxC,gBAAQ,aAAzBkF,EAA4B5I,GAAa6D,YAC1H,MAGE1E,KAAK2H,WAAW+B,8BAKbT,IAAmBO,EAAkB,CAAA9G,EAAAA,KAAAA,GAAA,aAAAA,EAAAA,KAAAA,GAElC1C,KAAK2J,4BAA2B,EAAO,CAAEC,yBAAyB,IAAO,4C,KAElF,mDArHApJ,IAqHA,CAAAV,IAAAA,UAAAU,MAAAA,WAAA,IAEMqJ,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,gFAGD7J,KAAKI,SAAU,CAAF0C,EAAAA,KAAAA,EAAA,aAASA,EAAAA,OAAAA,SAAAA,KAAK1C,UAAQ,OAChB,OAAvBJ,KAAK2H,WAAWmC,OAAO,kBAChB,IAAIrI,SAAQ,SAACsI,EAASC,GAC3BpG,EAAKqG,KAAKvG,EAAAA,eAAAA,WAA0B,WAClC,OAAOqG,EAAQnG,EAAKxD,SACtB,IACAwD,EAAKqG,KAAKvG,EAAAA,eAAAA,SAAwB,SAACwG,GACjC,OAAOF,EAAOE,EAChB,GACF,KAAE,2C,KACH,kDAfA1J,IAeA,CAAAV,IAAAA,6BAAAU,MAAAA,WAAA,IAEO2J,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,EAAiCC,EAAqCrM,GAA8C,kFACtHqM,EAA4B,CAAF/G,EAAAA,KAAAA,EAAA,uCACxBgH,EAAoD,CAAC,EAC3D1L,OAAOgC,KAAKX,KAAKG,gBAAgBmK,QAAO,mCAAC,WAAOzJ,GAAW,uEACT,IACrC,QADLc,EAAU4I,EAAKpK,eAAeU,UACzB,IAAPc,OAAO,EAAPA,EAASiH,QAASC,EAAAA,iBAAAA,SAAyB,CAAA5F,EAAAA,KAAAA,EAAA,MAG7C,GAFA1E,EAAAA,IAAAA,MAAU,uBAAwBgM,EAAKtL,cAAe4B,GACtD0J,EAAK7K,yBAAyBiC,GAE1B4I,EAAKtL,gBAAkB4B,EAAW,CAAAoC,EAAAA,KAAAA,EAAA,0CAGlCtB,EAAQ1B,SAAW9B,EAAAA,eAAAA,UAAwB,CAAA8E,EAAAA,KAAAA,EAAA,aAAAA,EAAAA,KAAAA,EACvCtB,EACHP,KAAK,CAAEC,YAAakJ,EAAKtL,gBAAkB4B,IAC3C2J,MAAK,WACJH,EAAexJ,GAAgB0J,EAAKxD,YAAYxC,SAAsD1D,GACtG0J,EAAK5C,WAAW8C,gBAAgBJ,EAAgB,CAAET,0BAAkC,OAAP7L,QAAO,IAAPA,IAAAA,EAAS6L,0BAExF,IACCtI,OAAM,SAACyC,GAAK,OAAKxF,EAAAA,IAAAA,MAAUwF,EAAO,mC,IAAoC,sC,KAE9E,kD,CAnBuC,IAmBrC,2C,KACJ,qDAzBAvD,IAyBA,CAAAV,IAAAA,wBAAAU,MAEO,SAAsBK,GAE2C,SADvEtC,EAAAA,IAAAA,KAAS,qBAAsBsC,GAC3Bb,KAAKG,eAAeU,GAAa+H,OAASC,EAAAA,iBAAAA,SAC5C7I,KAAK2H,WAAW+C,gBACd7J,GACAwI,EAAAA,EAAAA,IACExI,EACAb,KAAKG,eAAeU,GACnB,QAD+B,EAC/Bb,KAAK+G,YAAYxC,SAAsD1D,UAAvE,eAAqFsI,eAEnE,QAArB,EAAAnJ,KAAKjC,QAAQ0J,gBAAQ,aAArBkD,EAAuBC,oBAAqBC,EAAAA,GAGlD,GAAC,CAAA/K,IAAAA,8BAAAU,MAEO,WAA2B,WACjCR,KAAK2H,WAAWlE,GAAGqH,EAAAA,GAAAA,MAAwB,mCAAE,WAAO3F,GAA8D,wEAAArB,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAExGiH,EAAKC,UAAmB7F,EAAOxD,QAASwD,EAAO/C,aAAY,OAAA0B,EAAAA,KAAAA,EAAA,aAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAEjEvF,EAAAA,IAAAA,MAAU,sCAAD,OAAuC4G,EAAOxD,SAAiB,MAAC,mD,KAE5E,kD,CAN0C,IAO3C3B,KAAK2H,WAAWlE,GAAGqH,EAAAA,GAAAA,sBAAwC,mCAAE,WAAO3F,GAA+C,wEAAAhB,EAAAA,KAAAA,EAC3G4G,EAAKpB,2BAA2BxE,EAAOiF,4BAA2B,sC,KACzE,kD,CAF0D,IAG3DpK,KAAK2H,WAAWlE,GAAGqH,EAAAA,GAAAA,YAA+BG,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,wEAAAC,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAExCH,EAAKI,SAAQ,OAAAD,EAAAA,KAAAA,EAAA,aAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAEnB3M,EAAAA,IAAAA,MAA6C,kCAAC,yDAGlDyB,KAAK2H,WAAWlE,GAAGqH,EAAAA,GAAAA,iBAAmC,mCAAE,WAAOM,GAAmB,yEAIhF,GAHA7M,EAAAA,IAAAA,MAAU,yBAA0B6M,GACpCL,EAAK9G,KAAK6G,EAAAA,GAAAA,iBAAqCM,GACzCC,EAAsB,QAAH,EAAGN,EAAK5K,eAAemF,EAAAA,gBAAAA,0BAApB,eAAwDrF,OAChFmL,GAAcC,IAAwBlN,EAAAA,eAAAA,MAExC,IACE4M,EAAK5K,eAAemF,EAAAA,gBAAAA,mBAAmChD,SAGxD,CAFC,MAAOyB,GACPxF,EAAAA,IAAAA,MAAiEwF,sDAAAA,EAClE,CACF,sC,KACF,kD,CAZqD,GAaxD,KAAC,EA1PmB,CAAQlG,E","sources":["../node_modules/@web3auth/base-plugin/src/IPlugin.ts","../node_modules/@web3auth/core/src/core.ts","../node_modules/@web3auth/modal/src/config.ts","../node_modules/@web3auth/modal/src/default.ts","../node_modules/@web3auth/modal/src/utils.ts","../node_modules/@web3auth/modal/src/modalManager.ts"],"sourcesContent":["import { CHAIN_NAMESPACES, IWeb3Auth, SafeEventEmitterProvider, UserInfo } from \"@web3auth/base\";\n\nexport const PLUGIN_NAMESPACES = {\n  ...CHAIN_NAMESPACES,\n  MULTICHAIN: \"multichain\",\n} as const;\n\nexport type PluginNamespace = typeof PLUGIN_NAMESPACES[keyof typeof PLUGIN_NAMESPACES];\n\nexport interface IPlugin {\n  name: string;\n  pluginNamespace: PluginNamespace;\n  initWithProvider(provider: SafeEventEmitterProvider, userInfo: UserInfo): Promise<void>;\n  initWithWeb3Auth(web3auth: IWeb3Auth): Promise<void>;\n  connect(): Promise<void>;\n  disconnect(): Promise<void>;\n}\n","import { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\nimport {\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  CHAIN_NAMESPACES,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  IAdapter,\n  IWeb3Auth,\n  log,\n  SafeEventEmitterProvider,\n  storageAvailable,\n  UserAuthInfo,\n  UserInfo,\n  WALLET_ADAPTER_TYPE,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { IPlugin, PLUGIN_NAMESPACES } from \"@web3auth/base-plugin\";\n\nexport interface Web3AuthCoreOptions {\n  /**\n   * Client id for web3auth.\n   * You can obtain your client id from the web3auth developer dashboard.\n   * You can set any random string for this on localhost.\n   */\n  clientId: string;\n  /**\n   * custom chain configuration for chainNamespace\n   *\n   * @defaultValue mainnet config of provided chainNamespace\n   */\n  chainConfig: Partial<CustomChainConfig> & Pick<CustomChainConfig, \"chainNamespace\">;\n\n  /**\n   * setting to true will enable logs\n   *\n   * @defaultValue false\n   */\n  enableLogging?: boolean;\n  /**\n   * setting to \"local\" will persist social login session accross browser tabs.\n   *\n   * @defaultValue \"local\"\n   */\n  storageKey?: \"session\" | \"local\";\n\n  /**\n   * sessionTime (in seconds) for idToken issued by Web3Auth for server side verification.\n   * @defaultValue 86400\n   *\n   * Note: max value can be 7 days (86400 * 7) and min can be  1 day (86400)\n   */\n  sessionTime?: number;\n}\n\nconst ADAPTER_CACHE_KEY = \"Web3Auth-cachedAdapter\";\nexport class Web3AuthCore extends SafeEventEmitter implements IWeb3Auth {\n  readonly coreOptions: Web3AuthCoreOptions;\n\n  public connectedAdapterName: string | null = null;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public cachedAdapter: string | null = null;\n\n  protected walletAdapters: Record<string, IAdapter<unknown>> = {};\n\n  private plugins: Record<string, IPlugin> = {};\n\n  private storage: \"sessionStorage\" | \"localStorage\" = \"localStorage\";\n\n  constructor(options: Web3AuthCoreOptions) {\n    super();\n    if (!options.clientId) throw WalletInitializationError.invalidParams(\"Please provide a valid clientId in constructor\");\n    if (options.enableLogging) log.enableAll();\n    else log.disableAll();\n    if (!options.chainConfig?.chainNamespace || !Object.values(CHAIN_NAMESPACES).includes(options.chainConfig?.chainNamespace))\n      throw WalletInitializationError.invalidParams(\"Please provide a valid chainNamespace in chainConfig\");\n    if (options.storageKey === \"session\") this.storage = \"sessionStorage\";\n    this.cachedAdapter = storageAvailable(this.storage) ? window[this.storage].getItem(ADAPTER_CACHE_KEY) : null;\n\n    this.coreOptions = {\n      ...options,\n      chainConfig: {\n        ...(getChainConfig(options.chainConfig?.chainNamespace, options.chainConfig?.chainId) || {}),\n        ...options.chainConfig,\n      },\n    };\n    this.subscribeToAdapterEvents = this.subscribeToAdapterEvents.bind(this);\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.connectedAdapterName) {\n      const adapter = this.walletAdapters[this.connectedAdapterName];\n      return adapter.provider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  public async init(): Promise<void> {\n    const initPromises = Object.keys(this.walletAdapters).map((adapterName) => {\n      this.subscribeToAdapterEvents(this.walletAdapters[adapterName]);\n      // if adapter doesn't have any chain config yet thn set it based on provided namespace and chainId.\n      // if no chainNamespace or chainId is being provided, it will connect with mainnet.\n      if (!this.walletAdapters[adapterName].chainConfigProxy) {\n        const providedChainConfig = this.coreOptions.chainConfig;\n        if (!providedChainConfig.chainNamespace) throw WalletInitializationError.invalidParams(\"Please provide chainNamespace in chainConfig\");\n        const chainConfig = {\n          ...getChainConfig(providedChainConfig.chainNamespace, providedChainConfig.chainId),\n          ...providedChainConfig,\n        } as CustomChainConfig;\n        this.walletAdapters[adapterName].setChainConfig(chainConfig);\n      }\n      this.walletAdapters[adapterName].setAdapterSettings({ sessionTime: this.coreOptions.sessionTime, clientId: this.coreOptions.clientId });\n\n      return this.walletAdapters[adapterName].init({ autoConnect: this.cachedAdapter === adapterName }).catch((e) => log.error(e));\n    });\n    this.status = ADAPTER_STATUS.READY;\n    await Promise.all(initPromises);\n  }\n\n  public configureAdapter(adapter: IAdapter<unknown>): Web3AuthCore {\n    this.checkInitRequirements();\n    const providedChainConfig = this.coreOptions.chainConfig;\n\n    if (!providedChainConfig.chainNamespace) throw WalletInitializationError.invalidParams(\"Please provide chainNamespace in chainConfig\");\n\n    const adapterAlreadyExists = this.walletAdapters[adapter.name];\n    if (adapterAlreadyExists) throw WalletInitializationError.duplicateAdapterError(`Wallet adapter for ${adapter.name} already exists`);\n    if (adapter.adapterNamespace !== ADAPTER_NAMESPACES.MULTICHAIN && adapter.adapterNamespace !== providedChainConfig.chainNamespace)\n      throw WalletInitializationError.incompatibleChainNameSpace(\n        `This wallet adapter belongs to ${adapter.adapterNamespace} which is incompatible with currently used namespace: ${providedChainConfig.chainNamespace}`\n      );\n\n    if (\n      adapter.adapterNamespace === ADAPTER_NAMESPACES.MULTICHAIN &&\n      adapter.currentChainNamespace &&\n      providedChainConfig.chainNamespace !== adapter.currentChainNamespace\n    ) {\n      // chainConfig checks are already validated in constructor so using typecast is safe here.\n      adapter.setChainConfig(providedChainConfig as CustomChainConfig);\n    }\n\n    this.walletAdapters[adapter.name] = adapter;\n    return this;\n  }\n\n  public clearCache() {\n    if (!storageAvailable(this.storage)) return;\n    window[this.storage].removeItem(ADAPTER_CACHE_KEY);\n    this.cachedAdapter = null;\n  }\n\n  /**\n   * Connect to a specific wallet adapter\n   * @param walletName - Key of the walletAdapter to use.\n   */\n  async connectTo<T>(walletName: WALLET_ADAPTER_TYPE, loginParams?: T): Promise<SafeEventEmitterProvider | null> {\n    if (!this.walletAdapters[walletName])\n      throw WalletInitializationError.notFound(`Please add wallet adapter for ${walletName} wallet, before connecting`);\n    const provider = await this.walletAdapters[walletName].connect(loginParams);\n    return provider;\n  }\n\n  async logout(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED || !this.connectedAdapterName) throw WalletLoginError.notConnectedError(`No wallet is connected`);\n    await this.walletAdapters[this.connectedAdapterName].disconnect(options);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    log.debug(\"Getting user info\", this.status, this.connectedAdapterName);\n    if (this.status !== ADAPTER_STATUS.CONNECTED || !this.connectedAdapterName) throw WalletLoginError.notConnectedError(`No wallet is connected`);\n    return this.walletAdapters[this.connectedAdapterName].getUserInfo();\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED || !this.connectedAdapterName) throw WalletLoginError.notConnectedError(`No wallet is connected`);\n    return this.walletAdapters[this.connectedAdapterName].authenticateUser();\n  }\n\n  public async addPlugin(plugin: IPlugin): Promise<IWeb3Auth> {\n    if (this.plugins[plugin.name]) throw new Error(`Plugin ${plugin.name} already exist`);\n    if (plugin.pluginNamespace !== PLUGIN_NAMESPACES.MULTICHAIN && plugin.pluginNamespace !== this.coreOptions.chainConfig.chainNamespace)\n      throw new Error(\n        `This plugin belongs to ${plugin.pluginNamespace} namespace which is incompatible with currently used namespace: ${this.coreOptions.chainConfig.chainNamespace}`\n      );\n\n    this.plugins[plugin.name] = plugin;\n    await plugin.initWithWeb3Auth(this);\n    return this;\n  }\n\n  protected subscribeToAdapterEvents(walletAdapter: IAdapter<unknown>): void {\n    walletAdapter.on(ADAPTER_EVENTS.CONNECTED, async (data: CONNECTED_EVENT_DATA) => {\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.connectedAdapterName = data.adapter;\n      this.cacheWallet(data.adapter);\n      log.debug(\"connected\", this.status, this.connectedAdapterName);\n      await Promise.all(\n        Object.values(this.plugins).map((plugin) => {\n          return plugin.connect().catch((error: Web3AuthError) => {\n            // swallow error if connector adapter doesn't supports this plugin.\n            if (error.code === 5211) {\n              return;\n            }\n            // throw error;\n            log.error(error);\n          });\n        })\n      );\n      this.emit(ADAPTER_EVENTS.CONNECTED, { ...data } as CONNECTED_EVENT_DATA);\n    });\n\n    walletAdapter.on(ADAPTER_EVENTS.DISCONNECTED, async (data) => {\n      // get back to ready state for rehydrating.\n      this.status = ADAPTER_STATUS.READY;\n      if (storageAvailable(this.storage)) {\n        const cachedAdapter = window[this.storage].getItem(ADAPTER_CACHE_KEY);\n        if (this.connectedAdapterName === cachedAdapter) {\n          this.clearCache();\n        }\n      }\n\n      log.debug(\"disconnected\", this.status, this.connectedAdapterName);\n      await Promise.all(\n        Object.values(this.plugins).map((plugin) => {\n          return plugin.disconnect().catch((error: Web3AuthError) => {\n            // swallow error if adapter doesn't supports this plugin.\n            if (error.code === 5211) {\n              return;\n            }\n            // throw error;\n            log.error(error);\n          });\n        })\n      );\n      this.connectedAdapterName = null;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED, data);\n    });\n    walletAdapter.on(ADAPTER_EVENTS.CONNECTING, (data) => {\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, data);\n      log.debug(\"connecting\", this.status, this.connectedAdapterName);\n    });\n    walletAdapter.on(ADAPTER_EVENTS.ERRORED, (data) => {\n      this.status = ADAPTER_STATUS.ERRORED;\n      this.clearCache();\n      this.emit(ADAPTER_EVENTS.ERRORED, data);\n      log.debug(\"errored\", this.status, this.connectedAdapterName);\n    });\n\n    walletAdapter.on(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, (data) => {\n      log.debug(\"adapter data updated\", data);\n      this.emit(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, data);\n    });\n  }\n\n  protected checkInitRequirements(): void {\n    if (this.status === ADAPTER_STATUS.CONNECTING) throw WalletInitializationError.notReady(\"Already pending connection\");\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletInitializationError.notReady(\"Already connected\");\n    if (this.status === ADAPTER_STATUS.READY) throw WalletInitializationError.notReady(\"Adapter is already initialized\");\n  }\n\n  private cacheWallet(walletName: string) {\n    if (!storageAvailable(this.storage)) return;\n    window[this.storage].setItem(ADAPTER_CACHE_KEY, walletName);\n    this.cachedAdapter = walletName;\n  }\n}\n","import { CHAIN_NAMESPACES, EVM_ADAPTERS, SOLANA_ADAPTERS } from \"@web3auth/base\";\n\nimport { AdaptersModalConfig } from \"./interface\";\n\nexport const defaultSolanaDappModalConfig: AdaptersModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.TORUS_SOLANA]: {\n      label: \"Torus Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n    [SOLANA_ADAPTERS.PHANTOM]: {\n      label: \"Phantom\",\n      showOnModal: true,\n      showOnMobile: false,\n      showOnDesktop: true,\n    },\n  },\n};\n\nexport const defaultEvmDappModalConfig: AdaptersModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.TORUS_EVM]: {\n      label: \"Torus Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n    [EVM_ADAPTERS.METAMASK]: {\n      label: \"MetaMask\",\n      showOnModal: true,\n      showOnMobile: false,\n      showOnDesktop: true,\n    },\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n    [EVM_ADAPTERS.WALLET_CONNECT_V1]: {\n      label: \"Wallet Connect\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n  },\n};\n\nexport const defaultSolanaWalletModalConfig: AdaptersModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n  },\n};\n\nexport const defaultEvmWalletModalConfig: AdaptersModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n  },\n};\n\nexport const defaultOtherModalConfig: AdaptersModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.OTHER,\n  adapters: {\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n  },\n};\n","import type { OpenLoginOptions } from \"@toruslabs/openlogin\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, getChainConfig, IAdapter, WALLET_ADAPTER_TYPE, WALLET_ADAPTERS } from \"@web3auth/base\";\n\nexport const getDefaultAdapterModule = async (params: {\n  name: WALLET_ADAPTER_TYPE;\n  clientId: string;\n  customChainConfig: Partial<CustomChainConfig> & Pick<CustomChainConfig, \"chainNamespace\">;\n}): Promise<IAdapter<unknown>> => {\n  const { name, customChainConfig, clientId } = params;\n  if (!Object.values(CHAIN_NAMESPACES).includes(customChainConfig.chainNamespace))\n    throw new Error(`Invalid chainNamespace: ${customChainConfig.chainNamespace}`);\n  const finalChainConfig = {\n    ...(getChainConfig(customChainConfig.chainNamespace, customChainConfig?.chainId) as CustomChainConfig),\n    ...(customChainConfig || {}),\n  };\n  if (name === WALLET_ADAPTERS.TORUS_EVM) {\n    const { TorusWalletAdapter } = await import(\"@web3auth/torus-evm-adapter\");\n    const adapter = new TorusWalletAdapter({ chainConfig: finalChainConfig, clientId });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.TORUS_SOLANA) {\n    const { SolanaWalletAdapter } = await import(\"@web3auth/torus-solana-adapter\");\n    const adapter = new SolanaWalletAdapter({ chainConfig: finalChainConfig, clientId });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.METAMASK) {\n    const { MetamaskAdapter } = await import(\"@web3auth/metamask-adapter\");\n    const adapter = new MetamaskAdapter({ chainConfig: finalChainConfig, clientId });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.PHANTOM) {\n    const { PhantomAdapter } = await import(\"@web3auth/phantom-adapter\");\n    const adapter = new PhantomAdapter({ chainConfig: finalChainConfig, clientId });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.WALLET_CONNECT_V1) {\n    const { WalletConnectV1Adapter } = await import(\"@web3auth/wallet-connect-v1-adapter\");\n    const adapter = new WalletConnectV1Adapter({ chainConfig: finalChainConfig, clientId });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.OPENLOGIN) {\n    const { OpenloginAdapter, getOpenloginDefaultOptions } = await import(\"@web3auth/openlogin-adapter\");\n    const defaultOptions = getOpenloginDefaultOptions(customChainConfig.chainNamespace, customChainConfig?.chainId);\n    const adapter = new OpenloginAdapter({\n      ...defaultOptions,\n      chainConfig: { ...(defaultOptions.chainConfig || {}), ...finalChainConfig },\n      adapterSettings: { ...(defaultOptions.adapterSettings as OpenLoginOptions), clientId },\n    });\n    return adapter;\n  }\n  throw new Error(\"Invalid wallet adapter name\");\n};\n","interface NavigatorLanguage {\n  userLanguage?: string;\n}\n\nexport const languageMap = {\n  en: \"english\",\n  de: \"german\",\n  ja: \"japanese\",\n  ko: \"korean\",\n  zh: \"mandarin\",\n  es: \"spanish\",\n};\n\nexport const getUserLanguage = (defaultLanguage: string | undefined) => {\n  let userLanguage = defaultLanguage;\n  if (!userLanguage) {\n    const browserLanguage =\n      typeof window !== \"undefined\" ? (window.navigator as NavigatorLanguage).userLanguage || window.navigator.language || \"en-US\" : \"en-US\";\n    userLanguage = browserLanguage.split(\"-\")[0];\n  }\n  return Object.prototype.hasOwnProperty.call(languageMap, userLanguage) ? userLanguage : \"en\";\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  BaseAdapterConfig,\n  CHAIN_NAMESPACES,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  WALLET_ADAPTER_TYPE,\n  WALLET_ADAPTERS,\n} from \"@web3auth/base\";\nimport { Web3AuthCore, Web3AuthCoreOptions } from \"@web3auth/core\";\nimport { getAdapterSocialLogins, LOGIN_MODAL_EVENTS, LoginModal, OPENLOGIN_PROVIDERS } from \"@web3auth/ui\";\n\nimport {\n  defaultEvmDappModalConfig,\n  defaultEvmWalletModalConfig,\n  defaultOtherModalConfig,\n  defaultSolanaDappModalConfig,\n  defaultSolanaWalletModalConfig,\n} from \"./config\";\nimport { getDefaultAdapterModule } from \"./default\";\nimport { AdaptersModalConfig, ModalConfig } from \"./interface\";\nimport { getUserLanguage } from \"./utils\";\n\nexport interface UIConfig {\n  /**\n   * Logo for your app.\n   */\n  appLogo?: string;\n\n  /**\n   * theme for the modal\n   *\n   * @defaultValue `light`\n   */\n  theme?: \"light\" | \"dark\";\n\n  /**\n   * order of how login methods are shown\n   *\n   * @defaultValue `[\"google\", \"facebook\", \"twitter\", \"reddit\", \"discord\", \"twitch\", \"apple\", \"line\", \"github\", \"kakao\", \"linkedin\", \"weibo\", \"wechat\", \"email_passwordless\"]`\n   */\n  loginMethodsOrder?: string[];\n\n  /**\n   * language which will be used by web3auth. app will use browser language if not specified. if language is not supported it will use \"en\"\n   * en: english\n   * de: german\n   * ja: japanese\n   * ko: korean\n   * zh: mandarin\n   * es: spanish\n   *\n   */\n  defaultLanguage?: string;\n}\nexport interface Web3AuthOptions extends Web3AuthCoreOptions {\n  /**\n   * web3auth instance provides different adapters for different type of usages. If you are dapp and want to\n   * use external wallets like metamask, then you can use the `DAPP` authMode.\n   * If you are a wallet and only want to use you own wallet implementations along with openlogin,\n   * then you should use `WALLET` authMode.\n   *\n   * @defaultValue `DAPP`\n   */\n  authMode?: \"DAPP\" | \"WALLET\";\n  /**\n   * Config for configuring modal ui display properties\n   */\n  uiConfig?: UIConfig;\n\n  /**\n   * Whether to show errors on Web3Auth modal.\n   *\n   * @defaultValue `true`\n   */\n  displayErrorsOnModal?: boolean;\n}\nexport class Web3Auth extends Web3AuthCore {\n  public loginModal: LoginModal;\n\n  readonly options: Web3AuthOptions;\n\n  private modalConfig: AdaptersModalConfig = defaultEvmDappModalConfig;\n\n  constructor(options: Web3AuthOptions) {\n    super(options);\n    this.options = { ...options };\n    const providedChainConfig = this.options.chainConfig;\n    if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      if (options.authMode === \"WALLET\") {\n        // default config for solana wallet modal\n        this.modalConfig = defaultSolanaWalletModalConfig;\n      } else {\n        // default config for solana dapp modal\n        this.modalConfig = defaultSolanaDappModalConfig;\n      }\n    } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.EIP155) {\n      if (options.authMode === \"WALLET\") {\n        // default config for evm wallet modal\n        this.modalConfig = defaultEvmWalletModalConfig;\n      } else {\n        // default config for evm dapp modal\n        this.modalConfig = defaultEvmDappModalConfig;\n      }\n    } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.modalConfig = defaultOtherModalConfig;\n    } else {\n      throw new Error(`Invalid chainNamespace provided: ${providedChainConfig.chainNamespace}`);\n    }\n\n    // get userLanguage\n    const defaultLanguage = getUserLanguage(this.options.uiConfig?.defaultLanguage);\n\n    this.loginModal = new LoginModal({\n      theme: this.options.uiConfig?.theme,\n      appLogo: this.options.uiConfig?.appLogo || \"\",\n      version: \"\",\n      adapterListener: this,\n      displayErrorsOnModal: this.options.displayErrorsOnModal,\n      defaultLanguage,\n    });\n    this.subscribeToLoginModalEvents();\n  }\n\n  public async initModal(params?: { modalConfig?: Record<WALLET_ADAPTER_TYPE, ModalConfig> }): Promise<void> {\n    super.checkInitRequirements();\n    await this.loginModal.initModal();\n    const providedChainConfig = this.options.chainConfig;\n\n    // merge default adapters with the custom configured adapters.\n    const allAdapters = [...new Set([...Object.keys(this.modalConfig.adapters || {}), ...Object.keys(this.walletAdapters)])];\n\n    const adapterConfigurationPromises = allAdapters.map(async (adapterName) => {\n      // start with the default config of adapter.\n      let adapterConfig = this.modalConfig.adapters?.[adapterName] || {\n        label: adapterName,\n        showOnModal: true,\n        showOnMobile: true,\n        showOnDesktop: true,\n      };\n\n      // override the default config of adapter if some config is being provided by the user.\n      if (params?.modalConfig?.[adapterName]) {\n        adapterConfig = { ...adapterConfig, ...params.modalConfig[adapterName] };\n      }\n      (this.modalConfig.adapters as Record<WALLET_ADAPTER_TYPE, ModalConfig>)[adapterName] = adapterConfig as ModalConfig;\n\n      // check if adapter is configured/added by user and exist in walletAdapters map.\n      const adapter = this.walletAdapters[adapterName];\n      log.debug(\"adapter config\", adapterName, this.modalConfig.adapters?.[adapterName].showOnModal, adapter);\n\n      // if adapter is not custom configured then check if it is available in default adapters.\n      // and if adapter is not hidden by user\n      if (!adapter && this.modalConfig.adapters?.[adapterName].showOnModal) {\n        // if adapter is not configured and some default configuration is available, use it.\n        const ad = await getDefaultAdapterModule({\n          name: adapterName,\n          customChainConfig: this.options.chainConfig,\n          clientId: this.options.clientId,\n        });\n\n        this.walletAdapters[adapterName] = ad;\n\n        return adapterName;\n      } else if (adapter?.type === ADAPTER_CATEGORY.IN_APP || adapter?.type === ADAPTER_CATEGORY.EXTERNAL || adapterName === this.cachedAdapter) {\n        if (!this.modalConfig.adapters?.[adapterName].showOnModal) return;\n        // add client id to adapter, same web3auth client id can be used in adapter.\n        // this id is being overridden if user is also passing client id in adapter's constructor.\n        this.walletAdapters[adapterName].setAdapterSettings({ clientId: this.options.clientId, sessionTime: this.options.sessionTime });\n\n        // if adapter doesn't have any chainConfig then we will set the chainConfig based of passed chainNamespace\n        // and chainNamespace.\n        if (!adapter.chainConfigProxy) {\n          const chainConfig = {\n            ...getChainConfig(providedChainConfig.chainNamespace, this.coreOptions.chainConfig?.chainId),\n            ...this.coreOptions.chainConfig,\n          } as CustomChainConfig;\n          this.walletAdapters[adapterName].setChainConfig(chainConfig);\n        }\n\n        return adapterName;\n      }\n    });\n\n    const adapterNames = await Promise.all(adapterConfigurationPromises);\n    const hasInAppWallets = Object.values(this.walletAdapters).some((adapter) => {\n      if (adapter.type !== ADAPTER_CATEGORY.IN_APP) return false;\n      if (this.modalConfig.adapters[adapter.name].showOnModal !== true) return false;\n      if (!this.modalConfig.adapters[adapter.name].loginMethods) return true;\n      const mergedLoginMethods = getAdapterSocialLogins(\n        adapter.name,\n        this.walletAdapters[adapter.name],\n        (this.modalConfig.adapters as Record<WALLET_ADAPTER_TYPE, ModalConfig>)[adapter.name]?.loginMethods\n      );\n      if (Object.values(mergedLoginMethods).some((method) => method.showOnModal)) return true;\n      return false;\n    });\n    log.debug(hasInAppWallets, this.walletAdapters, \"hasInAppWallets\");\n    // Now, initialize the adapters.\n    const initPromises = adapterNames.map(async (adapterName) => {\n      if (!adapterName) return;\n      try {\n        const adapter = this.walletAdapters[adapterName];\n        // only initialize a external adapter here if it is a cached adapter.\n        if (this.cachedAdapter !== adapterName && adapter.type === ADAPTER_CATEGORY.EXTERNAL) {\n          return;\n        }\n        // in-app wallets or cached wallet (being connected or already connected) are initialized first.\n        // if adapter is configured thn only initialize in app or cached adapter.\n        // external wallets are initialized on INIT_EXTERNAL_WALLET event.\n        this.subscribeToAdapterEvents(adapter);\n        if (adapter.status === ADAPTER_STATUS.NOT_READY) await adapter.init({ autoConnect: this.cachedAdapter === adapterName });\n        // note: not adding cachedWallet to modal if it is external wallet.\n        // adding it later if no in-app wallets are available.\n        if (adapter.type === ADAPTER_CATEGORY.IN_APP) {\n          this.initializeInAppWallet(adapterName);\n        }\n      } catch (error) {\n        log.error(error, \"error while initializing adapter\");\n      }\n    });\n\n    this.status = ADAPTER_STATUS.READY;\n    await Promise.all(initPromises);\n\n    const hasExternalWallets = allAdapters.some((adapterName) => {\n      return this.walletAdapters[adapterName]?.type === ADAPTER_CATEGORY.EXTERNAL && this.modalConfig.adapters?.[adapterName].showOnModal;\n    });\n\n    if (hasExternalWallets) {\n      this.loginModal.initExternalWalletContainer();\n    }\n\n    // variable to check if we have any in app wallets\n    // currently all default in app and external wallets can be hidden or shown based on config.\n    if (!hasInAppWallets && hasExternalWallets) {\n      // if no in app wallet is available then initialize external wallets in modal\n      await this.initExternalWalletAdapters(false, { showExternalWalletsOnly: true });\n    }\n  }\n\n  public async connect(): Promise<SafeEventEmitterProvider | null> {\n    // if (!this.loginModal.initialized) throw new Error(\"Login modal is not initialized\");\n    // if already connected return provider\n    if (this.provider) return this.provider;\n    this.loginModal.open();\n    return new Promise((resolve, reject) => {\n      this.once(ADAPTER_EVENTS.CONNECTED, () => {\n        return resolve(this.provider);\n      });\n      this.once(ADAPTER_EVENTS.ERRORED, (err: unknown) => {\n        return reject(err);\n      });\n    });\n  }\n\n  private async initExternalWalletAdapters(externalWalletsInitialized: boolean, options?: { showExternalWalletsOnly: boolean }): Promise<void> {\n    if (externalWalletsInitialized) return;\n    const adaptersConfig: Record<string, BaseAdapterConfig> = {};\n    Object.keys(this.walletAdapters).forEach(async (adapterName) => {\n      const adapter = this.walletAdapters[adapterName];\n      if (adapter?.type === ADAPTER_CATEGORY.EXTERNAL) {\n        log.debug(\"init external wallet\", this.cachedAdapter, adapterName);\n        this.subscribeToAdapterEvents(adapter);\n        // we are not initializing cached adapter here as it is already being initialized in initModal before.\n        if (this.cachedAdapter === adapterName) {\n          return;\n        }\n        if (adapter.status === ADAPTER_STATUS.NOT_READY)\n          await adapter\n            .init({ autoConnect: this.cachedAdapter === adapterName })\n            .then(() => {\n              adaptersConfig[adapterName] = (this.modalConfig.adapters as Record<WALLET_ADAPTER_TYPE, ModalConfig>)[adapterName];\n              this.loginModal.addWalletLogins(adaptersConfig, { showExternalWalletsOnly: !!options?.showExternalWalletsOnly });\n              return undefined;\n            })\n            .catch((error) => log.error(error, \"error while initializing adapter\"));\n      }\n    });\n  }\n\n  private initializeInAppWallet(adapterName: string): void {\n    log.info(\"adapterInitResults\", adapterName);\n    if (this.walletAdapters[adapterName].type === ADAPTER_CATEGORY.IN_APP) {\n      this.loginModal.addSocialLogins(\n        adapterName,\n        getAdapterSocialLogins(\n          adapterName,\n          this.walletAdapters[adapterName],\n          (this.modalConfig.adapters as Record<WALLET_ADAPTER_TYPE, ModalConfig>)[adapterName]?.loginMethods\n        ),\n        this.options.uiConfig?.loginMethodsOrder || OPENLOGIN_PROVIDERS\n      );\n    }\n  }\n\n  private subscribeToLoginModalEvents(): void {\n    this.loginModal.on(LOGIN_MODAL_EVENTS.LOGIN, async (params: { adapter: WALLET_ADAPTER_TYPE; loginParams: unknown }) => {\n      try {\n        await this.connectTo<unknown>(params.adapter, params.loginParams);\n      } catch (error) {\n        log.error(`Error while connecting to adapter: ${params.adapter}`, error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.INIT_EXTERNAL_WALLETS, async (params: { externalWalletsInitialized: boolean }) => {\n      await this.initExternalWalletAdapters(params.externalWalletsInitialized);\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.DISCONNECT, async () => {\n      try {\n        await this.logout();\n      } catch (error) {\n        log.error(`Error while disconnecting`, error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, async (visibility: boolean) => {\n      log.debug(\"is login modal visible\", visibility);\n      this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, visibility);\n      const walletConnectStatus = this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1]?.status;\n      if (visibility && walletConnectStatus === ADAPTER_STATUS.READY) {\n        // refreshing session for wallet connect whenever modal is opened.\n        try {\n          this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1].connect();\n        } catch (error) {\n          log.error(`Error while disconnecting to wallet connect in core`, error);\n        }\n      }\n    });\n  }\n}\n"],"names":["PLUGIN_NAMESPACES","CHAIN_NAMESPACES","MULTICHAIN","ADAPTER_CACHE_KEY","Web3AuthCore","_inherits","options","_classCallCheck","_this","_defineProperty","ADAPTER_STATUS","clientId","WalletInitializationError","enableLogging","log","chainConfig","_options$chainConfig","chainNamespace","Object","values","includes","_options$chainConfig2","storageKey","storage","cachedAdapter","storageAvailable","window","getItem","coreOptions","getChainConfig","_options$chainConfig3","_options$chainConfig4","chainId","subscribeToAdapterEvents","bind","_assertThisInitialized","_createClass","key","get","this","status","connectedAdapterName","walletAdapters","provider","set","_","Error","value","_init","initPromises","keys","map","adapterName","_this2","chainConfigProxy","providedChainConfig","setChainConfig","setAdapterSettings","sessionTime","init","autoConnect","catch","e","_context","Promise","all","adapter","checkInitRequirements","name","adapterNamespace","ADAPTER_NAMESPACES","currentChainNamespace","removeItem","_connectTo","walletName","loginParams","_context2","connect","_logout","_args3","cleanup","_context3","WalletLoginError","disconnect","_getUserInfo","_context4","getUserInfo","_authenticateUser","_context5","authenticateUser","plugin","plugins","_context6","pluginNamespace","initWithWeb3Auth","walletAdapter","on","ADAPTER_EVENTS","data","_this3","cacheWallet","_context7","error","code","emit","clearCache","_context8","setItem","SafeEventEmitter","defaultSolanaDappModalConfig","adapters","SOLANA_ADAPTERS","label","showOnModal","showOnMobile","showOnDesktop","defaultEvmDappModalConfig","EVM_ADAPTERS","defaultSolanaWalletModalConfig","defaultEvmWalletModalConfig","defaultOtherModalConfig","getDefaultAdapterModule","params","customChainConfig","finalChainConfig","WALLET_ADAPTERS","_yield$import","TorusWalletAdapter","_yield$import2","SolanaWalletAdapter","_yield$import3","MetamaskAdapter","_yield$import4","PhantomAdapter","_yield$import5","WalletConnectV1Adapter","_yield$import6","OpenloginAdapter","getOpenloginDefaultOptions","defaultOptions","adapterSettings","languageMap","en","de","ja","ko","zh","es","Web3Auth","authMode","modalConfig","defaultLanguage","userLanguage","navigator","language","split","prototype","hasOwnProperty","call","getUserLanguage","uiConfig","_this$options$uiConfi","loginModal","LoginModal","theme","_this$options$uiConfi2","appLogo","version","adapterListener","displayErrorsOnModal","subscribeToLoginModalEvents","_get","initModal","allAdapters","Set","adapterConfigurationPromises","adapterConfig","_this2$modalConfig$ad2","ad","type","ADAPTER_CATEGORY","_this2$modalConfig$ad4","_this2$coreOptions$ch","adapterNames","hasInAppWallets","some","loginMethods","mergedLoginMethods","getAdapterSocialLogins","method","initializeInAppWallet","hasExternalWallets","_this2$modalConfig$ad6","initExternalWalletContainer","initExternalWalletAdapters","showExternalWalletsOnly","_connect","open","resolve","reject","once","err","_initExternalWalletAdapters","externalWalletsInitialized","adaptersConfig","forEach","_this4","then","addWalletLogins","addSocialLogins","_this$options$uiConfi4","loginMethodsOrder","OPENLOGIN_PROVIDERS","LOGIN_MODAL_EVENTS","_this5","connectTo","_asyncToGenerator","_context9","logout","visibility","walletConnectStatus"],"sourceRoot":""}